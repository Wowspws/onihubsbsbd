local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "👹OniHub👹 Version 2.5",
    SubTitle = "by Mycroman & Oni",
    TabWidth = 160,
    Size = UDim2.fromOffset(580, 460),
    Acrylic = true,
    Theme = "Amethyst",
    MinimizeKey = Enum.KeyCode.LeftControl
})

-- Existing Fluent UI Setup Code
do
    Fluent:Notify({
        Title = "You Executed Onihub:)",
        Content = "Yipee",
        SubContent = "Have Fun",
        Duration = 5
    })
    

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Anti = Window:AddTab({ Title = "Anti's", Icon = "" }),
    Move = Window:AddTab({ Title = "MoveMent", Icon = "" }),
    Bind = Window:AddTab({ Title = "KeyBinds", Icon = "" }),
    misc = Window:AddTab({ Title = "Miscellaneous", Icon = "" }),
    anim = Window:AddTab({ Title = "Animations", Icon = "" }),
    tool = Window:AddTab({ Title = "Tools", Icon = "" }),
    CustomMovesets = Window:AddTab({ Title = "Custom Movesets", Icon = "" }),
    Settings = Window:AddTab({ Title = "Settings", Icon = "settings" })
}

local Options = Fluent.Options

local UserInputService = game:GetService("UserInputService")

-- Function to create the UI
local function createButton()
    -- Only create the button if the user is on mobile
    if UserInputService.TouchEnabled and not UserInputService.KeyboardEnabled then
        -- Create a ScreenGui to hold the button
        local screenGui = Instance.new("ScreenGui")
        screenGui.Name = "PersistentButtonGui"  -- Name the ScreenGui for identification
        screenGui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")

        -- Create the TextButton
        local button = Instance.new("TextButton")
        button.Size = UDim2.new(0, 150, 0, 150)  -- Make the button a square
        button.Position = UDim2.new(0.5, -75, 0.5, -75)  -- Center the button on the screen
        button.Text = "Open/Close UI"  -- Set the text on the button
        button.Font = Enum.Font.SourceSansBold  -- Set font style
        button.TextSize = 24  -- Set text size
        button.TextColor3 = Color3.new(1, 1, 1)  -- Set text color (white)
        button.Parent = screenGui

        -- Create a UICorner to make the button circular
        local uiCorner = Instance.new("UICorner")
        uiCorner.CornerRadius = UDim.new(1, 0)  -- Full circle (corner radius = half of width/height)
        uiCorner.Parent = button

        -- Create a UIGradient for the button background
        local uiGradient = Instance.new("UIGradient")
        uiGradient.Color = ColorSequence.new({
            ColorSequenceKeypoint.new(0, Color3.new(1, 0, 0)),  -- Red at the top (0)
            ColorSequenceKeypoint.new(1, Color3.new(0, 0, 0))   -- Black at the bottom (1)
        })
        uiGradient.Parent = button  -- Add the gradient to the button

        -- Function to simulate pressing and releasing the Ctrl key
        local function pressControlKey()
            local VirtualInputManager = game:GetService("VirtualInputManager")
            VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.LeftControl, false, game)  -- Press Ctrl
            wait(0.1)
            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.LeftControl, false, game)  -- Release Ctrl
        end

        -- Connect the button click to the function
        button.MouseButton1Click:Connect(pressControlKey)

        -- Variables to handle dragging
        local dragging = false
        local dragInput, mousePos, framePos

        -- Function to update the button's position while dragging
        local function updateInput(input)
            local delta = input.Position - mousePos
            button.Position = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
        end

        -- InputBegan event to start dragging
        button.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 then
                dragging = true
                mousePos = input.Position
                framePos = button.Position

                input.Changed:Connect(function()
                    if input.UserInputState == Enum.UserInputState.End then
                        dragging = false
                    end
                end)
            end
        end)

        -- InputChanged event to update the button's position
        button.InputChanged:Connect(function(input)
            if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
                dragInput = input
            end
        end)

        -- UserInputService event to detect mouse movement while dragging
        game:GetService("UserInputService").InputChanged:Connect(function(input)
            if input == dragInput and dragging then
                updateInput(input)
            end
        end)
    end
end

-- Connect to CharacterAdded to create UI on player spawn/reset
game.Players.LocalPlayer.CharacterAdded:Connect(function()
    -- Check if the GUI already exists and remove it
    local existingGui = game.Players.LocalPlayer.PlayerGui:FindFirstChild("PersistentButtonGui")
    if existingGui then
        existingGui:Destroy()  -- Remove the existing GUI
    end
    createButton()  -- Create a new UI button
end)

-- Initial call to create the UI when the player first joins
createButton()

-- Adding buttons for each function from Onihub.txt

-- Check if "Delirious" sound already exists
if not game:GetService("SoundService"):FindFirstChild("Delirious") then
    -- Download the sound file and set up the sound in the game
    writefile("Delirious.mp3", game:HttpGet("https://cdn.discordapp.com/attachments/769737885136977970/1290553299027890207/y2mate.com_-_Delirious.mp3?ex=6704212b&is=6702cfab&hm=610ee7c085a948f7b9782c77887932f9486ae8d08281debd1e0a75e443617ca2&"))
    local Encounter = "rbxasset://Delirious.mp3"

    -- Create and configure the sound object
    local sound = Instance.new("Sound", game:GetService("SoundService"))
    sound.Name = "Delirious" -- Assign a name to identify the sound
    sound.SoundId = getcustomasset("Delirious.mp3")
    sound.Volume = 1
    sound.Looped = false
    sound.Parent = game:GetService("SoundService")

    print("Delirious sound imported successfully")
else
    print("Delirious sound already exists")
end

-- Check if "HonoredOne" sound already exists
if not game:GetService("SoundService"):FindFirstChild("HonoredOne") then
    -- Download the sound file and set up the sound in the game
    writefile("HonoredOne.mp3", game:HttpGet("https://cdn.discordapp.com/attachments/769737885136977970/1290553475612282890/Gojo_Satoru_-_The_Honored_One_Jujutsu_Kaisen_Season_2_OST.mp3?ex=66fedb55&is=66fd89d5&hm=cf75beee2bb72cb5c401d54ae66bf0386bf61c2a31dd4c87465f879a686583c9&"))
    local Encounter = "rbxasset://HonoredOne.mp3"

    -- Create and configure the sound object
    local sound = Instance.new("Sound", game:GetService("SoundService"))
    sound.Name = "HonoredOne" -- Assign a name to identify the sound
    sound.SoundId = getcustomasset("HonoredOne.mp3")
    sound.Volume = 1
    sound.Looped = false
    sound.Parent = game:GetService("SoundService")

    print("HonoredOne sound imported successfully")
else
    print("HonoredOne sound already exists")
end

-- Check if "HonoredOne" sound already exists
if not game:GetService("SoundService"):FindFirstChild("Thunderclap") then
    -- Download the sound file and set up the sound in the game
    writefile("Thunderclap.mp3", game:HttpGet("https://cdn.discordapp.com/attachments/769737885136977970/1290616786311450624/y2mate.com_-_Thunderclap.mp3?ex=66ff164c&is=66fdc4cc&hm=9b0e00b75aafe70b25c861fc9152d7fdce90f5e83e519a3651804b57d7074be5&"))
    local Encounter = "rbxasset://Thunderclap.mp3"

    -- Create and configure the sound object
    local sound = Instance.new("Sound", game:GetService("SoundService"))
    sound.Name = "Thunderclap" -- Assign a name to identify the sound
    sound.SoundId = getcustomasset("Thunderclap.mp3")
    sound.Volume = 1
    sound.Looped = false
    sound.Parent = game:GetService("SoundService")

    print("Thunderclap sound imported successfully")
else
    print("Thunderclap sound already exists")
end

local replicatedStorage = game:GetService("ReplicatedStorage")

-- Create or get the Resources folder
local resourcesFolder = replicatedStorage:FindFirstChild("Resources")
if not resourcesFolder then
    resourcesFolder = Instance.new("Folder")
    resourcesFolder.Name = "Resources"
    resourcesFolder.Parent = replicatedStorage
end

-- Load the model
local model = game:GetObjects("rbxassetid://15583142175")[1]

-- Parent the model to the Resources folder
model.Parent = resourcesFolder


local Button = Tabs.misc:AddButton({
    Title = "Inf yield",
    Description = "Loads Infinite Yield script",
    Callback = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
    end
})

local isRunning = false
local animationConnection -- Store the animation event connection
local deathConnection -- Store the death event connection

local Button = Tabs.Main:AddButton({
    Title = "Auto Dunk",
    Description = "Use Garous Lethal Whirlwind Or Atomics Atmos Cleave",
    Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/Wowspws/dunk/refs/heads/main/hi"))()

    end
})

local isRunning = false
local animationConnection 
local deathConnection 

local Button = Tabs.Main:AddButton({
    Title = "Auto Extender",
    Description = "Use Garous Hunters Grasp, Rock Splitting Fist Or Metal Bats Foul Ball",
    Callback = function()

loadstring(game:HttpGet("https://raw.githubusercontent.com/Wowspws/extender/refs/heads/main/garou/dhhdfhfhfjfjfjfjfjfjfjfjfjfjfjfgjt9eo306939602863967395849gjtvrkyjyjtii/ekfiwotofofofbfuscatekdldonk")()
    end
})

local isRunning = false
local connection 
local deathConnection 


local Button = Tabs.Anti:AddButton({
    Title = "Anti Death Counter",
    Description = "Bypasses Death Counter",
    Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/Wowspws/antidc/refs/heads/main/r1tceishc0qdvbh0djqv9qfvjoqfvjqodvjqdvonvqdonqdvondqvpjqdv0jvdq%20iqdv0%200jvqd%20%20qd0j%20qdvjp%20qdvjbqdvp0jqd%20v0jqdv"))()
    end
})

local Button = Tabs.Anti:AddButton({
    Title = "Mini Anti DC",
    Description = "Use This If Anti Death Counter Somehow Messes Up",
    Callback = function()
        local Players = game:GetService("Players")
        local player = Players.LocalPlayer

        -- Original position and orientation
        local originalPosition = player.Character and player.Character.HumanoidRootPart.Position
        local originalOrientation = player.Character and player.Character.HumanoidRootPart.CFrame

        -- Target position and orientation
        local targetPosition = Vector3.new(1187.54102, -499.052856, 23674.498)
        local targetOrientation = CFrame.new(
            1187.54102, -499.052856, 23674.498,  -- Position
            0.747619033, -6.86524757e-08, -0.664127827,  -- Orientation Matrix
            2.13483915e-08, 1, -7.93401611e-08,
            0.664127827, 4.51381545e-08, 0.747619033
        )

        -- Function to spawn a part
        local function spawnPart()
            local part = Instance.new("Part")
            part.Size = Vector3.new(500, 1, 500)
            part.Anchored = true
            part.CFrame = CFrame.new(targetPosition)
            part.Parent = workspace
            return part
        end

        -- Function to teleport the player to the target position
        local function teleportToTarget()
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                local standPosition = targetPosition + Vector3.new(0, 2, 0) -- 2 units above the part
                local standOrientation = CFrame.new(
                    standPosition,
                    standPosition + targetOrientation.LookVector
                )
                player.Character.HumanoidRootPart.CFrame = standOrientation
            end
        end

        -- Function to find the closest player
        local function findClosestPlayer()
            local closestPlayer = nil
            local shortestDistance = math.huge

            -- Iterate through all players to find the closest one
            for _, otherPlayer in pairs(Players:GetPlayers()) do
                if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
                    local distance = (player.Character.HumanoidRootPart.Position - otherPlayer.Character.HumanoidRootPart.Position).Magnitude
                    if distance < shortestDistance then
                        shortestDistance = distance
                        closestPlayer = otherPlayer
                    end
                end
            end

            return closestPlayer
        end

        -- Define the chatMessage function
        local function chatMessage(str)
            str = tostring(str)
            local TextChatService = game:GetService("TextChatService")
            local ReplicatedStorage = game:GetService("ReplicatedStorage")

            if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
                -- For TextChatService (the new chat system)
                TextChatService.TextChannels.RBXGeneral:SendAsync(str)
            else
                -- For the legacy chat system
                ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
            end
        end

        -- Define a list of possible chat messages
        local messages = {
                            "Ah Yes My Anti Death Counter Technique, I Havent Used This Since The Heian Era!",
                            "Death Counterer You Dare Touch My Soul? Learn Your Place Fool",
                            "nuh uh no death counter for u Death Counterer",
                            "The Death Counterer Got Death Counterd?",
                            "Im Going To Lose?",
							"My techniques allow me to rewrite the very fabric of Death",
							"I’ve transcended death! My will is stronger than the Grim Reaper!",
							"My technique lets me manipulate life and death itself!",
							"I can face death and laugh in its face! I am invincible!",
							"My technique allows me to counter death with every breath I take!",
							"My resolve can counter even the cruelest of fates. I won’t let death claim me!",
							"With my powers I am the master of my own destiny, even beyond death!",
                            "Death Counter Ain Nun On Me 😭",
                            "Domain Expansion Anti Death Counter!",
                            "Killer Queen Bites The Dust, Killer Queens Third Ability Is A Bomb To Blow Away Anyone Who Tries To Come After Me!",
                            "You Will Never Reach The Truth",
                            "Stand Proud Death Counterer You Are Strong",
                            "Come On Come On Try Harder",
                            "Dont Even Try To Death Counter Me Death Counterer",
                            "Even With Your Death Counter Death Counterer You Will Never Beat Me!",
                            "I Thought I Was Gonna Die For A Second!",
                            "Gojo Hubs Anti Death Counter Cant Do This 💀",
                            "Get Ur Death Counter Outta Here!",
                            "My Anti Death Counter Technique Will Never Fail!",
                            "Igaris IS Not Worth Grinding On Vanguards But Atleast Im Still Alive!",
                            "KJ Is Never Releasing But Atleast Im Still Alive!",
                            "Fall..."
        }

        -- Clone the original messages table to track used messages
        local unusedMessages = {}

        -- Shuffle function
        local function shuffle(tbl)
            local len = #tbl
            for i = len, 2, -1 do
                local j = math.random(1, i)
                tbl[i], tbl[j] = tbl[j], tbl[i]
            end
        end

        -- Initialize the unusedMessages table with shuffled messages
        local function resetMessages()
            unusedMessages = {unpack(messages)}
            shuffle(unusedMessages)
        end

        -- Initialize unusedMessages
        resetMessages()

        -- Function to send a random message without repeating until all are used
        local function sendUniqueMessage()
            if #unusedMessages == 0 then
                resetMessages()  -- Refill and shuffle when all messages have been used
            end

            -- Pop the first message from the shuffled list
            local message = table.remove(unusedMessages, 1)

            -- If the message contains "Death Counterer", replace it with the closest player's DisplayName
            if string.find(message, "Death Counterer") then
                local closestPlayer = findClosestPlayer()
                if closestPlayer then
                    local displayName = closestPlayer.DisplayName or closestPlayer.Name
                    message = string.gsub(message, "Death Counterer", displayName)
                end
            end

            -- Send the message
            chatMessage(message)
        end

        -- Example usage: call the function to send a random unique message
        sendUniqueMessage()

        -- Function to teleport the player back to the original position
        local function teleportBack()
            if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
                player.Character.HumanoidRootPart.CFrame = originalOrientation
            end
        end

        local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to fix the camera
local function fixCamera()
    local camera = game.Workspace.CurrentCamera
    local savedCFrame = camera.CFrame -- Save the camera's CFrame before destroying it
    
    camera:Destroy() -- Destroy the current camera
    
    local char = player.Character
    if char then
        local humanoid = char:FindFirstChildWhichIsA('Humanoid')
        if humanoid then
            local newCamera = Instance.new("Camera")
            newCamera.Parent = game.Workspace
            game.Workspace.CurrentCamera = newCamera
            newCamera.CameraSubject = humanoid
            newCamera.CameraType = Enum.CameraType.Custom
            newCamera.CFrame = savedCFrame -- Restore the saved CFrame
            
            -- Camera settings
            player.CameraMinZoomDistance = 0.5
            player.CameraMaxZoomDistance = 400
            player.CameraMode = Enum.CameraMode.Classic
            
            -- Unanchor the character's head if necessary
            if char:FindFirstChild("Head") then
                char.Head.Anchored = false
            end
        end
    end
end

fixCamera()

        -- Execute on script run
        local standPart = spawnPart()
        teleportToTarget()

        -- Example of returning to original position (you can bind this to a key or event)
        wait(2)  -- Waiting for 3 seconds as an example
        teleportBack()
    end
})


local Toggle = Tabs.Main:AddToggle("InfJumpToggle", {
    Title = "Inf Jump",
    Description = "Self Explantory",
    Default = false,
    Callback = function(A)
 loadstring(game:HttpGet("https://raw.githubusercontent.com/Wowspws/rjfjfjfjf/refs/heads/main/tfbqibqdvjbpgqdihqegihqegih0gqe8hqegh9qrg9jrgq9h"))()
    end
})

Toggle:SetValue(false)  

    local TeleportsTab = Window:AddTab({ Title = "Teleports", Icon = "" })
    
local Button = TeleportsTab:AddButton({
    Title = "Middle",
    Description = "Teleports to the middle",
    Callback = function()
        local rootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
        rootPart.CFrame = CFrame.new(172.694687, 440.755981, 20.3052578, -0.909835994, 3.00958014e-08, -0.414968044, -4.81294693e-09, 1, 8.30781843e-08, 0.414968044, 7.7584744e-08, -0.909835994)
    end,
})

Tabs.Main:AddToggle("ResurrectionToggle", {

    Title = "Resurrection",

    Description = "Spawns you where you last died, by hecker4118",

    Default = false,

    Callback = function(v)

        ressurecttoggled = v
end
})
local cframetogoto = CFrame.new(Vector3.new(0, 0, 0))
local function humanoidcheck()
    game.Players.LocalPlayer.Character:WaitForChild("Humanoid").Died:Connect(function()
        if ressurecttoggled == true then
            cframetogoto = game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame
        end
    end)
end
humanoidcheck()
game.Players.LocalPlayer.CharacterAdded:Connect(function()
    if ressurecttoggled == true then
        game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame = cframetogoto
        humanoidcheck()
        
        
        local character = game.Players.LocalPlayer.Character
        local humanoid = character:WaitForChild("Humanoid")
        local animator = humanoid:FindFirstChildOfClass("Animator") or Instance.new("Animator", humanoid)
        local animation = Instance.new("Animation")
        animation.AnimationId = "rbxassetid://15507137974"
        animator:LoadAnimation(animation):Play()
    end
end)

local Keybind = Tabs.Bind:AddKeybind("Keybind", {
    Title = "Teleport",
    Description = "Press T to teleport to your mouse cursor location.",
    Mode = "Always",
    Default = "T",

    Callback = function(Value)
        if Value then
            local player = game.Players.LocalPlayer
            local mouse = player:GetMouse()
            local character = player.Character or player.CharacterAdded:Wait()
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")

            if humanoidRootPart then
                humanoidRootPart.CFrame = CFrame.new(mouse.Hit.Position)

                local particleEffect = game.ReplicatedStorage.Resources.FiveSeasonsFX.CharFX.TP
                if particleEffect then
                    local clonedEffect = particleEffect:Clone()
                    clonedEffect.Parent = humanoidRootPart
                    for _, child in ipairs(clonedEffect:GetChildren()) do
                        if child:IsA("ParticleEmitter") then
                            child:Emit(5)
                        end
                    end
                end
            end
        end
    end,

    ChangedCallback = function(New)
        print("Keybind changed to:", New)
    end
})

local Button = TeleportsTab:AddButton({
    Title = "Safe Zone",
    Description = "Teleports to the Safe Zone",
    Callback = function()
        local rootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
        rootPart.CFrame = CFrame.new(-189.638138, 675.706604, 386.982758, 0.252588421, -1.2454463e-09, -0.967573822, -3.33527694e-09, 1, -2.1578701e-09, 0.967573822, 3.77217946e-09, 0.252588421)
    end,
})

local Button = TeleportsTab:AddButton({
    Title = "Death Counter",
    Description = "Teleports to the Death Counter",
    Callback = function()
        local rootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
        rootPart.CFrame = CFrame.new(-71.3368073, 41.49646, 20346.0078, 0.826658666, -0.558634877, 0.067546621, 0.000352442265, 0.120553493, 0.992706716, -0.562703609, -0.820605814, 0.099853456)
    end,
})

local Button = TeleportsTab:AddButton({
    Title = "Gojos Domain",
    Description = "Teleports to the Death Counter",
    Callback = function()
        local rootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
        rootPart.CFrame = CFrame.new(-89.8481293, 47.0002327, 29.1830826, 1, 0, 0, 0, 1, 0, 0, 0, 1)
    end,
})

local Button = TeleportsTab:AddButton({
    Title = "Baseplate Top",
    Description = "Teleports to the top baseplate",
    Callback = function()
        local rootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
        rootPart.CFrame = CFrame.new(1198.20337, 405.988922, 23086.8281, 0.972048879, 6.82608681e-09, 0.234778509, 9.81779102e-09, 1, -6.97229865e-08, -0.234778509, 7.00791603e-08, 0.972048879)
    end,
})

local Button = TeleportsTab:AddButton({
    Title = "Baseplate Bottom",
    Description = "Teleports to the bottom baseplate",
    Callback = function()
        local rootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
        rootPart.CFrame = CFrame.new(1198.20337, 25.988922, 23086.8281, 0.972048879, 6.82608681e-09, 0.234778509, 9.81779102e-09, 1, -6.97229865e-08, -0.234778509, 7.00791603e-08, 0.972048879)
    end,
})

local Button = Tabs.misc:AddButton({
    Title = "Fling Click",
    Description = "Makes your character kinda shaky on other players' screens",
    Callback = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/0Ben1/fe/main/obf_5wpM7bBcOPspmX7lQ3m75SrYNWqxZ858ai3tJdEAId6jSI05IOUB224FQ0VSAswH.lua.txt', true))()
    end
})

local Button = Tabs.misc:AddButton({
    Title = "Fe Chat haxx",
    Description = "Makes a new gui with Chat Haxx",
    Callback = function()
		loadstring(game:HttpGet('https://raw.githubusercontent.com/yofriendfromschool1/Sky-Hub-Backup/main/Chat/FE%20Chat%20Haxx%20V3.5.txt'))();
    end
})

local Button = Tabs.misc:AddButton({
    Title = "Universal Spy",
    Description = "very useful",
    Callback = function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/MichaelScripter/MiniScript/main/Spy%20gui.lua"))()
    end
})

local Button = Tabs.misc:AddButton({
    Title = "Rizz Gui",
    Description = "Rizz",
    Callback = function()
		loadstring(game:HttpGet("https://raw.githubusercontent.com/mikhailramlal/Rizzer/main/main"))()
    end
})

local TextChatService = game:GetService("TextChatService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Input for the Sacred Summoning Name
local SacredSummoningNameInput = Tabs.Settings:AddInput("SacredSummoningNameInput", {
    Title = "Sacred Summoning Name",
    Default = "Default Name",
    Placeholder = "Enter the name for Sacred Summoning",
    Numeric = false, -- Allows both text and numbers
    Finished = true, -- Calls the callback only when you press Enter
    Callback = function(Value)
        print("Sacred Summoning Name changed:", Value)
    end
})

local Button = Tabs.tool:AddButton({
    Title = "WITH THIS SACRED TREASURE I SUMMON",
    Description = "Gives the Sacred Summoning tool",
    Callback = function()
        -- ID of the animation to play (no movement)
        local animationId = "17862993552"

        -- Variable to keep track of the animation track
        local currentAnimationTrack

        -- Function to send a chat message
        local function chatMessage(str)
            str = tostring(str)
            if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
                TextChatService.TextChannels.RBXGeneral:SendAsync(str)
            else
                ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
            end
        end

        -- Function to stop all animations except the specific animation
        local function stopAllAnimations(humanoid)
            for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
                if track ~= currentAnimationTrack then
                    track:Stop() -- Stop all other animations
                end
            end
        end

        -- Function to play the specific animation
        local function playAnimation(character)
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if not humanoid then return end

            -- Ensure any existing animation is stopped
            if currentAnimationTrack then
                currentAnimationTrack:Stop()
            end

            -- Create a new animation instance
            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://" .. animationId

            -- Load the animation onto the humanoid
            currentAnimationTrack = humanoid:LoadAnimation(animation)

            -- Play the animation
            currentAnimationTrack:Play()
        end

        -- Create the tool
        local function createCompoundVTool()
            local tool = Instance.new("Tool")
            tool.Name = "Sacred Summoning"
            tool.RequiresHandle = false
            tool.CanBeDropped = false
            
            tool.Equipped:Connect(function()
                local character = Players.LocalPlayer.Character
                if not character then return end

                -- Get the input value, convert to uppercase, and add "!" at the end
                local summoningName = (SacredSummoningNameInput.Value or "UNKNOWN NAME"):upper() .. "!"

                -- Play the animation when the tool is equipped
                playAnimation(character)

                -- Send the chat message with the formatted input
                chatMessage("WITH THIS SACRED TREASURE I SUMMON " .. summoningName)
            end)

            tool.Unequipped:Connect(function()
                local character = Players.LocalPlayer.Character
                if not character then return end

                -- Stop the animation when the tool is unequipped
                if currentAnimationTrack then
                    currentAnimationTrack:Stop()
                    currentAnimationTrack = nil
                end
                
                -- Reset walk speed to default
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.WalkSpeed = 16 -- Reset to default walk speed
                end
            end)

            -- Give the tool to the player
            tool.Parent = Players.LocalPlayer.Backpack
        end

        createCompoundVTool() -- Create and give the Sacred Summoning tool
    end,
})


local Button = Tabs.tool:AddButton({
    Title = "Fake Omni",
    Description = "Gives the Fake Omni tool",
    Callback = function()
        local Players = game:GetService("Players")
        local RunService = game:GetService("RunService")

        -- ID of the animation to play (no movement)
        local animationId = "13927612951"

        -- Variable to keep track of the animation track
        local currentAnimationTrack

        -- Function to stop all animations except the specific animation
        local function stopAllAnimations(humanoid)
            for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
                if track ~= currentAnimationTrack then
                    track:Stop() -- Stop all other animations
                end
            end
        end

        -- Function to play the specific animation
        local function playAnimation(character)
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if not humanoid then return end

            -- Ensure any existing animation is stopped
            if currentAnimationTrack then
                currentAnimationTrack:Stop()
            end

            -- Create a new animation instance
            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://" .. animationId

            -- Load the animation onto the humanoid
            currentAnimationTrack = humanoid:LoadAnimation(animation)

            -- Play the animation
            currentAnimationTrack:Play()
        end

        -- Create the Compound V tool
        local function createCompoundVTool()
            local tool = Instance.new("Tool")
            tool.Name = "Fake Omni"
            tool.RequiresHandle = false
            tool.CanBeDropped = false
            
            tool.Equipped:Connect(function()
                local character = Players.LocalPlayer.Character
                if not character then return end

                -- Play the animation when the tool is equipped
                playAnimation(character)
            end)

            tool.Unequipped:Connect(function()
                local character = Players.LocalPlayer.Character
                if not character then return end

                -- Stop the animation when the tool is unequipped
                if currentAnimationTrack then
                    currentAnimationTrack:Stop()
                    currentAnimationTrack = nil
                end
                
                -- Reset walk speed to default
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.WalkSpeed = 16 -- Reset to default walk speed
                end
            end)

            -- Give the tool to the player
            tool.Parent = Players.LocalPlayer.Backpack
        end

        createCompoundVTool() -- Create and give the Compound V tool
    end,
})

local Button = Tabs.CustomMovesets:AddButton({
    Title = "Pressurizer",
    Description = "Use Saitama--First Moveset I made--MycroMan",
   Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/Wowspws/preasureizermov/refs/heads/main/29949ttj5jgitig9fjgjgjgjgjghwo30fmeofjrif"))()

   end,
})

local Button = Tabs.CustomMovesets:AddButton({
    Title = "Mixed powers",
    Description = "Use Saitama--Not Made By Us",
   Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/Wowspws/randimmivesettt/refs/heads/main/444tggggggggg66666666ttttt"))()
   end,
})

local Button = Tabs.CustomMovesets:AddButton({
    Title = "Satoru Gojo",
    Description = "Use Saitama--Become The Honored One",
    Callback = function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/Wowspws/ONIGOJOHUBDBXHF/refs/heads/main/onigojo.txt"))()
   end,
})

local Button = Tabs.CustomMovesets:AddButton({
    Title = "Ryomen Sukuna (Megumi Vessel) ",
    Description = "Use Saitama--Become The King Of Curses",
    Callback = function()

-- LocalScript in StarterPlayerScripts or StarterCharacterScripts

local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

-- Function to play the animation
local function playAnimation(animationId)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animation = Instance.new("Animation")
        animation.AnimationId = "rbxassetid://" .. tostring(animationId)
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play()
    end
end

local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("1").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Mountain Destroying Punch"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("2").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Merciless Barrage"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("3").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Black Flash"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("4").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Upper Slam"


local Players = game:GetService("Players")

local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")


local function findGuiAndSetText()

    local screenGui = playerGui:FindFirstChild("ScreenGui")

    if screenGui then

        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")

        if magicHealthFrame then

            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")

            if textLabel then

                textLabel.Text = "The King Of Curses"

            end

        end

    end

end

playerGui.DescendantAdded:Connect(findGuiAndSetText)
 
findGuiAndSetText()

local TweenService = game:GetService("TweenService")
local player = game.Players.LocalPlayer
local camera = game.Workspace.CurrentCamera
local playerGui = player:WaitForChild("PlayerGui")

local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Duration of the cutscene and fade
local cutsceneDuration = 1
local fadeDuration = 1

-- Create a ScreenGui and Frame for the fade effect
local screenGui = Instance.new("ScreenGui", playerGui)
local frame = Instance.new("Frame", screenGui)
frame.AnchorPoint = Vector2.new(0.5, 0.5)
frame.Position = UDim2.new(0.5, 0, 0.5, 0)
frame.Size = UDim2.new(900, 0, 900, 0) -- Set the size to be 900 times bigger
frame.BackgroundColor3 = Color3.new(0, 0, 0)
frame.BackgroundTransparency = 1

-- Create a TextLabel for the "Super Saiyan" text in Chinese
local textLabel = Instance.new("TextLabel", screenGui)
textLabel.AnchorPoint = Vector2.new(0.5, 0.5)
textLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
textLabel.Size = UDim2.new(0.2, 0, 0.1, 0)
textLabel.BackgroundTransparency = 1
textLabel.Text = "五条"
textLabel.TextColor3 = Color3.new(1, 0, 0) -- Set text color to red
textLabel.TextScaled = true
textLabel.Font = Enum.Font.SourceSansBold
textLabel.TextTransparency = 1

-- TweenInfo for the fade effect
local fadeInInfo = TweenInfo.new(
    fadeDuration, -- Time
    Enum.EasingStyle.Sine, -- EasingStyle
    Enum.EasingDirection.InOut -- EasingDirection
)

local fadeOutInfo = TweenInfo.new(
    fadeDuration, -- Time
    Enum.EasingStyle.Sine, -- EasingStyle
    Enum.EasingDirection.InOut -- EasingDirection
)

-- TweenInfo for the camera movement
local tweenInfo = TweenInfo.new(
    cutsceneDuration, -- Time
    Enum.EasingStyle.Sine, -- EasingStyle
    Enum.EasingDirection.InOut -- EasingDirection
)

-- Initial and final camera CFrame
local initialCFrame = humanoidRootPart.CFrame * CFrame.new(0, -5, 0)
local finalCFrame = humanoidRootPart.CFrame * CFrame.new(0, 2, 2) * CFrame.Angles(0, math.rad(180), 0)

-- Create the Tween for the camera
local cameraTween = TweenService:Create(camera, tweenInfo, {CFrame = finalCFrame})

-- Create Tweens for the fade effect
local fadeInTween = TweenService:Create(frame, fadeInInfo, {BackgroundTransparency = 0})
local fadeOutTween = TweenService:Create(frame, fadeOutInfo, {BackgroundTransparency = 1})

-- Create Tweens for the text transparency
local textFadeInTween = TweenService:Create(textLabel, fadeInInfo, {TextTransparency = 0})
local textFadeOutTween = TweenService:Create(textLabel, fadeOutInfo, {TextTransparency = 1})

-- Function to play the camera cutscene and fade effect
local function playCutscene()
    -- Set initial camera position
    camera.CFrame = initialCFrame
    
    -- Play the fade-in tween for the black screen and text
    fadeInTween:Play()
    textFadeInTween:Play()
    fadeInTween.Completed:Wait()
    
    -- Play the camera tween
    cameraTween:Play()
    cameraTween.Completed:Wait()
    
    -- Play the fade-out tween for the black screen and text
    fadeOutTween:Play()
    textFadeOutTween:Play()
    fadeOutTween.Completed:Wait()
    
    -- Reset the camera to its default behavior
    camera.CameraSubject = character:WaitForChild("Humanoid")
end

-- Start the cutscene
playCutscene()

-- Define the animation IDs
local targetAnimationId = "10469493270" -- m1 1
local animationId = "17889458563" -- The ID of the animation you want to play

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to stop all animations
local function stopAllAnimations(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
            track:Stop() -- Stop each playing animation
        end
    end
end

-- Function to create and play the new animation
local function playAnimation(character)
    stopAllAnimations(character) -- Stop all current animations

    -- Create an animation instance for the new animation
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load and play the animation on the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the new animation
    end
end

-- Function to stop the target animation and play the new one
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Play the new animation
            playAnimation(character)
        end
    end
end

-- Connect to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "10469630950" -- m1 2
local animationId = "17889461810" -- The ID of the animation you want to play

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to stop all animations
local function stopAllAnimations(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
            track:Stop() -- Stop each playing animation
        end
    end
end

-- Function to create and play the new animation
local function playAnimation(character)
    stopAllAnimations(character) -- Stop all current animations

    -- Create an animation instance for the new animation
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load and play the animation on the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the new animation
    end
end

-- Function to stop the target animation and play the new one
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Play the new animation
            playAnimation(character)
        end
    end
end

-- Connect to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "10469639222" -- m1 3
local animationId = "17889471098" -- The ID of the animation you want to play

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to stop all animations
local function stopAllAnimations(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
            track:Stop() -- Stop each playing animation
        end
    end
end

-- Function to create and play the new animation
local function playAnimation(character)
    stopAllAnimations(character) -- Stop all current animations

    -- Create an animation instance for the new animation
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load and play the animation on the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the new animation
    end
end

-- Function to stop the target animation and play the new one
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Play the new animation
            playAnimation(character)
        end
    end
end

-- Connect to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "10469643643" -- m1 4
local animationId = "17889290569" -- The ID of the animation you want to play

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to stop all animations
local function stopAllAnimations(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
            track:Stop() -- Stop each playing animation
        end
    end
end

-- Function to create and play the new animation
local function playAnimation(character)
    stopAllAnimations(character) -- Stop all current animations

    -- Create an animation instance for the new animation
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load and play the animation on the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the new animation
    end
end

-- Function to stop the target animation and play the new one
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Play the new animation
            playAnimation(character)
        end
    end
end

-- Connect to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "10479335397" -- Sukuna Dash
local animationId = "17838006839" -- The ID of the animation you want to play
local animationSpeed = 2.35 -- Adjust the speed here (2 means 2x faster, 1 is normal speed)

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to stop all animations
local function stopAllAnimations(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
            track:Stop() -- Stop each playing animation
        end
    end
end

-- Function to create and play the new animation
local function playAnimation(character)
    stopAllAnimations(character) -- Stop all current animations

    -- Create an animation instance for the new animation
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load and play the animation on the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the new animation

        -- Get the player and their character
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Function to find a descendant recursively by name
local function findDescendant(parent, name)
    local child = parent:FindFirstChild(name)
    if not child then
        for _, descendant in ipairs(parent:GetChildren()) do
            child = findDescendant(descendant, name)
            if child then
                break
            end
        end
    end
    return child
end

-- Function to duplicate a ParticleEmitter
local function duplicateEmitter(originalEmitter)
    local duplicate = originalEmitter:Clone()
    duplicate.Parent = originalEmitter.Parent
    duplicate.Rate = 150  -- Set the rate of the duplicated emitter to 150 initially
    return duplicate
end

-- Invisibility settings
local invisibilityDuration = .55 -- Time the player stays invisible (in seconds)
local invisibleTransparency = 1 -- Transparency when invisible (0 is fully visible, 1 is fully invisible)
local visibleTransparency = 0 -- Transparency when visible

-- Parts to exclude from invisibility
local excludedParts = {
    "HumanoidRootPart",
    "Hitbox_RightArm",
    "Hitbox_RightLeg",
    "Hitbox_LeftLeg",
    "Hitbox_LeftArm",
    "camera",
    "camerarootpart",
    "letterboxtop",
    "letterboxbot",
}

-- Function to check if a part should be excluded
local function isExcluded(part)
    for _, name in ipairs(excludedParts) do
        if part.Name == name then
            return true
        end
    end
    return false
end

-- Function to turn the player invisible
local function turnInvisible()
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") and not isExcluded(part) then
            part.Transparency = invisibleTransparency
        elseif (part:IsA("Decal") or part:IsA("Texture")) and not isExcluded(part.Parent) then
            part.Transparency = 1 -- Hide textures/decals fully
        end
    end
end

-- Function to turn the player visible again
local function turnVisible()
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") and not isExcluded(part) then
            part.Transparency = visibleTransparency
        elseif (part:IsA("Decal") or part:IsA("Texture")) and not isExcluded(part.Parent) then
            part.Transparency = 0 -- Show textures/decals again
        end
    end
end

-- Main logic
local replicatedStorage = game:GetService("ReplicatedStorage")
local resourcesFolder = replicatedStorage:WaitForChild("Resources", 2) -- Wait for 2 seconds if not immediately found
if resourcesFolder then
    local kjEffectsFolder = resourcesFolder:FindFirstChild("KJEffects")
    if kjEffectsFolder then
        local tpThingEmitter = findDescendant(kjEffectsFolder, "tpthing")
        if tpThingEmitter and tpThingEmitter:IsA("ParticleEmitter") then
            -- Duplicate the emitter
            local duplicatedEmitter = duplicateEmitter(tpThingEmitter)

            -- Parent the duplicated emitter to HumanoidRootPart
            duplicatedEmitter.Parent = humanoidRootPart

            -- Make the player invisible
            turnInvisible()
            wait(invisibilityDuration)
            turnVisible()

            -- Set the rate of the duplicated emitter to 0 after invisibility duration
            duplicatedEmitter.Rate = 0
        else
            warn("Could not find tpthing ParticleEmitter or it is not a ParticleEmitter.")
        end
    else
        warn("Could not find KJEffects folder inside Resources.")
    end
else
    warn("Could not find Resources folder inside ReplicatedStorage.")
end

        animationTrack.Speed = animationSpeed -- Set the animation speed
    end
end

-- Function to stop the target animation and play the new one
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Play the new animation
            playAnimation(character)
        end
    end
end

-- Connect to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
        
    end
end

-- Detect when the local player's character is added
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)


-- Define the animation IDs
local targetAnimationId = "10468665991" -- Mountain Destroying Punch
local animationId = "18249294373" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 3 -- Time in seconds
local animationSpeed = .8 -- Speed of the animation

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 1) -- Adjust the animation speed (default is 1 if not provided)

                    -- Emit particles
        local function emitParticles(finalPart)
            for _, child in ipairs(finalPart:GetChildren()) do
                if child:IsA("ParticleEmitter") then
                    child:Emit(1) -- Emit particles
                end
            end
        end

        -- Wait for the specified duration and then stop the animation
        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else

    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "15955393872" -- The ID of the animation you want to detect
local animationId = "15943915877" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 4 -- Time in seconds
local animationSpeed = .9 -- Speed of the animation

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 1) -- Adjust the animation speed (default is 1 if not provided)

        -- Wait for the specified duration and then stop the animation
        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else

    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "10470104242" -- Ground Slam
local animationId = "17858878027" -- The ID of the animation you want to play
local animationSpeed = 2 -- Set the speed multiplier (2x speed in this case)

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation
local function playAnimation(character)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(animationSpeed) -- Adjust the speed of the animation
    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = game.Players.LocalPlayer.Character
        if character then
            -- Call the function to play the animation
            playAnimation(character)
        end
    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)


-- Define the animation IDs
local targetAnimationId = "10471336737" -- Black Flash Sukuna
local animationId = "18896127525" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 2 -- Time in seconds
local animationSpeed = 3.1 -- Speed of the animation

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 4) -- Adjust the animation speed (default is 1 if not provided)

            task.wait(.4)
-- get the vfx from Replicated Storage
local effect = game.ReplicatedStorage.Resources.KJEffects.DropkickExtra["firstHit"].Attachment:Clone()

-- the parent of the vfx
effect.Parent = game.Players.LocalPlayer.Character.Hitbox_RightArm

-- emitting za partcle
for _, child in ipairs(effect:GetChildren()) do
    if child:IsA("ParticleEmitter") then
        child:Emit(5) -- Emit 1 particle
    end
end

                local ss = game:GetService("SoundService")
local Sound = Instance.new("Sound", ss)
Sound.SoundId = "rbxassetid://18443813318"
Sound.Volume = 2
Sound:Play()

                local ss = game:GetService("SoundService")
local Sound = Instance.new("Sound", ss)
Sound.SoundId = "rbxassetid://6339560679"
Sound.Volume = 2
Sound:Play()

        -- Wait for the specified duration and then stop the animation
        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else

    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Wait for 0.1 seconds before performing the desired action
        wait(0.1)
        
        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)
        else

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    else

    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "12983333733" -- The ID of the animation you want to detect
local animationId = "16746824621" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 10 -- Time in seconds
local animationSpeed = 0.35 -- Speed of the animation

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to fix the camera
local function fixCamera()
    local camera = game.Workspace.CurrentCamera
    local savedCFrame = camera.CFrame -- Save the camera's CFrame before destroying it
    
    camera:Destroy() -- Destroy the current camera
    
    local char = player.Character
    if char then
        local humanoid = char:FindFirstChildWhichIsA('Humanoid')
        if humanoid then
            local newCamera = Instance.new("Camera")
            newCamera.Parent = game.Workspace
            game.Workspace.CurrentCamera = newCamera
            newCamera.CameraSubject = humanoid
            newCamera.CameraType = Enum.CameraType.Custom
            newCamera.CFrame = savedCFrame -- Restore the saved CFrame
            
            -- Camera settings
            player.CameraMinZoomDistance = 0.5
            player.CameraMaxZoomDistance = 400
            player.CameraMode = Enum.CameraMode.Classic
            
            -- Unanchor the character's head if necessary
            if char:FindFirstChild("Head") then
                char.Head.Anchored = false
            end
        end
    end
end

-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 1) -- Adjust the animation speed (default is 1 if not provided)

        -- SoundPlayer.lua

-- Wait for the sound objects to exist in SoundService
local deliriousSound = game:GetService("SoundService"):WaitForChild("Thunderclap")
local honoredOneSound = game:GetService("SoundService"):WaitForChild("HonoredOne")

-- Function to gradually adjust volume over time
local function adjustVolumeOverTime(startVolume, endVolume, duration, onComplete)
    local steps = duration * 60 -- 60 FPS for smooth transitions
    local volumeChangePerStep = (endVolume - startVolume) / steps

    -- Use task.delay to incrementally adjust volume over the duration
    for i = 1, steps do
        task.delay(i / 60, function()
            if deliriousSound then
                deliriousSound.Volume = deliriousSound.Volume + volumeChangePerStep
                if i == steps and onComplete then
                    onComplete()
                end
            end
        end)
    end
end

-- Function to customize and play the sound with fade-in and fade-out
local function customizeAndPlaySound(timePosition, maxVolume, fadeInDuration, fadeOutStartTime, fadeOutDuration)
    if deliriousSound then
        -- Customize sound properties
        deliriousSound.TimePosition = timePosition or 0 -- Set the start time, default to 0
        deliriousSound.Volume = 0 -- Start with volume at 0 for the fade-in effect

        -- Play the sound
        deliriousSound:Play()

        -- Fade-in effect
        adjustVolumeOverTime(0, maxVolume, fadeInDuration)

        -- Fade-out effect, scheduled after fadeOutStartTime seconds
        task.delay(fadeOutStartTime, function()
            adjustVolumeOverTime(maxVolume, 0, fadeOutDuration, function()
                deliriousSound:Stop() -- Stop the sound once the fade-out completes
            end)
        end)
    else
        warn("Delirious sound not found!")
    end
end

-- Function to constantly check if 'HonoredOne' is playing and stop it when 'Delirious' starts
local function monitorHonoredOne()
    game:GetService("RunService").RenderStepped:Connect(function()
        if deliriousSound.IsPlaying and honoredOneSound.IsPlaying then
            honoredOneSound:Stop() -- Stop 'HonoredOne' if 'Delirious' is playing
        end
    end)
end

-- Call the function to customize and play the 'Delirious' sound
-- Parameters: Start at 74.5 seconds, maximum volume 10, fade in for 3 seconds, fade out after 15 seconds, and fade out over 5 seconds
customizeAndPlaySound(201.5, 3, 3, 20, 5)

-- Start continuously checking if 'HonoredOne' is playing
monitorHonoredOne()

        task.wait(1.5)

-- get the vfx from Replicated Storage
local effect = game.ReplicatedStorage.Resources.FiveSeasonsFX.JumpFX["JumpFX"].Attachment:Clone()

-- the parent of the vfx
effect.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart

-- emitting za partcle
for _, child in ipairs(effect:GetChildren()) do
    if child:IsA("ParticleEmitter") then
        child:Emit(2) -- Emit 1 particle
    end
end

wait(0)

        -- Chat messages with Japanese translations
        chatMessage("You Humans Really Are Pathetic || 君たち人間は本当に哀れだ")
        wait(.5) -- Wait for 1 second before sending the next chat message

            local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("1").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Mountain Destroying Punch"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("2").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Merciless Barrage"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("3").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Black Flash"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("4").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Upper Slam"


local Players = game:GetService("Players")

local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")


local function findGuiAndSetText()

    local screenGui = playerGui:FindFirstChild("ScreenGui")

    if screenGui then

        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")

        if magicHealthFrame then

            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")

            if textLabel then

                textLabel.Text = "The King Of Curses"

            end

        end

    end

end

playerGui.DescendantAdded:Connect(findGuiAndSetText)
 
findGuiAndSetText()

        chatMessage("Prepare Yourselves! || 準備をしてください!")
        wait(1) -- Wait for 1 second before sending the next chat message

        wait(3.5) -- Wait for 1 second before sending the next chat message
        chatMessage("Strong Dismantle || 強力な解体")

        -- Wait for the specified duration and then stop the animation
        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else

    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then

        animationTrack:Stop() -- Stop the target animation

        -- Fix the camera when the target animation is detected
        fixCamera()
        
        -- Wait for 0.1 seconds before performing the desired action
        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)
        else

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character

local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    else

    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else

end

player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "11343318134" -- The ID of the animation you want to detect
local animationId = "18459220516" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 10 -- Time in seconds
local animationSpeed = 1 -- Speed of the animation

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

-- Function to fix the camera
local function fixCamera()
    local camera = game.Workspace.CurrentCamera
    local savedCFrame = camera.CFrame -- Save the camera's CFrame before destroying it
    
    camera:Destroy() -- Destroy the current camera
    
    local char = player.Character
    if char then
        local humanoid = char:FindFirstChildWhichIsA('Humanoid')
        if humanoid then
            local newCamera = Instance.new("Camera")
            newCamera.Parent = game.Workspace
            game.Workspace.CurrentCamera = newCamera
            newCamera.CameraSubject = humanoid
            newCamera.CameraType = Enum.CameraType.Custom
            newCamera.CFrame = savedCFrame -- Restore the saved CFrame
            
            -- Camera settings
            player.CameraMinZoomDistance = 0.5
            player.CameraMaxZoomDistance = 400
            player.CameraMode = Enum.CameraMode.Classic
            
            -- Unanchor the character's head if necessary
            if char:FindFirstChild("Head") then
                char.Head.Anchored = false
            end
        end
    end
end

fixCamera()

-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

           -- SoundPlayer.lua

-- Wait for the sound object to exist in SoundService
local sound = game:GetService("SoundService"):WaitForChild("Thunderclap")

-- Function to gradually adjust volume over time
local function adjustVolumeOverTime(startVolume, endVolume, duration, onComplete)
    local steps = duration * 60 -- 60 FPS for smooth transitions
    local volumeChangePerStep = (endVolume - startVolume) / steps

    -- Use task.delay to incrementally adjust volume over the duration
    for i = 1, steps do
        task.delay(i / 60, function()
            if sound then
                sound.Volume = sound.Volume + volumeChangePerStep
                if i == steps and onComplete then
                    onComplete()
                end
            end
        end)
    end
end

-- Function to customize and play the sound with fade-in and fade-out
local function customizeAndPlaySound(timePosition, maxVolume, fadeInDuration, fadeOutStartTime, fadeOutDuration)
    if sound then
        -- Customize sound properties
        sound.TimePosition = timePosition or 0 -- Set the start time, default to 0
        sound.Volume = 0 -- Start with volume at 0 for the fade-in effect

        -- Play the sound
        sound:Play()

        -- Fade-in effect
        adjustVolumeOverTime(0, maxVolume, fadeInDuration)

        -- Fade-out effect, scheduled after fadeOutStartTime seconds
        task.delay(fadeOutStartTime, function()
            adjustVolumeOverTime(maxVolume, 0, fadeOutDuration, function()
                sound:Stop() -- Stop the sound once the fade-out completes
            end)
        end)
    else
        warn("Sound not found!")
    end
end

-- Call the function to customize and play the sound
-- Parameters: Start at 74.5 seconds, maximum volume 10, fade in for 3 seconds, fade out after 10 seconds, and fade out over 5 seconds
customizeAndPlaySound(82, 2, 5, 10, 5)

    local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("1").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Mountain Destroying Punch"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("2").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Merciless Barrage"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("3").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Black Flash"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("4").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Upper Slam"


local Players = game:GetService("Players")

local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")


local function findGuiAndSetText()

    local screenGui = playerGui:FindFirstChild("ScreenGui")

    if screenGui then

        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")

        if magicHealthFrame then

            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")

            if textLabel then

                textLabel.Text = "The King Of Curses"

            end

        end

    end

end

playerGui.DescendantAdded:Connect(findGuiAndSetText)
 
findGuiAndSetText()

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 1) -- Adjust the animation speed (default is 1 if not provided)
        
        -- Chat messages with Japanese translations
        chatMessage("Domain Expansion Maleovolent Shrine || ドメイン拡張悪意の神社")
        wait(1) -- Wait for 1 second before sending the next chat message

        -- Wait for the specified duration and then stop the animation
        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else

    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then

        animationTrack:Stop() -- Stop the target animation

        -- Fix the camera when the target animation is detected
        fixCamera()
        
        -- Wait for 0.1 seconds before performing the desired action

        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)
        else

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    else

    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "13927612951" -- The ID of the animation you want to detect
local animationId = "18897563773" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 10 -- Time in seconds
local animationSpeed = 1 -- Speed of the animation

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

-- Function to fix the camera
local function fixCamera()
    local camera = game.Workspace.CurrentCamera
    local savedCFrame = camera.CFrame -- Save the camera's CFrame before destroying it
    
    camera:Destroy() -- Destroy the current camera
    
    local char = player.Character
    if char then
        local humanoid = char:FindFirstChildWhichIsA('Humanoid')
        if humanoid then
            local newCamera = Instance.new("Camera")
            newCamera.Parent = game.Workspace
            game.Workspace.CurrentCamera = newCamera
            newCamera.CameraSubject = humanoid
            newCamera.CameraType = Enum.CameraType.Custom
            newCamera.CFrame = savedCFrame -- Restore the saved CFrame
            
            -- Camera settings
            player.CameraMinZoomDistance = 0.5
            player.CameraMaxZoomDistance = 400
            player.CameraMode = Enum.CameraMode.Classic
            
            -- Unanchor the character's head if necessary
            if char:FindFirstChild("Head") then
                char.Head.Anchored = false
            end
        end
    end
end

-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("1").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Mountain Destroying Punch"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("2").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Merciless Barrage"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("3").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Black Flash"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("4").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Upper Slam"


local Players = game:GetService("Players")

local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")


local function findGuiAndSetText()

    local screenGui = playerGui:FindFirstChild("ScreenGui")

    if screenGui then

        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")

        if magicHealthFrame then

            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")

            if textLabel then

                textLabel.Text = "The King Of Curses"

            end

        end

    end

end

playerGui.DescendantAdded:Connect(findGuiAndSetText)
 
findGuiAndSetText()

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 1) -- Adjust the animation speed (default is 1 if not provided)
        
        -- Chat messages with Japanese translations
        chatMessage("Come On! || 来て！")

        -- Wait for the specified duration and then stop the animation
        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else

    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then

        animationTrack:Stop() -- Stop the target animation

        -- Fix the camera when the target animation is detected
        fixCamera()
        
        -- Wait for 0.1 seconds before performing the desired action

        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)
        else

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "11365563255" -- The ID of the animation you want to detect
local animationId = "13071982935" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 10 -- Time in seconds
local animationSpeed = 0.7 -- Speed of the animation

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

-- Function to fix the camera
local function fixCamera()
    local camera = game.Workspace.CurrentCamera
    local savedCFrame = camera.CFrame -- Save the camera's CFrame before destroying it
    
    camera:Destroy() -- Destroy the current camera
    
    local char = player.Character
    if char then
        local humanoid = char:FindFirstChildWhichIsA('Humanoid')
        if humanoid then
            local newCamera = Instance.new("Camera")
            newCamera.Parent = game.Workspace
            game.Workspace.CurrentCamera = newCamera
            newCamera.CameraSubject = humanoid
            newCamera.CameraType = Enum.CameraType.Custom
            newCamera.CFrame = savedCFrame -- Restore the saved CFrame
            
            -- Camera settings
            player.CameraMinZoomDistance = 0.5
            player.CameraMaxZoomDistance = 400
            player.CameraMode = Enum.CameraMode.Classic
            
            -- Unanchor the character's head if necessary
            if char:FindFirstChild("Head") then
                char.Head.Anchored = false
            end
        end
    end
end

-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("1").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Mountain Destroying Punch"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("2").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Merciless Barrage"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("3").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Black Flash"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("4").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Upper Slam"


local Players = game:GetService("Players")

local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")


local function findGuiAndSetText()

    local screenGui = playerGui:FindFirstChild("ScreenGui")

    if screenGui then

        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")

        if magicHealthFrame then

            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")

            if textLabel then

                textLabel.Text = "The King Of Curses"

            end

        end

    end

end

playerGui.DescendantAdded:Connect(findGuiAndSetText)
 
findGuiAndSetText()

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 1) -- Adjust the animation speed (default is 1 if not provided)

-- Define floating settings for below 50% health
local floatName = "FloatPart"
local floatOffset = -5
local floatDelay = 0
local floatSpeed = 0.3
local floatDuration = 1
local vanishDuration = 8  -- Duration to pause before disappearing

-- Get the local player and services
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait() -- Wait for character to load
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local function floatCharacter()
    task.delay(floatDelay, function()
        -- Create the floating part
        local Float = Instance.new('Part')
        Float.Name = floatName
        Float.Parent = character
        Float.Transparency = 1
        Float.Size = Vector3.new(555, 1, 555)
        Float.Anchored = true
        
        local initialCFrame = character:FindFirstChild("HumanoidRootPart").CFrame
        Float.CFrame = initialCFrame * CFrame.new(0, floatOffset, 0)
        
        local floatValue = 0
        local startTime = tick()
        
        -- Start floating logic
        local function float()
            while tick() - startTime < floatDuration do
                floatValue = floatValue + floatSpeed
                Float.CFrame = initialCFrame * CFrame.new(0, floatOffset + floatValue, 0)
                task.wait(0.01)
            end
            
            -- Pause before disappearing
            task.delay(vanishDuration, function()
                Float:Destroy()
            end)
        end
        
        float()  -- Call the float function to start the floating logic
    end)
end

floatCharacter()

           -- SoundPlayer.lua

-- Wait for the sound object to exist in SoundService
local sound = game:GetService("SoundService"):WaitForChild("Thunderclap")

-- Function to gradually adjust volume over time
local function adjustVolumeOverTime(startVolume, endVolume, duration, onComplete)
    local steps = duration * 60 -- 60 FPS for smooth transitions
    local volumeChangePerStep = (endVolume - startVolume) / steps

    -- Use task.delay to incrementally adjust volume over the duration
    for i = 1, steps do
        task.delay(i / 60, function()
            if sound then
                sound.Volume = sound.Volume + volumeChangePerStep
                if i == steps and onComplete then
                    onComplete()
                end
            end
        end)
    end
end

-- Function to customize and play the sound with fade-in and fade-out
local function customizeAndPlaySound(timePosition, maxVolume, fadeInDuration, fadeOutStartTime, fadeOutDuration)
    if sound then
        -- Customize sound properties
        sound.TimePosition = timePosition or 0 -- Set the start time, default to 0
        sound.Volume = 0 -- Start with volume at 0 for the fade-in effect

        -- Play the sound
        sound:Play()

        -- Fade-in effect
        adjustVolumeOverTime(0, maxVolume, fadeInDuration)

        -- Fade-out effect, scheduled after fadeOutStartTime seconds
        task.delay(fadeOutStartTime, function()
            adjustVolumeOverTime(maxVolume, 0, fadeOutDuration, function()
                sound:Stop() -- Stop the sound once the fade-out completes
            end)
        end)
    else
        warn("Sound not found!")
    end
end

-- Call the function to customize and play the sound
-- Parameters: Start at 74.5 seconds, maximum volume 10, fade in for 3 seconds, fade out after 10 seconds, and fade out over 5 seconds
customizeAndPlaySound(90.5, 1, 5, 15, 5)

-- get the vfx from Replicated Storage
local effect = game.ReplicatedStorage.Resources.FiveSeasonsFX.JumpFX["JumpFX"].Attachment:Clone()

-- the parent of the vfx
effect.Parent = game.Players.LocalPlayer.Character.HumanoidRootPart

-- emitting za partcle
for _, child in ipairs(effect:GetChildren()) do
    if child:IsA("ParticleEmitter") then
        child:Emit(2) -- Emit 1 particle
    end
end

        -- Chat messages with Japanese translations
        chatMessage("Scale Of The Dragon || ドラゴンの鱗")
        wait(1) -- Wait for 1 second before sending the next chat message
        chatMessage("Recoil || 反動")
        wait(1) -- Wait for 1 second before sending the next chat message
        chatMessage("Twin Meteors || ツインメテオール")
        wait(4) -- Wait for 1 second before sending the next chat message
        chatMessage("World Cutting Slash || ワールドカットスラッシュ")

        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else

    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then

        animationTrack:Stop() -- Stop the target animation

        -- Fix the camera when the target animation is detected
        fixCamera()
        
        -- Wait for 0.1 seconds before performing the desired action

        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)
        else

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "12447707844" -- The ID of the animation you want to detect
local above50AnimationId = "17464923657" -- Animation ID for above 50% health
local below50AnimationId = "15507137974" -- Animation ID for below 50% health

-- Define durations and speeds
local above50AnimationDuration = 2
local above50AnimationSpeed = .6
local below50AnimationDuration = 10
local below50AnimationSpeed = 1.5

-- Define floating settings for below 50% health
local floatName = "FloatPart"
local floatOffset = -10
local floatDelay = 0
local floatSpeed = 0.2
local floatDuration = 6
local vanishDuration = 0

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

-- Function to create and play the animation with a specified speed
local function playAnimation(character, animationId, speed, duration)
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animator = humanoid:FindFirstChildOfClass("Animator")
        if animator then
            local animationTrack = animator:LoadAnimation(animation)
            animationTrack:Play()
            animationTrack:AdjustSpeed(speed or 1)

            -- SoundPlayer.lua

-- Wait for the sound objects to exist in SoundService
local sound = game:GetService("SoundService"):WaitForChild("Thunderclap")
local honoredSound = game:GetService("SoundService"):WaitForChild("HonoredOne")

-- Function to gradually adjust volume over time
local function adjustVolumeOverTime(startVolume, endVolume, duration, onComplete)
    local steps = duration * 60 -- 60 FPS for smooth transitions
    local volumeChangePerStep = (endVolume - startVolume) / steps

    -- Use task.delay to incrementally adjust volume over the duration
    for i = 1, steps do
        task.delay(i / 60, function()
            if sound then
                sound.Volume = sound.Volume + volumeChangePerStep
                if i == steps and onComplete then
                    onComplete()
                end
            end
        end)
    end
end

-- Function to customize and play the sound with fade-in and fade-out
local function customizeAndPlaySound(timePosition, maxVolume, fadeInDuration, fadeOutStartTime, fadeOutDuration)
    if sound then
        -- Customize sound properties
        sound.TimePosition = timePosition or 0 -- Set the start time, default to 0
        sound.Volume = 0 -- Start with volume at 0 for the fade-in effect

        -- Play the sound
        sound:Play()

        -- Fade-in effect
        adjustVolumeOverTime(0, maxVolume, fadeInDuration)

        -- Fade-out effect, scheduled after fadeOutStartTime seconds
        task.delay(fadeOutStartTime, function()
            adjustVolumeOverTime(maxVolume, 0, fadeOutDuration, function()
                sound:Stop() -- Stop the sound once the fade-out completes
            end)
        end)
    else
        warn("Sound not found!")
    end
end

-- Function to continuously check if 'HonoredOne' is playing and stop 'Delirious'
local function monitorHonoredOne()
    -- Run in a separate thread to constantly check the state of 'HonoredOne'
    task.spawn(function()
        while true do
            if honoredSound.IsPlaying and sound.IsPlaying then
                sound:Stop() -- Stop 'Delirious' sound when 'HonoredOne' starts playing
            end
            task.wait(0.1) -- Check every 0.1 seconds to reduce performance impact
        end
    end)
end

-- Call the function to customize and play the 'Delirious' sound
-- Parameters: Start at 33 seconds, maximum volume 2, fade in for 2 seconds, fade out after 40 seconds, and fade out over 5 seconds
customizeAndPlaySound(70, 1, 2, 30, 5)

-- Start monitoring 'HonoredOne' to stop 'Delirious' if it plays
monitorHonoredOne()

            -- If below 50%, float the character
            if speed == below50AnimationSpeed then
                local function floatCharacter()
                    task.wait(floatDelay)

                    if not character:FindFirstChild(floatName) then
                        task.spawn(function()
                            local Float = Instance.new('Part')
                            Float.Name = floatName
                            Float.Parent = character
                            Float.Transparency = 1
                            Float.Size = Vector3.new(350, 1, 350)
                            Float.Anchored = true
                            local initialCFrame = character:FindFirstChild("HumanoidRootPart").CFrame
                            Float.CFrame = initialCFrame * CFrame.new(0, floatOffset, 0)
                            local floatValue = 0
                            local isFloating = true

                            local startTime = tick()
                            while isFloating and tick() - startTime < floatDuration do
                                floatValue = floatValue + floatSpeed
                                Float.CFrame = initialCFrame * CFrame.new(0, floatOffset + floatValue, 0)
                                task.wait(0.01)
                            end

                            isFloating = false
                            task.delay(vanishDuration, function()
                                Float:Destroy()
                            end)
                        end)
                    end
                end

                floatCharacter()


                chatMessage("Foolish Humans Did You Really Think You Could Beat Me? || 愚かな人間よ、本当に私に勝てると思ったのか？")

            else

                chatMessage("Let's Start By Peeling Of Those Scales! || まずは鱗を剥がすところから始めましょう！")

                                local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local camera = game.Workspace.CurrentCamera

-- Wait for the character's HumanoidRootPart
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Store the original camera position (CFrame)
local originalCameraCFrame = camera.CFrame

-- Function to keep the player looking in the desired direction
local function updatePlayerDirection()
    local fixedDirection = Vector3.new(0.3, 0, 1) -- Adjust this vector to change the facing direction
    humanoidRootPart.CFrame = CFrame.new(humanoidRootPart.Position, humanoidRootPart.Position + fixedDirection)
end

-- Set the camera to Scriptable mode to control it manually
camera.CameraType = Enum.CameraType.Scriptable

-- Define a variable to track whether the camera is reset
local cameraReset = false

-- Function to spawn the camera at a fixed position relative to the player
local function setCameraPosition()
    -- Define a fixed offset from the HumanoidRootPart
    local cameraOffset = Vector3.new(3, 3, 5) -- Adjust these values to position the camera
    local cameraPosition = humanoidRootPart.Position + cameraOffset
    
    -- Set the camera's CFrame to look at the player's position
    camera.CFrame = CFrame.new(cameraPosition, humanoidRootPart.Position)
end

-- Update the camera and player facing direction every frame until camera reset
local runService = game:GetService("RunService")
local connection
connection = runService.RenderStepped:Connect(function()
    if not cameraReset then
        setCameraPosition()
        updatePlayerDirection()
    else
        connection:Disconnect()
    end
end)

-- Use task.delay to reset the camera after 2 seconds
task.delay(2, function()
    -- Reset the camera back to the original CFrame
    camera.CFrame = originalCameraCFrame
    camera.CameraType = Enum.CameraType.Custom
    
    -- Mark the camera as reset, which will stop the update loop
    cameraReset = true
end)

-- Use task.delay to reset the camera after 2 seconds
task.delay(2, function()
    -- Reset the camera back to the original CFrame
    camera.CFrame = originalCameraCFrame
    camera.CameraType = Enum.CameraType.Custom
end)

task.wait(.6)

local aqua = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 0)), -- cyan
    ColorSequenceKeypoint.new(1, Color3.fromRGB(0, 0, 0)) -- light aqua
}

local function emitParticles(effect, parent, duration)
    local fx = effect:Clone()
    fx.Parent = parent
    for _, child in ipairs(fx:GetChildren()) do
        if child:IsA("ParticleEmitter") then
            child.Color = aqua -- Change particle color to aqua
            child:Emit(5) -- Emit particles
        end
    end
    -- Stop emitting after duration
    delay(duration, function()
        for _, child in ipairs(fx:GetChildren()) do
            if child:IsA("ParticleEmitter") then
                child.Enabled = false -- Stop emission
            end
        end
    end)
end

-- Right Arm FX
emitParticles(game.ReplicatedStorage.Resources.FiveSeasonsFX["CharFX"].ArmBurst.Attachment, game.Players.LocalPlayer.Character["Right Arm"], 2)
emitParticles(game.ReplicatedStorage.Resources.FiveSeasonsFX["CharFX"].ArmBurst.a, game.Players.LocalPlayer.Character["Right Arm"], 2)
emitParticles(game.ReplicatedStorage.Resources.FiveSeasonsFX["CharFX"].ArmFX, game.Players.LocalPlayer.Character["Right Arm"], 2)

-- Head FX
emitParticles(game.ReplicatedStorage.Resources.FiveSeasonsFX["CharFX"].EyeEmit, game.Players.LocalPlayer.Character["Head"], 2)

-- Left Arm FX
emitParticles(game.ReplicatedStorage.Resources.FiveSeasonsFX["CharFX"].ArmBurst.Attachment, game.Players.LocalPlayer.Character["Left Arm"], 2)
emitParticles(game.ReplicatedStorage.Resources.FiveSeasonsFX["CharFX"].ArmBurst.a, game.Players.LocalPlayer.Character["Left Arm"], 2)
emitParticles(game.ReplicatedStorage.Resources.FiveSeasonsFX["CharFX"].ArmFX, game.Players.LocalPlayer.Character["Left Arm"], 2)

-- SoundPlayer.lua

-- Wait for the sound objects to exist in SoundService
local sound = game:GetService("SoundService"):WaitForChild("Thunderclap")
local honoredSound = game:GetService("SoundService"):WaitForChild("HonoredOne")

-- Function to gradually adjust volume over time
local function adjustVolumeOverTime(startVolume, endVolume, duration, onComplete)
    local steps = duration * 60 -- 60 FPS for smooth transitions
    local volumeChangePerStep = (endVolume - startVolume) / steps

    -- Use task.delay to incrementally adjust volume over the duration
    for i = 1, steps do
        task.delay(i / 60, function()
            if sound then
                sound.Volume = sound.Volume + volumeChangePerStep
                if i == steps and onComplete then
                    onComplete()
                end
            end
        end)
    end
end

-- Function to customize and play the sound with fade-in and fade-out
local function customizeAndPlaySound(timePosition, maxVolume, fadeInDuration, fadeOutStartTime, fadeOutDuration)
    if sound then
        -- Customize sound properties
        sound.TimePosition = timePosition or 0 -- Set the start time, default to 0
        sound.Volume = 0 -- Start with volume at 0 for the fade-in effect

        -- Play the sound
        sound:Play()

        -- Fade-in effect
        adjustVolumeOverTime(0, maxVolume, fadeInDuration)

        -- Fade-out effect, scheduled after fadeOutStartTime seconds
        task.delay(fadeOutStartTime, function()
            adjustVolumeOverTime(maxVolume, 0, fadeOutDuration, function()
                sound:Stop() -- Stop the sound once the fade-out completes
            end)
        end)
    else
        warn("Sound not found!")
    end
end

-- Function to continuously check if 'HonoredOne' is playing and stop 'Thunderclap'
local function monitorHonoredOne()
    -- Run in a separate thread to constantly check the state of 'HonoredOne'
    task.spawn(function()
        while true do
            if honoredSound.IsPlaying and sound.IsPlaying then
                sound:Stop() -- Stop 'Thunderclap' sound when 'HonoredOne' starts playing
            end
            task.wait(0.1) -- Check every 0.1 seconds to reduce performance impact
        end
    end)
end

-- Call the function to customize and play the 'Thunderclap' sound
-- Parameters: Start at 33 seconds, maximum volume 2, fade in for 2 seconds, fade out after 40 seconds, and fade out over 5 seconds
customizeAndPlaySound(70, 1, 2, 30, 5)

-- Start monitoring 'HonoredOne' to stop 'Delirious' if it plays
monitorHonoredOne()

local soundId = 7369744751 -- Correct sound ID

-- Create a new Sound instance
local sound = Instance.new("Sound")
sound.Name = "Dropkick Miss"
sound.SoundId = "rbxassetid://" .. soundId
sound.Volume = 10
sound.Pitch = 1.0 -- Pitch set to 1.0
sound.PlaybackSpeed = 1.0 -- Adjusted playback speed

-- Parent the sound to Workspace
sound.Parent = workspace

-- Play the sound
sound:Play()

            end

                task.wait(1.5)

            -- Update tool names
            local hotbar = player.PlayerGui:FindFirstChild("Hotbar")
            if hotbar then
                local backpack = hotbar:FindFirstChild("Backpack")
                if backpack then
                    local hotbarFrame = backpack:FindFirstChild("Hotbar")
                    if hotbarFrame then
                        hotbarFrame:FindFirstChild("1").Base.ToolName.Text = "Domain Expansion"
                        hotbarFrame:FindFirstChild("2").Base.ToolName.Text = "World Cutting Slash"
                        hotbarFrame:FindFirstChild("3").Base.ToolName.Text = "Strong Dismantle Blast"
                        hotbarFrame:FindFirstChild("4").Base.ToolName.Text = "Come On!"
                    end
                end
            end
        end
    end
end
   
-- Function to stop the target animation and play the appropriate animation based on health
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop()

        local character = player.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                local healthPercent = humanoid.Health / humanoid.MaxHealth
                if healthPercent > 0.5 then
                    playAnimation(character, above50AnimationId, above50AnimationSpeed, above50AnimationDuration)
                else
                    playAnimation(character, below50AnimationId, below50AnimationSpeed, below50AnimationDuration)
                end
            end
        end
    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "10466974800" -- The ID of the animation you want to detect
local animationId = "18897695481" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 1.3 -- Time in seconds
local animationSpeed = 2.5 -- Speed of the animation

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 1) -- Adjust the animation speed (default is 1 if not provided)

        -- Set the time position to start the animation 1 second earlier
        animationTrack.TimePosition = 0 -- Start 1 second earlier

        -- Wait for the specified duration and then stop the animation
        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else
        warn("Humanoid not found in character")
    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Wait for 0.1 seconds before performing the desired action
        wait(0.1)
        
        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)
        end
    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    else
    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else
    player.CharacterAdded:Connect(onCharacterAdded)
end

-- Define the animation IDs
local targetAnimationId = "12510170988" -- Super Stomp
local animationId1 = "12467789963 " -- The ID of the first animation to play
local animationId2 = "" -- The ID of the second animation to play

-- Define settings
local animationDuration = 2 -- Duration in seconds for each animation to play
local animationSpeed = 1.6 -- Speed of the animations
local anchorDuration = 1 -- Duration in seconds to keep the player anchored

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to create and play the animation with a specified speed
local function playAnimationsSequentially(character, speed, duration)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local function playAnimation(animationId)
            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://" .. animationId
            local animator = humanoid:FindFirstChildOfClass("Animator")
            if animator then
                local animationTrack = animator:LoadAnimation(animation)
                animationTrack:Play()
                animationTrack:AdjustSpeed(speed or 1)

                return animationTrack
            else

                return nil
            end
        end

        local track1 = playAnimation(animationId1)
        if track1 then
            task.wait(duration)
            track1:Stop()

            local track2 = playAnimation(animationId2)
            if track2 then
                task.wait(duration)
                track2:Stop()
            end
        end

    else

    end
end

-- Function to anchor the player's character
local function setAnchored(state)
    local character = player.Character
    if character then
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            rootPart.Anchored = state
        end
    end
end


-- Function to stop the target animation and play the new animations
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then


        animationTrack:Stop()

        local character = player.Character
        if character then
            setAnchored(true)
            task.delay(anchorDuration, function()
                setAnchored(false)
            end)
            playAnimationsSequentially(character, animationSpeed, animationDuration)
        else

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "10469630950" -- The ID of the animation you want to detect
local animationId = "10469630950" -- The ID of the animation you want to play

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation
local function playAnimation(character)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = game.Players.LocalPlayer.Character
        if character then
            -- Call the function to play the animation
            playAnimation(character)
        end
    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "10469643643" -- The ID of the animation you want to detect
local animationId = "10469643643" -- The ID of the animation you want to play

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation
local function playAnimation(character)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = game.Players.LocalPlayer.Character
        if character then
            -- Call the function to play the animation
            playAnimation(character)
        end
    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

   end,
})
   
local Button = Tabs.CustomMovesets:AddButton({
    Title = "Yuji Itadori",
    Description = "Use Garou--Become The One Who Throws Crazy Hands",
    Callback = function()
local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("1").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Black Flash"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("2").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Beatdown"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("3").Base

local ToolName = baseButton.ToolName


ToolName.Text = "UpperPush"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("4").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Opening Counter"


local Players = game:GetService("Players")

local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")


local function findGuiAndSetText()

    local screenGui = playerGui:FindFirstChild("ScreenGui")

    if screenGui then

        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")

        if magicHealthFrame then

            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")

            if textLabel then

                textLabel.Text = "120% Potential"

            end

        end

    end

end

playerGui.DescendantAdded:Connect(findGuiAndSetText)
 
findGuiAndSetText()

local TweenService = game:GetService("TweenService")
local player = game.Players.LocalPlayer
local camera = game.Workspace.CurrentCamera
local playerGui = player:WaitForChild("PlayerGui")

local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Duration of the cutscene and fade
local cutsceneDuration = 1
local fadeDuration = 1

-- Create a ScreenGui and Frame for the fade effect
local screenGui = Instance.new("ScreenGui", playerGui)
local frame = Instance.new("Frame", screenGui)
frame.AnchorPoint = Vector2.new(0.5, 0.5)
frame.Position = UDim2.new(0.5, 0, 0.5, 0)
frame.Size = UDim2.new(900, 0, 900, 0) -- Set the size to be 900 times bigger
frame.BackgroundColor3 = Color3.new(0, 0, 0)
frame.BackgroundTransparency = 1

-- Create a TextLabel for the "Super Saiyan" text in Chinese
local textLabel = Instance.new("TextLabel", screenGui)
textLabel.AnchorPoint = Vector2.new(0.5, 0.5)
textLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
textLabel.Size = UDim2.new(0.2, 0, 0.1, 0)
textLabel.BackgroundTransparency = 1
textLabel.Text = "裕 二"
textLabel.TextColor3 = Color3.new(1, 0, 0) -- Set text color to red
textLabel.TextScaled = true
textLabel.Font = Enum.Font.SourceSansBold
textLabel.TextTransparency = 1

-- TweenInfo for the fade effect
local fadeInInfo = TweenInfo.new(
    fadeDuration, -- Time
    Enum.EasingStyle.Sine, -- EasingStyle
    Enum.EasingDirection.InOut -- EasingDirection
)

local fadeOutInfo = TweenInfo.new(
    fadeDuration, -- Time
    Enum.EasingStyle.Sine, -- EasingStyle
    Enum.EasingDirection.InOut -- EasingDirection
)

-- TweenInfo for the camera movement
local tweenInfo = TweenInfo.new(
    cutsceneDuration, -- Time
    Enum.EasingStyle.Sine, -- EasingStyle
    Enum.EasingDirection.InOut -- EasingDirection
)

-- Initial and final camera CFrame
local initialCFrame = humanoidRootPart.CFrame * CFrame.new(0, -5, 0)
local finalCFrame = humanoidRootPart.CFrame * CFrame.new(0, 2, 2) * CFrame.Angles(0, math.rad(180), 0)

-- Create the Tween for the camera
local cameraTween = TweenService:Create(camera, tweenInfo, {CFrame = finalCFrame})

-- Create Tweens for the fade effect
local fadeInTween = TweenService:Create(frame, fadeInInfo, {BackgroundTransparency = 0})
local fadeOutTween = TweenService:Create(frame, fadeOutInfo, {BackgroundTransparency = 1})

-- Create Tweens for the text transparency
local textFadeInTween = TweenService:Create(textLabel, fadeInInfo, {TextTransparency = 0})
local textFadeOutTween = TweenService:Create(textLabel, fadeOutInfo, {TextTransparency = 1})

-- Function to play the camera cutscene and fade effect
local function playCutscene()
    -- Set initial camera position
    camera.CFrame = initialCFrame
    
    -- Play the fade-in tween for the black screen and text
    fadeInTween:Play()
    textFadeInTween:Play()
    fadeInTween.Completed:Wait()
    
    -- Play the camera tween
    cameraTween:Play()
    cameraTween.Completed:Wait()
    
    -- Play the fade-out tween for the black screen and text
    fadeOutTween:Play()
    textFadeOutTween:Play()
    fadeOutTween.Completed:Wait()
    
    -- Reset the camera to its default behavior
    camera.CameraSubject = character:WaitForChild("Humanoid")
end

-- Start the cutscene
playCutscene()

-- Define the animation IDs
local targetAnimationId = "12463072679" -- The ID of the animation you want to detect
local animationId = "" -- The ID of the animation you want to play

-- Get the local player and TextChatService
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

-- Function to tilt the character down
local function tiltDown(character)
    local rootPart = character:WaitForChild("HumanoidRootPart")
    local originalCFrame = rootPart.CFrame
    local tiltAngle = math.rad(10) -- Adjust the tilt angle as needed
    rootPart.CFrame = originalCFrame * CFrame.Angles(tiltAngle, 0, 0)
end

-- Function to reset the tilt
local function resetTilt(character)
    local rootPart = character:WaitForChild("HumanoidRootPart")
    rootPart.CFrame = rootPart.CFrame * CFrame.Angles(-math.rad(10), 0, 0)
end

-- Function to create and play the animation
local function playAnimation(character)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

        -- Send chat messages
        chatMessage("")
        wait(0.5) -- Add a slight delay between the messages
        chatMessage("")
        wait(0.5) -- Add a slight delay between the messages
        chatMessage("")

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then

        wait() -- Add a slight delay between the messages

        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        
        -- Tilt the character down
        tiltDown(character)

        -- Wait for the animation to complete
        wait(10) -- Adjust this to match your animation's duration
        animationTrack:Stop() -- Stop the animation
        
        -- Reset the tilt
        resetTilt(character)
    end
end

-- Function to stop the target animation and perform the desired action
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = game.Players.LocalPlayer.Character
        if character then
            -- Call the function to play the animation
            playAnimation(character)
        end
    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "12460977270" -- The ID of the animation you want to detect
local animationId1 = "13560306510" -- The ID of the first animation to play
local animationId2 = "12467789963" -- The ID of the second animation to play

-- Define settings
local animationDuration = 1 -- Duration in seconds for each animation to play
local animationSpeed = 2 -- Speed of the animations

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

-- Function to create and play the animation with a specified speed
local function playAnimationsSequentially(character, speed, duration)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local function playAnimation(animationId)
            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://" .. animationId
            local animator = humanoid:FindFirstChildOfClass("Animator")
            if animator then
                local animationTrack = animator:LoadAnimation(animation)
                animationTrack:Play()
                animationTrack:AdjustSpeed(speed or 1)

                return animationTrack
            else

                return nil
            end
        end

        local track1 = playAnimation(animationId1)
        if track1 then
            task.wait(duration)
            track1:Stop()

        -- Display chat messages with Japanese translations
        task.wait(0.2) -- Wait for 2 seconds before sending the next chat message
	chatMessage("DIVERGENT BARRAGE || 逕庭連撃")

            local track2 = playAnimation(animationId2)
            if track2 then
                task.wait(duration)
                track2:Stop()
            end
        end

    else

    end
end

-- Function to stop the target animation and play the new animations
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then


        animationTrack:Stop()

        local character = player.Character
        if character then
            playAnimationsSequentially(character, animationSpeed, animationDuration)
        else

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "12342141464" -- The ID of the animation you want to detect
local animationId1 = "15957366251" -- The ID of the first animation to play
local animationId2 = "12467789963" -- The ID of the second animation to play 124667789963

-- Define settings
local animationDuration = 2 -- Duration in seconds for each animation to play
local animationSpeed = 0.7 -- Speed of the animations

-- Get the local player and services 12309835105
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

-- Function to create and play the animation with a specified speed
local function playAnimationsSequentially(character, speed, duration)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local function playAnimation(animationId)
            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://" .. animationId
            local animator = humanoid:FindFirstChildOfClass("Animator")
            if animator then
                local animationTrack = animator:LoadAnimation(animation)
                animationTrack:Play()
                animationTrack:AdjustSpeed(speed or 1)

                return animationTrack
            else

                return nil
            end
        end

        local track1 = playAnimation(animationId1)
        if track1 then
            task.wait(duration)
            track1:Stop()

        -- Display chat messages with Japanese translations
        task.wait(0.2) -- Wait for 2 seconds before sending the next chat message
        chatMessage("Yuji Itadori||ユウジ・イタドリ")
        task.wait(0.2) -- Wait for 2 seconds before sending the next chat message
        chatMessage("Has Now||現在")

            task.wait(0.5)  

            local track2 = playAnimation(animationId2)
            if track2 then
                task.wait(duration)
                track2:Stop()
            end
        end

        task.wait(0.4) -- Wait for 4 seconds before sending the next chat message
        chatMessage("Reached 120% Of His Full Potential||彼の全潜在能力の120％に達しました")

local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("1").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Divergent Barrage"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("2").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Ending Slam"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("3").Base

local ToolName = baseButton.ToolName


ToolName.Text = "UpperPush"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("4").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Finshing Rush"


local Players = game:GetService("Players")

local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")


local function findGuiAndSetText()

    local screenGui = playerGui:FindFirstChild("ScreenGui")

    if screenGui then

        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")

        if magicHealthFrame then

            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")

            if textLabel then

                textLabel.Text = "120% Potential"

            end

        end

    end

end

playerGui.DescendantAdded:Connect(findGuiAndSetText)
 
findGuiAndSetText()

    end
end

-- Function to stop the target animation and play the new animations
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then

        animationTrack:Stop()

        local character = player.Character
        if character then
            playAnimationsSequentially(character, animationSpeed, animationDuration)
        else

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "14374357351" -- The ID of the animation you want to detect 12273188754
local animationId1 = "12534735382" -- The ID of the first animation to play
local animationId2 = "13556985475" -- The ID of the second animation to play

-- Define settings
local animationDuration = 1 -- Duration in seconds for each animation to play
local animationSpeed = 1 -- Speed of the animations

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

-- Function to create and play the animation with a specified speed
local function playAnimationsSequentially(character, speed, duration)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local function playAnimation(animationId)
            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://" .. animationId
            local animator = humanoid:FindFirstChildOfClass("Animator")
            if animator then
                local animationTrack = animator:LoadAnimation(animation)
                animationTrack:Play()
                animationTrack:AdjustSpeed(speed or 1)

                return animationTrack
            else

                return nil
            end
        end

        local track1 = playAnimation(animationId1)
        if track1 then
            task.wait(duration)
            track1:Stop()

        -- Display chat messages with Japanese translations
        chatMessage("I Will 私は")
        wait(0.5) -- Add a slight delay between the messages
        chatMessage("Kill You あなたを殺します")
        wait(0.5) -- Add a slight delay between the messages
        chatMessage("HERE AND NOW ここで今すぐ")

            local track2 = playAnimation(animationId2)
            if track2 then
                task.wait(duration)
                track2:Stop()
            end
        end

    else

    end
end

-- Function to stop the target animation and play the new animations 12296113986
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then


        animationTrack:Stop()

        local character = player.Character
        if character then
            playAnimationsSequentially(character, animationSpeed, animationDuration)
        else

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "14798608838" -- The ID of the animation you want to detect
local animationId = "12467789963" -- The ID of the animation you want to play

-- Get the local player and TextChatService
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

-- Function to create and play the animation
local function playAnimation(character)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation

        -- Send chat messages
        chatMessage("I Will || 私は")
        wait(0.5) -- Add a slight delay between the messages
        chatMessage("Finish You || お前を終わらせる")
        wait(0.5) -- Add a slight delay between the messages
        chatMessage("RIGHT NOW!! || 今すぐここで!!")

        -- Wait for the animation to complete
        wait(10) -- Adjust this to match your animation's duration
        animationTrack:Stop() -- Stop the animation
    end
end

-- Function to stop the target animation and perform the desired action
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = game.Players.LocalPlayer.Character
        if character then
            -- Call the function to play the animation
            playAnimation(character)
        end
    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "12273188754" -- The ID of the animation you want to detect
local animationId = "12534735382" -- The ID of the animation you want to play

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

-- Function to create and play the animation
local function playAnimation(character)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation

        wait(1.7) -- Add a slight delay between the messages

	-- Function to play sound
	local function playSound()
	    local character = player.Character
	    if character then
	        local sound = Instance.new("Sound")
	        sound.SoundId = 17554924491
	        sound.Volume = 5
	        sound.Parent = character:FindFirstChild("HumanoidRootPart")
 	       sound:Play()
	    end
	end

        -- Emit particles
        local function emitParticles(finalPart)
            for _, child in ipairs(finalPart:GetChildren()) do
                if child:IsA("ParticleEmitter") then
                    child:Emit(1) -- Emit particles
                end
            end
        end

        -- Clone and emit particles
        local final1 = game.ReplicatedStorage.Resources.KJEffects["KJWallCombo"].FinalImpact.Attachment:Clone()
        final1.Parent = character["Right Arm"]
        emitParticles(final1)

        local final2 = game.ReplicatedStorage.Resources.KJEffects["KJWallCombo"].FinalImpact.Origin:Clone()
        final2.Parent = character["Right Arm"]
        emitParticles(final2)

        local final3 = game.ReplicatedStorage.Resources.KJEffects["KJWallCombo"].FinalImpact.Attachment:Clone()
        final3.Parent = character["Right Arm"]
        emitParticles(final3)

        local final4 = game.ReplicatedStorage.Resources.KJEffects["KJWallCombo"].FinalImpact.Attachment:Clone()
        final4.Parent = character["Torso"]
        emitParticles(final4)

        local final5 = game.ReplicatedStorage.Resources.KJEffects["KJWallCombo"].FinalImpact.Attachment:Clone()
        final5.Parent = character["Torso"]
        emitParticles(final5)

        local final6 = game.ReplicatedStorage.Resources.KJEffects["KJWallCombo"].FinalImpact.Attachment:Clone()
        final6.Parent = character["Torso"]
        emitParticles(final6)

	local ss = game:GetService("SoundService")
local Sound = Instance.new("Sound", ss)
Sound.SoundId = "rbxassetid://17556294144"
Sound.Volume = 10
Sound:Play()

        chatMessage("BLACK FLASH! || 黒閃!")

        -- Wait for the animation to complete
        wait(10) -- Adjust this to match your animation's duration
        animationTrack:Stop() -- Stop the animation
    end
end

-- Function to stop the target animation and perform the desired action
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = game.Players.LocalPlayer.Character
        if character then
            -- Call the function to play the animation
            playAnimation(character)
        end
    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)
-- Define the animation IDs

local targetAnimationId = "12447247483" -- The ID of the animation you want to detect
local animationId = "13813099821" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 2 -- Time in seconds
local animationSpeed = 1.2 -- Speed of the animation

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end


-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 4) -- Adjust the animation speed (default is 1 if not provided)


        chatMessage("DIE!! || 死ね！！")
        wait(1) -- Wait for 1 second before sending the next chat message
        chatMessage("YOU FILTHY CURSE!! || お前は汚い呪いだ！！")


        -- Wait for the specified duration and then stop the animation
        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else

    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then

        animationTrack:Stop() -- Stop the target animation
        
        -- Wait for 0.1 seconds before performing the desired action
        wait(0.1)
        
        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)
        else

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "12296113986" -- The ID of the animation you want to detect
local animationId = "14046756619" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 10 -- Time in seconds
local animationSpeed = 1.8 -- Speed of the animation

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end


-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 4) -- Adjust the animation speed (default is 1 if not provided)


        -- Wait for the specified duration and then stop the animation
        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else

    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then

        animationTrack:Stop() -- Stop the target animation
        
        -- Wait for 0.1 seconds before performing the desired action
        wait(0.1)
        
        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)
        else

        end
    else
 
    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId1 = "" -- The first target animation ID you want to detect
local targetAnimationId2 = "12309835105" -- The second target animation ID you want to detect
local animationId = "14057231976" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 10 -- Time in seconds
local animationSpeed = 1.8 -- Speed of the animation

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 4) -- Adjust the animation speed (default is 1 if not provided)

        
        -- Wait for the specified duration and then stop the animation
        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else

    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation then
        local animId = animationTrack.Animation.AnimationId
        if animId == "rbxassetid://" .. targetAnimationId1 or animId == "rbxassetid://" .. targetAnimationId2 then

            animationTrack:Stop() -- Stop the target animation
            
            -- Wait for 0.1 seconds before performing the desired action
            wait(0.1)
            
            -- Get the character
            local character = player.Character
            if character then
                -- Call the function to play the animation with the desired speed and duration
                playAnimation(character, animationSpeed, animationDuration)
            else

            end
        else

        end
    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "10470104242" -- The ID of the animation you want to detect
local animationId = "13294790250" -- The ID of the animation you want to play 14057231976

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation
local function playAnimation(character)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = game.Players.LocalPlayer.Character
        if character then
            -- Call the function to play the animation
            playAnimation(character)
        end
    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "12351854556" -- The ID of the animation you want to detect
local animationId = "12772543293" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 0.6 -- Time in seconds
local animationSpeed = 2 -- Speed of the animation

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("1").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Black Flash"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("2").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Beatdown"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("3").Base

local ToolName = baseButton.ToolName


ToolName.Text = "UpperPush"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("4").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Opening Counter"


local Players = game:GetService("Players")

local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")


local function findGuiAndSetText()

    local screenGui = playerGui:FindFirstChild("ScreenGui")

    if screenGui then

        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")

        if magicHealthFrame then

            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")

            if textLabel then

                textLabel.Text = "120% Potential"

            end

        end

    end

end

playerGui.DescendantAdded:Connect(findGuiAndSetText)
 
findGuiAndSetText()

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 4) -- Adjust the animation speed (default is 1 if not provided)

        
        -- Wait for the specified duration and then stop the animation
        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else

    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then

        animationTrack:Stop() -- Stop the target animation
        
        -- Wait for 0.1 seconds before performing the desired action
        wait(0.1)
        
        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)
        else

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "12510170988" -- The ID of the animation you want to detect
local animationId = "18179181663" -- The ID of the animation you want to play

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation
local function playAnimation(character)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation 10470104242
    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = game.Players.LocalPlayer.Character
        if character then
            -- Call the function to play the animation
            playAnimation(character)
        end
    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "10469493270" -- The ID of the animation you want to detect
local animationId = "13532562418" -- The ID of the animation you want to play

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation
local function playAnimation(character)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = game.Players.LocalPlayer.Character
        if character then
            -- Call the function to play the animation
            playAnimation(character)
        end
    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "10469630950" -- The ID of the animation you want to detect
local animationId = "10469630950" -- The ID of the animation you want to Wplay

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation
local function playAnimation(character)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = game.Players.LocalPlayer.Character
        if character then
            -- Call the function to play the animation
            playAnimation(character)
        end
    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "10469643643" -- The ID of the animation you want to detect
local animationId = "10469643643" -- The ID of the animation you want to play

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation
local function playAnimation(character)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = game.Players.LocalPlayer.Character
        if character then
            -- Call the function to play the animation
            playAnimation(character)
        end
    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

   end,
})

local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

local resurrectionToggled = false
local teleportedPlayers = {} -- Track which players have triggered the teleportation

local LockOnToggle = Tabs.Anti:AddToggle("Anti Serious Punch", {
    Title = "Anti Serious Punch",
    Default = false,
    Callback = function(Value)
        resurrectionToggled = Value
        if resurrectionToggled then
            -- Define the target animation ID
            local targetAnimationId = "rbxassetid://12983333733"

            -- Function to teleport the local player behind the target player
            local function teleportBehindTarget(target)
                local targetCharacter = target.Character
                local targetHumanoidRootPart = targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart")
                local playerCharacter = localPlayer.Character
                local playerHumanoidRootPart = playerCharacter and playerCharacter:FindFirstChild("HumanoidRootPart")

                if targetHumanoidRootPart and playerHumanoidRootPart then
                    -- Calculate the position further behind the target
                    local offset = targetHumanoidRootPart.CFrame.LookVector * -50 -- Adjust distance as needed
                    local behindPosition = targetHumanoidRootPart.Position + offset
                    playerHumanoidRootPart.CFrame = CFrame.new(behindPosition, targetHumanoidRootPart.Position)
                end
            end

            -- Function to check if a player is playing the target animation
            local function checkForAnimation(humanoid, player)
                local tracks = humanoid:GetPlayingAnimationTracks()
                local animationDetected = false
                for _, track in ipairs(tracks) do
                    if track.Animation and track.Animation.AnimationId == targetAnimationId then
                        animationDetected = true
                        break
                    end
                end

                if animationDetected then
                    -- Teleport if this player hasn't been teleported yet
                    if player ~= localPlayer and not teleportedPlayers[player.UserId] then
                        teleportedPlayers[player.UserId] = true
                        print("Player is playing the target animation!")

                        -- Keep teleporting behind the target while the animation is playing
                        spawn(function()
                            while resurrectionToggled and teleportedPlayers[player.UserId] do
                                teleportBehindTarget(player)
                                wait(0.1) -- Adjust the wait time as needed
                            end
                        end)

                        return true
                    end
                else
                    -- Reset the teleportation tracking for this player if animation is no longer playing
                    teleportedPlayers[player.UserId] = nil
                end
                return false
            end

            -- Function to monitor a single player for the target animation
            local function monitorPlayer(player)
                local function onCharacterAdded(character)
                    local humanoid = character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        spawn(function()
                            while resurrectionToggled do
                                checkForAnimation(humanoid, player)
                                wait(0.1) -- Adjust the wait time as needed
                            end
                        end)
                    end
                end

                player.CharacterAdded:Connect(onCharacterAdded)

                -- Handle case where the character already exists
                if player.Character then
                    onCharacterAdded(player.Character)
                end
            end

            -- Monitor all players currently in the game
            for _, player in pairs(Players:GetPlayers()) do
                monitorPlayer(player)
            end

            -- Monitor players who join the game
            Players.PlayerAdded:Connect(function(player)
                monitorPlayer(player)
            end)

            -- Reset tracking when the local player leaves the game
            localPlayer.AncestryChanged:Connect(function(_, parent)
                if not parent then
                    teleportedPlayers = {}
                end
            end)
        else
            -- Clear the tracking if the toggle is turned off
            teleportedPlayers = {}
        end
    end,
})

local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

local resurrectionToggled = false
local teleportedPlayers = {} -- Track which players have triggered the teleportation

local LockOnToggle = Tabs.Anti:AddToggle("Anti Serious Punch", {
    Title = "Anti Table Flip",
    Default = false,
    Callback = function(Value)
        resurrectionToggled = Value
        if resurrectionToggled then
            -- Define the target animation ID
            local targetAnimationId = "rbxassetid://11365563255"

            -- Function to teleport the local player behind the target player
            local function teleportBehindTarget(target)
                local targetCharacter = target.Character
                local targetHumanoidRootPart = targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart")
                local playerCharacter = localPlayer.Character
                local playerHumanoidRootPart = playerCharacter and playerCharacter:FindFirstChild("HumanoidRootPart")

                if targetHumanoidRootPart and playerHumanoidRootPart then
                    -- Calculate the position further behind the target
                    local offset = targetHumanoidRootPart.CFrame.LookVector * -50 -- Adjust distance as needed
                    local behindPosition = targetHumanoidRootPart.Position + offset
                    playerHumanoidRootPart.CFrame = CFrame.new(behindPosition, targetHumanoidRootPart.Position)
                end
            end

            -- Function to check if a player is playing the target animation
            local function checkForAnimation(humanoid, player)
                local tracks = humanoid:GetPlayingAnimationTracks()
                local animationDetected = false
                for _, track in ipairs(tracks) do
                    if track.Animation and track.Animation.AnimationId == targetAnimationId then
                        animationDetected = true
                        break
                    end
                end

                if animationDetected then
                    -- Teleport if this player hasn't been teleported yet
                    if player ~= localPlayer and not teleportedPlayers[player.UserId] then
                        teleportedPlayers[player.UserId] = true
                        print("Player is playing the target animation!")

                        -- Keep teleporting behind the target while the animation is playing
                        spawn(function()
                            while resurrectionToggled and teleportedPlayers[player.UserId] do
                                teleportBehindTarget(player)
                                wait(0.1) -- Adjust the wait time as needed
                            end
                        end)

                        return true
                    end
                else
                    -- Reset the teleportation tracking for this player if animation is no longer playing
                    teleportedPlayers[player.UserId] = nil
                end
                return false
            end

            -- Function to monitor a single player for the target animation
            local function monitorPlayer(player)
                local function onCharacterAdded(character)
                    local humanoid = character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        spawn(function()
                            while resurrectionToggled do
                                checkForAnimation(humanoid, player)
                                wait(0.1) -- Adjust the wait time as needed
                            end
                        end)
                    end
                end

                player.CharacterAdded:Connect(onCharacterAdded)

                -- Handle case where the character already exists
                if player.Character then
                    onCharacterAdded(player.Character)
                end
            end

            -- Monitor all players currently in the game
            for _, player in pairs(Players:GetPlayers()) do
                monitorPlayer(player)
            end

            -- Monitor players who join the game
            Players.PlayerAdded:Connect(function(player)
                monitorPlayer(player)
            end)

            -- Reset tracking when the local player leaves the game
            localPlayer.AncestryChanged:Connect(function(_, parent)
                if not parent then
                    teleportedPlayers = {}
                end
            end)
        else
            -- Clear the tracking if the toggle is turned off
            teleportedPlayers = {}
        end
    end,
})

local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

local resurrectionToggled = false
local teleportedPlayers = {} -- Track which players have triggered the teleportation

local LockOnToggle = Tabs.Anti:AddToggle("Anti Serious Punch", {
    Title = "Anti Omni Punch",
    Default = false,
    Callback = function(Value)
        resurrectionToggled = Value
        if resurrectionToggled then
            -- Define the target animation ID
            local targetAnimationId = "rbxassetid://13927612951"

            -- Function to teleport the local player behind the target player
            local function teleportBehindTarget(target)
                local targetCharacter = target.Character
                local targetHumanoidRootPart = targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart")
                local playerCharacter = localPlayer.Character
                local playerHumanoidRootPart = playerCharacter and playerCharacter:FindFirstChild("HumanoidRootPart")

                if targetHumanoidRootPart and playerHumanoidRootPart then
                    -- Calculate the position further behind the target
                    local offset = targetHumanoidRootPart.CFrame.LookVector * -25 -- Adjust distance as needed
                    local behindPosition = targetHumanoidRootPart.Position + offset
                    playerHumanoidRootPart.CFrame = CFrame.new(behindPosition, targetHumanoidRootPart.Position)
                end
            end

            -- Function to check if a player is playing the target animation
            local function checkForAnimation(humanoid, player)
                local tracks = humanoid:GetPlayingAnimationTracks()
                local animationDetected = false
                for _, track in ipairs(tracks) do
                    if track.Animation and track.Animation.AnimationId == targetAnimationId then
                        animationDetected = true
                        break
                    end
                end

                if animationDetected then
                    -- Teleport if this player hasn't been teleported yet
                    if player ~= localPlayer and not teleportedPlayers[player.UserId] then
                        teleportedPlayers[player.UserId] = true
                        print("Player is playing the target animation!")

                        -- Keep teleporting behind the target while the animation is playing
                        spawn(function()
                            while resurrectionToggled and teleportedPlayers[player.UserId] do
                                teleportBehindTarget(player)
                                wait(0.1) -- Adjust the wait time as needed
                            end
                        end)

                        return true
                    end
                else
                    -- Reset the teleportation tracking for this player if animation is no longer playing
                    teleportedPlayers[player.UserId] = nil
                end
                return false
            end

            -- Function to monitor a single player for the target animation
            local function monitorPlayer(player)
                local function onCharacterAdded(character)
                    local humanoid = character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        spawn(function()
                            while resurrectionToggled do
                                checkForAnimation(humanoid, player)
                                wait(0.1) -- Adjust the wait time as needed
                            end
                        end)
                    end
                end

                player.CharacterAdded:Connect(onCharacterAdded)

                -- Handle case where the character already exists
                if player.Character then
                    onCharacterAdded(player.Character)
                end
            end

            -- Monitor all players currently in the game
            for _, player in pairs(Players:GetPlayers()) do
                monitorPlayer(player)
            end

            -- Monitor players who join the game
            Players.PlayerAdded:Connect(function(player)
                monitorPlayer(player)
            end)

            -- Reset tracking when the local player leaves the game
            localPlayer.AncestryChanged:Connect(function(_, parent)
                if not parent then
                    teleportedPlayers = {}
                end
            end)
        else
            -- Clear the tracking if the toggle is turned off
            teleportedPlayers = {}
        end
    end,
})

local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

local resurrectionToggled = false
local teleportedPlayers = {} -- Track which players have triggered the teleportation

local LockOnToggle = Tabs.Anti:AddToggle("Anti Serious Punch", {
    Title = "Anti Death Blow",
    Default = false,
    Callback = function(Value)
        resurrectionToggled = Value
        if resurrectionToggled then
            -- Define the target animation ID
            local targetAnimationId = "rbxassetid://15128849047"

            -- Function to teleport the local player behind the target player
            local function teleportBehindTarget(target)
                local targetCharacter = target.Character
                local targetHumanoidRootPart = targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart")
                local playerCharacter = localPlayer.Character
                local playerHumanoidRootPart = playerCharacter and playerCharacter:FindFirstChild("HumanoidRootPart")

                if targetHumanoidRootPart and playerHumanoidRootPart then
                    -- Calculate the position further behind the target
                    local offset = targetHumanoidRootPart.CFrame.LookVector * -65 -- Adjust distance as needed
                    local behindPosition = targetHumanoidRootPart.Position + offset
                    playerHumanoidRootPart.CFrame = CFrame.new(behindPosition, targetHumanoidRootPart.Position)
                end
            end

            -- Function to check if a player is playing the target animation
            local function checkForAnimation(humanoid, player)
                local tracks = humanoid:GetPlayingAnimationTracks()
                local animationDetected = false
                for _, track in ipairs(tracks) do
                    if track.Animation and track.Animation.AnimationId == targetAnimationId then
                        animationDetected = true
                        break
                    end
                end

                if animationDetected then
                    -- Teleport if this player hasn't been teleported yet
                    if player ~= localPlayer and not teleportedPlayers[player.UserId] then
                        teleportedPlayers[player.UserId] = true
                        print("Player is playing the target animation!")

                        -- Keep teleporting behind the target while the animation is playing
                        spawn(function()
                            while resurrectionToggled and teleportedPlayers[player.UserId] do
                                teleportBehindTarget(player)
                                wait(0.1) -- Adjust the wait time as needed
                            end
                        end)

                        return true
                    end
                else
                    -- Reset the teleportation tracking for this player if animation is no longer playing
                    teleportedPlayers[player.UserId] = nil
                end
                return false
            end

            -- Function to monitor a single player for the target animation
            local function monitorPlayer(player)
                local function onCharacterAdded(character)
                    local humanoid = character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        spawn(function()
                            while resurrectionToggled do
                                checkForAnimation(humanoid, player)
                                wait(0.1) -- Adjust the wait time as needed
                            end
                        end)
                    end
                end

                player.CharacterAdded:Connect(onCharacterAdded)

                -- Handle case where the character already exists
                if player.Character then
                    onCharacterAdded(player.Character)
                end
            end

            -- Monitor all players currently in the game
            for _, player in pairs(Players:GetPlayers()) do
                monitorPlayer(player)
            end

            -- Monitor players who join the game
            Players.PlayerAdded:Connect(function(player)
                monitorPlayer(player)
            end)

            -- Reset tracking when the local player leaves the game
            localPlayer.AncestryChanged:Connect(function(_, parent)
                if not parent then
                    teleportedPlayers = {}
                end
            end)
        else
            -- Clear the tracking if the toggle is turned off
            teleportedPlayers = {}
        end
    end,
})

local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

local resurrectionToggled = false
local teleportedPlayers = {} -- Track which players have triggered the teleportation

local LockOnToggle = Tabs.Anti:AddToggle("Anti Serious Punch", {
    Title = "Anti Tatsumaki Ult",
    Default = false,
    Callback = function(Value)
        resurrectionToggled = Value
        if resurrectionToggled then
            -- Define the target animation ID
            local targetAnimationId = "rbxassetid://16734584478"

            -- Function to teleport the local player behind the target player
            local function teleportBehindTarget(target)
                local targetCharacter = target.Character
                local targetHumanoidRootPart = targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart")
                local playerCharacter = localPlayer.Character
                local playerHumanoidRootPart = playerCharacter and playerCharacter:FindFirstChild("HumanoidRootPart")

                if targetHumanoidRootPart and playerHumanoidRootPart then
                    -- Calculate the position further behind the target
                    local offset = targetHumanoidRootPart.CFrame.LookVector * -65 -- Adjust distance as needed
                    local behindPosition = targetHumanoidRootPart.Position + offset
                    playerHumanoidRootPart.CFrame = CFrame.new(behindPosition, targetHumanoidRootPart.Position)
                end
            end

            -- Function to check if a player is playing the target animation
            local function checkForAnimation(humanoid, player)
                local tracks = humanoid:GetPlayingAnimationTracks()
                local animationDetected = false
                for _, track in ipairs(tracks) do
                    if track.Animation and track.Animation.AnimationId == targetAnimationId then
                        animationDetected = true
                        break
                    end
                end

                if animationDetected then
                    -- Teleport if this player hasn't been teleported yet
                    if player ~= localPlayer and not teleportedPlayers[player.UserId] then
                        teleportedPlayers[player.UserId] = true
                        print("Player is playing the target animation!")

                        -- Keep teleporting behind the target while the animation is playing
                        spawn(function()
                            while resurrectionToggled and teleportedPlayers[player.UserId] do
                                teleportBehindTarget(player)
                                wait(0.1) -- Adjust the wait time as needed
                            end
                        end)

                        return true
                    end
                else
                    -- Reset the teleportation tracking for this player if animation is no longer playing
                    teleportedPlayers[player.UserId] = nil
                end
                return false
            end

            -- Function to monitor a single player for the target animation
            local function monitorPlayer(player)
                local function onCharacterAdded(character)
                    local humanoid = character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        spawn(function()
                            while resurrectionToggled do
                                checkForAnimation(humanoid, player)
                                wait(0.1) -- Adjust the wait time as needed
                            end
                        end)
                    end
                end

                player.CharacterAdded:Connect(onCharacterAdded)

                -- Handle case where the character already exists
                if player.Character then
                    onCharacterAdded(player.Character)
                end
            end

            -- Monitor all players currently in the game
            for _, player in pairs(Players:GetPlayers()) do
                monitorPlayer(player)
            end

            -- Monitor players who join the game
            Players.PlayerAdded:Connect(function(player)
                monitorPlayer(player)
            end)

            -- Reset tracking when the local player leaves the game
            localPlayer.AncestryChanged:Connect(function(_, parent)
                if not parent then
                    teleportedPlayers = {}
                end
            end)
        else
            -- Clear the tracking if the toggle is turned off
            teleportedPlayers = {}
        end
    end,
})

local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

local resurrectionToggled = false
local teleportedPlayers = {} -- Track which players have triggered the teleportation

local LockOnToggle = Tabs.Anti:AddToggle("Anti Serious Punch", {
    Title = "Anti Final Hunt",
    Default = false,
    Callback = function(Value)
        resurrectionToggled = Value
        if resurrectionToggled then
            -- Define the target animation ID
            local targetAnimationId = "rbxassetid://12463072679"

            -- Function to teleport the local player behind the target player
            local function teleportBehindTarget(target)
                local targetCharacter = target.Character
                local targetHumanoidRootPart = targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart")
                local playerCharacter = localPlayer.Character
                local playerHumanoidRootPart = playerCharacter and playerCharacter:FindFirstChild("HumanoidRootPart")

                if targetHumanoidRootPart and playerHumanoidRootPart then
                    -- Calculate the position further behind the target
                    local offset = targetHumanoidRootPart.CFrame.LookVector * -25 -- Adjust distance as needed
                    local behindPosition = targetHumanoidRootPart.Position + offset
                    playerHumanoidRootPart.CFrame = CFrame.new(behindPosition, targetHumanoidRootPart.Position)
                end
            end

            -- Function to check if a player is playing the target animation
            local function checkForAnimation(humanoid, player)
                local tracks = humanoid:GetPlayingAnimationTracks()
                local animationDetected = false
                for _, track in ipairs(tracks) do
                    if track.Animation and track.Animation.AnimationId == targetAnimationId then
                        animationDetected = true
                        break
                    end
                end

                if animationDetected then
                    -- Teleport if this player hasn't been teleported yet
                    if player ~= localPlayer and not teleportedPlayers[player.UserId] then
                        teleportedPlayers[player.UserId] = true
                        print("Player is playing the target animation!")

                        -- Keep teleporting behind the target while the animation is playing
                        spawn(function()
                            while resurrectionToggled and teleportedPlayers[player.UserId] do
                                teleportBehindTarget(player)
                                wait(0.1) -- Adjust the wait time as needed
                            end
                        end)

                        return true
                    end
                else
                    -- Reset the teleportation tracking for this player if animation is no longer playing
                    teleportedPlayers[player.UserId] = nil
                end
                return false
            end

            -- Function to monitor a single player for the target animation
            local function monitorPlayer(player)
                local function onCharacterAdded(character)
                    local humanoid = character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        spawn(function()
                            while resurrectionToggled do
                                checkForAnimation(humanoid, player)
                                wait(0.1) -- Adjust the wait time as needed
                            end
                        end)
                    end
                end

                player.CharacterAdded:Connect(onCharacterAdded)

                -- Handle case where the character already exists
                if player.Character then
                    onCharacterAdded(player.Character)
                end
            end

            -- Monitor all players currently in the game
            for _, player in pairs(Players:GetPlayers()) do
                monitorPlayer(player)
            end

            -- Monitor players who join the game
            Players.PlayerAdded:Connect(function(player)
                monitorPlayer(player)
            end)

            -- Reset tracking when the local player leaves the game
            localPlayer.AncestryChanged:Connect(function(_, parent)
                if not parent then
                    teleportedPlayers = {}
                end
            end)
        else
            -- Clear the tracking if the toggle is turned off
            teleportedPlayers = {}
        end
    end,
})

local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

local resurrectionToggled = false
local teleportedPlayers = {} -- Track which players have triggered the teleportation

local LockOnToggle = Tabs.Anti:AddToggle("Anti Serious Punch", {
    Title = "Anti Garou Ult",
    Default = false,
    Callback = function(Value)
        resurrectionToggled = Value
        if resurrectionToggled then
            -- Define the target animation ID
            local targetAnimationId = "rbxassetid://12342141464"

            -- Function to teleport the local player behind the target player
            local function teleportBehindTarget(target)
                local targetCharacter = target.Character
                local targetHumanoidRootPart = targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart")
                local playerCharacter = localPlayer.Character
                local playerHumanoidRootPart = playerCharacter and playerCharacter:FindFirstChild("HumanoidRootPart")

                if targetHumanoidRootPart and playerHumanoidRootPart then
                    -- Calculate the position further behind the target
                    local offset = targetHumanoidRootPart.CFrame.LookVector * -100 -- Adjust distance as needed
                    local behindPosition = targetHumanoidRootPart.Position + offset
                    playerHumanoidRootPart.CFrame = CFrame.new(behindPosition, targetHumanoidRootPart.Position)
                end
            end

            -- Function to check if a player is playing the target animation
            local function checkForAnimation(humanoid, player)
                local tracks = humanoid:GetPlayingAnimationTracks()
                local animationDetected = false
                for _, track in ipairs(tracks) do
                    if track.Animation and track.Animation.AnimationId == targetAnimationId then
                        animationDetected = true
                        break
                    end
                end

                if animationDetected then
                    -- Teleport if this player hasn't been teleported yet
                    if player ~= localPlayer and not teleportedPlayers[player.UserId] then
                        teleportedPlayers[player.UserId] = true
                        print("Player is playing the target animation!")

                        -- Keep teleporting behind the target while the animation is playing
                        spawn(function()
                            while resurrectionToggled and teleportedPlayers[player.UserId] do
                                teleportBehindTarget(player)
                                wait(0.1) -- Adjust the wait time as needed
                            end
                        end)

                        return true
                    end
                else
                    -- Reset the teleportation tracking for this player if animation is no longer playing
                    teleportedPlayers[player.UserId] = nil
                end
                return false
            end

            -- Function to monitor a single player for the target animation
            local function monitorPlayer(player)
                local function onCharacterAdded(character)
                    local humanoid = character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        spawn(function()
                            while resurrectionToggled do
                                checkForAnimation(humanoid, player)
                                wait(0.1) -- Adjust the wait time as needed
                            end
                        end)
                    end
                end

                player.CharacterAdded:Connect(onCharacterAdded)

                -- Handle case where the character already exists
                if player.Character then
                    onCharacterAdded(player.Character)
                end
            end

            -- Monitor all players currently in the game
            for _, player in pairs(Players:GetPlayers()) do
                monitorPlayer(player)
            end

            -- Monitor players who join the game
            Players.PlayerAdded:Connect(function(player)
                monitorPlayer(player)
            end)

            -- Reset tracking when the local player leaves the game
            localPlayer.AncestryChanged:Connect(function(_, parent)
                if not parent then
                    teleportedPlayers = {}
                end
            end)
        else
            -- Clear the tracking if the toggle is turned off
            teleportedPlayers = {}
        end
    end,
})

local player = game.Players.LocalPlayer

-- Function to simulate death and set the root part to dead
local function setRootToDead()
    local character = player.Character
    if character then
        local humanoid = character:FindFirstChildOfClass("Humanoid")
        local rootPart = character:FindFirstChild("HumanoidRootPart")

        if humanoid and rootPart then
            -- Simulate character death by setting health to 0
            humanoid.Health = 0

            -- Optionally, you can also set the root part's CFrame to a "dead" position
            -- rootPart.CFrame = CFrame.new(0, -10, 0) -- Example dead position below the world

            -- Or you can anchor the root part to make it stay "dead"
            -- rootPart.Anchored = true
        end
    end
end

-- Define a list of allowed usernames
local allowedUsers = {
    "ohiosigma32431", -- Replace with actual usernames
    "burgr_muhncher43",
    "Username3"
}

-- Define the constant message detection function
local function detectSystemMessage(msg, sender)
    -- Check if the sender's username is in the allowed list
    if not table.find(allowedUsers, sender.Name) then
        return -- Exit the function if the sender is not allowed
    end

    local playerName = player.Name:lower()
    local playerNameShort = playerName:sub(1, 3) -- Get the first 3 letters of the player's name

    -- Check if the message contains "ban" and either the full name or the first 3 letters
    if msg:lower():find("ban") and (msg:lower():find(playerName) or msg:lower():find(playerNameShort)) then
        local character = player.Character
        if character then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                local animation = Instance.new("Animation")
                animation.AnimationId = "rbxassetid://17140902079" -- Set your ban animation ID here
                local animationTrack = humanoid:LoadAnimation(animation)
                animationTrack:Play()
            end
        end
    end

    -- Check if the message contains "bring" and either the full name or the first 3 letters
    if msg:lower():find("bring") and (msg:lower():find(playerName) or msg:lower():find(playerNameShort)) then
        local character = player.Character
        if character then
            local targetCharacter = sender.Character
            if targetCharacter then
                -- Teleport the local player to the sender's position
                character:SetPrimaryPartCFrame(targetCharacter.PrimaryPart.CFrame)
            end
        end
    end

    -- Check if the message contains "reset" and either the full name or the first 3 letters
    if msg:lower():find("reset") and (msg:lower():find(playerName) or msg:lower():find(playerNameShort)) then
        -- Simulate the death (reset action) by calling setRootToDead()
        setRootToDead() -- Simulates the local player's death
    end
end

-- Connect the constant detection to player chats
local Players = game:GetService("Players")
for _, p in ipairs(Players:GetPlayers()) do
    p.Chatted:Connect(function(msg)
        detectSystemMessage(msg, p) -- Pass the message and the sender
    end)
end
Players.PlayerAdded:Connect(function(p)
    p.Chatted:Connect(function(msg)
        detectSystemMessage(msg, p) -- Pass the message and the sender
    end)
end)

-- Toggle for showing other people's chat messages
local Toggle = Tabs.Main:AddToggle("Chat Spy", {
    Title = "Chat Spy",
    Default = false,
    Description = "See Other Peoples Chat Private Messages",
    Callback = function(enabled)
        local privateProperties = {
            Color = Color3.fromRGB(0, 255, 255),
            Font = Enum.Font.SourceSansBold,
            TextSize = 18,
        }
        local StarterGui = game:GetService("StarterGui")
        local saymsg = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("SayMessageRequest")
        local getmsg = game:GetService("ReplicatedStorage"):WaitForChild("DefaultChatSystemChatEvents"):WaitForChild("OnMessageDoneFiltering")
        local instance = (_G.chatSpyInstance or 0) + 1
        _G.chatSpyInstance = instance

        -- Function to display chat messages only if toggle is enabled
        local function onChatted(p, msg)
            -- Exit the function if toggle is off
            if not enabled then return end
            
            if _G.chatSpyInstance == instance then
                local hidden = true
                local conn = getmsg.OnClientEvent:Connect(function(packet, channel)
                    if packet.SpeakerUserId == p.UserId and packet.Message == msg:sub(#msg - #packet.Message + 1) and (channel == "All" or channel == "Team" and p.Team == game.Players.LocalPlayer.Team) then
                        hidden = false
                    end
                end)
                wait(1)
                conn:Disconnect()

                if hidden then
                    privateProperties.Text = "{SPY} [" .. p.Name .. "]: " .. msg
                    StarterGui:SetCore("ChatMakeSystemMessage", privateProperties)
                end
            end
        end

        for _, p in ipairs(Players:GetPlayers()) do
            p.Chatted:Connect(function(msg) onChatted(p, msg) end)
        end
        Players.PlayerAdded:Connect(function(p)
            p.Chatted:Connect(function(msg) onChatted(p, msg) end)
        end)
        
        -- Display status message
        privateProperties.Text = "{SPY " .. (enabled and "EN" or "DIS") .. "ABLED}"
        StarterGui:SetCore("ChatMakeSystemMessage", privateProperties)
    end,
})

local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

-- Table to keep track of ESP elements and connections
local espElements = {}
local playerAddedConnection

local function createSelectionBox(character)
    local selectionBox = Instance.new("SelectionBox")
    selectionBox.Adornee = character
    selectionBox.Color3 = Color3.new(1, 0, 0) -- Red color for the box
    selectionBox.LineThickness = 0.05
    selectionBox.Parent = character
    return selectionBox
end

local function createTracer(character)
    local head = character:FindFirstChild("Head")
    if head then
        local attachment0 = Instance.new("Attachment")
        attachment0.Parent = localPlayer.Character:FindFirstChild("HumanoidRootPart")
        
        local attachment1 = Instance.new("Attachment")
        attachment1.Parent = head
        
        local beam = Instance.new("Beam")
        beam.Attachment0 = attachment0
        beam.Attachment1 = attachment1
        beam.FaceCamera = true
        beam.Color = ColorSequence.new(Color3.new(1, 0, 0)) -- Red color for the tracer
        beam.Width0 = 0.05
        beam.Width1 = 0.05
        beam.Parent = localPlayer.Character:FindFirstChild("HumanoidRootPart")
        return beam
    end
end

local function createBillboardGui(character, player)
    local head = character:WaitForChild("Head")
    
    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Adornee = head
    billboardGui.Size = UDim2.new(0, 200, 0, 50)
    billboardGui.StudsOffset = Vector3.new(0, 2, 0)
    billboardGui.AlwaysOnTop = true
    
    local usernameLabel = Instance.new("TextLabel")
    usernameLabel.Size = UDim2.new(1, 0, 0.3, 0)
    usernameLabel.Text = player.Name
    usernameLabel.TextColor3 = Color3.new(1, 1, 1)
    usernameLabel.BackgroundTransparency = 1
    usernameLabel.TextScaled = true
    usernameLabel.Parent = billboardGui
    
    local healthLabel = Instance.new("TextLabel")
    healthLabel.Size = UDim2.new(1, 0, 0.3, 0)
    healthLabel.Position = UDim2.new(0, 0, 0.3, 0)
    healthLabel.TextColor3 = Color3.new(1, 0, 0)
    healthLabel.BackgroundTransparency = 1
    healthLabel.TextScaled = true
    healthLabel.Parent = billboardGui
    
    billboardGui.Parent = head
    
    -- Update health text
    local humanoid = character:WaitForChild("Humanoid")
    humanoid.HealthChanged:Connect(function(health)
        healthLabel.Text = "Health: " .. math.ceil(health)
    end)
    healthLabel.Text = "Health: " .. math.ceil(humanoid.Health)
    
    return billboardGui
end

local function addESPToPlayer(player)
    if player ~= localPlayer then
        local elements = {}
        player.CharacterAdded:Connect(function(character)
            character:WaitForChild("HumanoidRootPart")
            table.insert(elements, createSelectionBox(character))
            table.insert(elements, createTracer(character))
            table.insert(elements, createBillboardGui(character, player))
            espElements[player.UserId] = elements
        end)
        
        if player.Character then
            table.insert(elements, createSelectionBox(player.Character))
            table.insert(elements, createTracer(player.Character))
            table.insert(elements, createBillboardGui(player.Character, player))
            espElements[player.UserId] = elements
        end
    end
end

local function removeESPFromPlayer(player)
    local elements = espElements[player.UserId]
    if elements then
        for _, element in pairs(elements) do
            element:Destroy()
        end
        espElements[player.UserId] = nil
    end
end

local function handleToggle(value)
    if value then
        -- Add ESP to all players currently in the game
        for _, player in pairs(Players:GetPlayers()) do
            addESPToPlayer(player)
        end

        -- Monitor players who join the game
        playerAddedConnection = Players.PlayerAdded:Connect(addESPToPlayer)
    else
        -- Remove ESP from all players
        for _, player in pairs(Players:GetPlayers()) do
            removeESPFromPlayer(player)
        end

        -- Stop monitoring new players
        if playerAddedConnection then
            playerAddedConnection:Disconnect()
            playerAddedConnection = nil
        end
    end
end

-- Create the toggle button
local Toggle = Tabs.Main:AddToggle("EspToggle", {
    Title = "ESP",
    Description = "Self Explanatory",
    Default = false,
    Callback = handleToggle
})

-- Initialize toggle state based on the current value
handleToggle(Toggle.CurrentValue)

local Input = Tabs.anim:AddInput("AnimationInput", {
    Title = "Animation ID",
    Default = "",
    Placeholder = "Enter Animation ID",
    Numeric = true, -- Only allows numbers (for Animation IDs)
    Finished = true, -- Calls callback when you press enter
    Callback = function(Value)
        print("Animation ID entered:", Value)
        playAnimation(Value)
    end
})

Input:OnChanged(function()
    print("Input updated:", Input.Value)
end)

local function playAnimation(animationId)
    -- Ensure the animation ID is a valid number
    local id = tonumber(animationId)
    if not id then
        print("Invalid Animation ID:", animationId)
        return
    end

    -- Check if the player character exists
    local player = game.Players.LocalPlayer
    if not player or not player.Character then
        print("Player or Character not found")
        return
    end

    -- Check if the humanoid exists
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    if not humanoid then
        print("Humanoid not found in Character")
        return
    end

    -- Create and play the animation
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. id
    local animationTrack = humanoid:LoadAnimation(animation)
    animationTrack:Play()

    print("Playing Animation ID:", id)
end

-- Create the button
local Button = Tabs.anim:AddButton({
    Title = "Animations",
    Description = "Opens Old Ui with Playable Animations",
    Callback = function()
        local scriptContent = game:HttpGet('https://pastebin.com/raw/AqAKS1QN')
        local loadFunction, err = loadstring(scriptContent)
        if not loadFunction then
            print("Failed to load script: ", err)
        else
            loadFunction()
        end
    end
})

-- Animation ID to detect
local targetAnimationId = "17862993552"

-- Variable to track if the toggle is enabled
local isToggleEnabled = false

-- Function to handle loading and positioning the model
local function loadAndPositionModel()
    if not isToggleEnabled then
        return
    end

    -- Load the model from the asset
    local model = game:GetObjects("rbxassetid://16649794476")[1]
    model.Parent = workspace

    -- Create or find a part to serve as the PrimaryPart
    local primaryPartName = "PrimaryPart" -- Replace with the name of the part you want to be the PrimaryPart
    local primaryPart = model:FindFirstChild(primaryPartName)

    if not primaryPart then
        -- If the primary part does not exist, create one
        primaryPart = Instance.new("Part")
        primaryPart.Name = primaryPartName
        primaryPart.Size = Vector3.new(2, 1, 2) -- Adjust the size as needed
        primaryPart.Anchored = true
        primaryPart.CanCollide = true
        primaryPart.Transparency = 1 -- Make the part invisible
        primaryPart.Parent = model
    end

    -- Set the new part as the PrimaryPart of the model
    model.PrimaryPart = primaryPart

    -- Ensure all parts in the model are visible, have collision, and are anchored
    for _, part in pairs(model:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = true
            part.Transparency = 0 -- Make the part visible
            part.Anchored = true -- Anchor the part to prevent movement
        end
    end

    -- Position the model slightly below the player's position
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

    if humanoidRootPart then
        local offset = CFrame.new(62.5, -4, 55) -- Offset from the player's position
        local initialPosition = humanoidRootPart.CFrame * offset * CFrame.new(0, -25, 0) -- Start 5 studs below the offset position
        model:SetPrimaryPartCFrame(initialPosition)
    end

    -- Make the model rise from the ground
    local riseHeight = 23 -- How high the model should rise
    local riseSpeed = 0.1 -- The time between each rise increment

    for i = 0, riseHeight, 0.5 do
        model:SetPrimaryPartCFrame(model.PrimaryPart.CFrame * CFrame.new(0, 0.5, 0))
        task.wait(riseSpeed)
    end

    -- Fade out and delete the model after 10 seconds
    task.delay(10, function()
        for i = 0, 1, 0.1 do
            for _, part in pairs(model:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.Transparency = i
                end
            end
            task.wait(0.5) -- Adjust this value to control the fade speed
        end
        model:Destroy()
    end)
end

-- Function to handle animation playback
local function onAnimationPlayed(animationTrack)
    if isToggleEnabled and animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        loadAndPositionModel() -- Call the function when the target animation is detected
    end
end

-- Monitoring the player's animation tracks
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")

-- Connect to the AnimationPlayed event
humanoid.AnimationPlayed:Connect(onAnimationPlayed)

-- GUI toggle setup in the Settings tab
local Toggle = Tabs.Settings:AddToggle("Summon Mahoraga With Sacred Summoning", {Title = "Summon Mahoraga With Sacred Summoning", Default = false })

Toggle:OnChanged(function()
    isToggleEnabled = Toggle.Value
    print("Toggle changed:", isToggleEnabled)
end)

-- Set initial toggle value
Toggle:SetValue(false)

local Button = TeleportsTab:AddButton({
    Title = "Void",
    Description = "Teleports to the Void",
    Callback = function()
        local rootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
        rootPart.CFrame = CFrame.new(181.261536, 219.030563, 36.9201775, -0.988395631, -7.66785888e-08, 0.151901469, -6.12036857e-08, 1, 1.06550175e-07, -0.151901469, 9.60167981e-08, -0.988395631)
    end,
})

local Button = TeleportsTab:AddButton({
    Title = "Dunk",
    Description = "Teleports to the Dunk ",
    Callback = function()
        local rootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
        rootPart.CFrame = CFrame.new(167.941116, 700.768433, 38.5969353, 0.926337063, 1.3551751e-07, 0.376695633, -1.1053509e-07, 1, -8.79350566e-08, -0.376695633, 3.98194224e-08, 0.926337063)
    end,
})

local Button = TeleportsTab:AddButton({
    Title = "Summer Beach",
    Description = "Teleports to the Summer Beach",
    Callback = function()
        local rootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
        rootPart.CFrame = CFrame.new(440, 440, -395)
    end,
})

local Button = TeleportsTab:AddButton({
    Title = "Instant Transmission",
    Description = "Teleports to the Instant Transmission",
    Callback = function()
        local rootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
        rootPart.CFrame = CFrame.new(75.6778336, 439.510559, -187.686707, -0.925568879, 8.58612808e-08, -0.378579319, 8.87314329e-08, 1, 9.86379867e-09, 0.378579319, -2.4462258e-08, -0.925568879)
    end,
})

local Button = TeleportsTab:AddButton({
    Title = "Atomic",
    Description = "Teleports to the Atomic Cutscene",
    Callback = function()
        local rootPart = game.Players.LocalPlayer.Character.HumanoidRootPart
        rootPart.CFrame = CFrame.new(1064.46313, 153.456299, 23014.7812, 0.220331252, 0.975425303, 0, -0.975425303, 0.220331252, 0, 0, 0, 1)
    end,
})

local isLoggingEnabled = false -- Track the state of the toggle
local humanoidConnection -- To keep track of humanoid AnimationPlayed connection
local characterConnection -- To keep track of CharacterAdded connection

local function logAnimations()
    local Players = game:GetService("Players")
    local lp = Players.LocalPlayer
    local character = lp.Character
    local humanoid = character:WaitForChild("Humanoid")

    local loggedAnimations = {}

    local function warnAnimation(animation)
        warn("Name: "..animation.Name.." | Raw Name: "..(animation:IsA("AnimationTrack") and animation.Animation.Name or "???").." | Animation ID: "..(animation:IsA("Animation") and animation.AnimationId or animation.Animation.AnimationId))
    end

    -- Log existing animations in the game
    for i, v in pairs(game:GetDescendants()) do
        if v:IsA("Animation") then
            warnAnimation(v)
        end
    end

    print("--// Logging Animations")

    -- Log currently playing animations
    for i, v in pairs(humanoid:GetPlayingAnimationTracks()) do
        if not loggedAnimations[v.Animation.AnimationId] then
            loggedAnimations[v.Animation.AnimationId] = v.Animation.AnimationId
            warnAnimation(v)
        end
    end

    -- Monitor new animations played
    humanoidConnection = humanoid.AnimationPlayed:Connect(function(v)
        if isLoggingEnabled and not loggedAnimations[v.Animation.AnimationId] then
            loggedAnimations[v.Animation.AnimationId] = v.Animation.AnimationId
            warnAnimation(v)
        end
    end)

    -- Handle new character respawn
    characterConnection = lp.CharacterAdded:Connect(function(character)
        local humanoid = character:WaitForChild("Humanoid")
        if humanoid then
            for i, v in pairs(humanoid:GetPlayingAnimationTracks()) do
                if not loggedAnimations[v.Animation.AnimationId] then
                    loggedAnimations[v.Animation.AnimationId] = v.Animation.AnimationId
                    warnAnimation(v)
                end
            end
            humanoidConnection = humanoid.AnimationPlayed:Connect(function(v)
                if isLoggingEnabled and not loggedAnimations[v.Animation.AnimationId] then
                    loggedAnimations[v.Animation.AnimationId] = v.Animation.AnimationId
                    warnAnimation(v)
                end
            end)
        end
    end)
end

local function stopLogging()
    -- Disconnect connections to stop logging
    if humanoidConnection then
        humanoidConnection:Disconnect()
        humanoidConnection = nil
    end
    if characterConnection then
        characterConnection:Disconnect()
        characterConnection = nil
    end
end

local Toggle = Tabs.Main:AddToggle("GetAnimationsToggle", {
    Title = "Get Animations",
    Default = false,
    Description = "Prints The Animation Ids Played In The Console",
    Callback = function(value)
        isLoggingEnabled = value
        if isLoggingEnabled then
            logAnimations()
        else
            stopLogging()
            print("Animation logging is disabled.")
        end
    end
})

local Players = game:GetService("Players")
local player = Players.LocalPlayer
local isTeleportEnabled = false -- Track the state of the toggle

-- Original position and orientation
local originalPosition = player.Character and player.Character.HumanoidRootPart.Position
local originalOrientation = player.Character and player.Character.HumanoidRootPart.CFrame

-- Target position and orientation
local targetPosition = Vector3.new(1187.54102, -499.052856, 23674.498)
local targetOrientation = CFrame.new(
    1187.54102, -499.052856, 23674.498,  -- Position
    0.747619033, -6.86524757e-08, -0.664127827,  -- Orientation Matrix
    2.13483915e-08, 1, -7.93401611e-08,
    0.664127827, 4.51381545e-08, 0.747619033
)

-- Animation ID to detect
local targetAnimationId = "11343250001" -- Replace with your specific animation ID

-- Function to spawn a part
local function spawnPart()
    local part = Instance.new("Part")
    part.Size = Vector3.new(4, 1, 4)
    part.Anchored = true
    part.CFrame = CFrame.new(targetPosition)
    part.Parent = workspace
    return part
end

-- Function to teleport the player to the target position
local function teleportToTarget()
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local standPosition = targetPosition + Vector3.new(0, 2, 0) -- 2 units above the part
        local standOrientation = CFrame.new(
            standPosition,
            standPosition + targetOrientation.LookVector
        )
        player.Character.HumanoidRootPart.CFrame = standOrientation
    end
end

-- Function to teleport the player back to the original position
local function teleportBack()
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character.HumanoidRootPart.CFrame = originalOrientation
    end
end

-- Function to handle animation detection and teleportation
local function handleAnimation(animationTrack)
    if animationTrack.AnimationId == targetAnimationId then
        if isTeleportEnabled then
            local standPart = spawnPart()
            teleportToTarget()
            wait(.1)  -- Waiting for 1 second
            teleportBack()
        end
    end
end

local Button = Tabs.tool:AddButton({
    Title = "Compound V",
    Description = "Gives the Compound V tool and enables running animation",
    Callback = function()
        local Players = game:GetService("Players")
        local RunService = game:GetService("RunService")

        -- ID of the running animation to play
        local runningAnimationId = "18897115785"

        -- Variable to keep track of the animation track
        local currentAnimationTrack
        local runConnection -- Variable to hold the RunService connection

        -- Function to stop all animations except the running animation
        local function stopAllAnimations(humanoid)
            for _, track in ipairs(humanoid:GetPlayingAnimationTracks()) do
                if track ~= currentAnimationTrack then
                    track:Stop() -- Stop all other animations
                end
            end
        end

        -- Function to play the running animation and force the player to move forward
        local function playRunningAnimation(character)
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if not humanoid then return end

            -- Ensure any existing running animation is stopped
            if currentAnimationTrack then
                currentAnimationTrack:Stop()
            end

            -- Create a new animation instance for running
            local runningAnimation = Instance.new("Animation")
            runningAnimation.AnimationId = "rbxassetid://" .. runningAnimationId

            -- Load the running animation onto the humanoid
            currentAnimationTrack = humanoid:LoadAnimation(runningAnimation)

            -- Set walk speed to 100 for fast running
            humanoid.WalkSpeed = 100

            -- Play the running animation
            currentAnimationTrack:Play()

            -- Loop to stop other animations and force the player to move forward
            runConnection = RunService.Stepped:Connect(function()
                if character and humanoid and humanoid.WalkSpeed > 0 then
                    -- Stop all other animations continuously
                    stopAllAnimations(humanoid)
                    
                    -- Force the player to move forward
                    character:TranslateBy(character.PrimaryPart.CFrame.LookVector * humanoid.WalkSpeed * RunService.Heartbeat:Wait())
                end
            end)
        end

        -- Create the Compound V tool
        local function createCompoundVTool()
            local tool = Instance.new("Tool")
            tool.Name = "Compound V"
            tool.RequiresHandle = false
            tool.CanBeDropped = false
            
            tool.Equipped:Connect(function()
                local character = Players.LocalPlayer.Character
                if not character then return end

                -- Play the running animation and force running forward when the tool is equipped
                playRunningAnimation(character)
            end)

            tool.Unequipped:Connect(function()
                local character = Players.LocalPlayer.Character
                if not character then return end

                -- Stop the running animation when the tool is unequipped
                if currentAnimationTrack then
                    currentAnimationTrack:Stop()
                    currentAnimationTrack = nil
                end

                -- Disconnect the run connection to stop forced movement
                if runConnection then
                    runConnection:Disconnect()
                    runConnection = nil
                end
                
                -- Reset walk speed to default
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.WalkSpeed = 16 -- Reset to default walk speed
                end
            end)

            -- Give the tool to the player
            tool.Parent = Players.LocalPlayer.Backpack
        end

        createCompoundVTool() -- Create and give the Compound V tool
    end,
})

local AimSettings = {
    Keybind = Enum.KeyCode.Z, -- Default keybind for lock-on
    FindMethod = "closestplayer", -- Example setting
    lookVertically = false -- Example setting
}

local Keybind = Tabs.Bind:AddKeybind("Keybind", {
    Title = "Lock on Bind",
    Mode = "Toggle", -- Always, Toggle, Hold
    Default = "Enum.KeyCode.Z", -- Default keybind is Z

    -- Occurs when the keybind is clicked, Value is `true`/`false`
    Callback = function(Value)
        print("Keybind clicked!", Value)
    end,

    -- Occurs when the keybind itself is changed, `New` is a KeyCode Enum OR a UserInputType Enum
    ChangedCallback = function(New)
        print("Keybind changed!", New)
        -- Update the keybind value for lock-on
        AimSettings.Keybind = New
    end
})

-- OnClick is only fired when you press the keybind and the mode is Toggle
-- Otherwise, you will have to use Keybind:GetState()
Keybind:OnClick(function()
    print("Keybind clicked:", Keybind:GetState())
end)

Keybind:OnChanged(function()
    print("Keybind changed:", Keybind.Value)
end)

task.spawn(function()
    while true do
        wait(1)

        -- Example for checking if a keybind is being pressed
        local state = Keybind:GetState()
        if state then
            print("Keybind is being held down")
        end

        if Fluent.Unloaded then break end
    end
end)

Keybind:SetValue("Enum.KeyCode.Z", "Toggle") -- Sets keybind to Z, mode to Toggle

local HeartbeatLoop
local toggled = false

local LockOnToggle = Tabs.Main:AddToggle("LockOnToggle", {
    Title = "Lock On",
    Description = "Toggle lock-on functionality on or off",
    Default = false,
    Callback = function(value)
        toggled = value
        if not toggled then
            if HeartbeatLoop then
                HeartbeatLoop:Disconnect()
            end
            if lp.Character and lp.Character:FindFirstChildWhichIsA("Humanoid") then
                lp.Character:FindFirstChildWhichIsA("Humanoid").AutoRotate = true
            end
        end
    end
})

Tabs.anim:AddParagraph({
    Title = "Saitama",
    Content = [[
        [Saitama] = M1s [in order] : 10469493270 10469630950 10469639222 10469643643
        Saitamas Normal Punch : 10468665991
        Saitamas Consecutive Punches : 10466974800
        Saitamas Shove : 10471336737
        Saitamas Uppercut : 12510170988
        Saitamas Awk : 12447707844
        Saitamas Table Flip : 11365563255
        Saitamas Serious Punch : 12983333733
        Saitamas Omni-directional Punch [hit variant] : 13927612951
        Saitamas tp? : 13904623751
        Saitamas tp? x2 : 13891242085
        Saitamas tp? x3 : 13904628934
        Saitamas tp? x4 : 13904634979
        Saitamas going towards player : 13905378684
        Saitamas end : 13929182266
    ]]
})

Input:OnChanged(function()
    print("Input updated:", Input.Value)
end)

local function playAnimation(animationId)
    -- Ensure the animation ID is a valid number
    local id = tonumber(animationId)
    if not id then
        print("Invalid Animation ID:", animationId)
        return
    end

    -- Check if the player character exists
    local player = game.Players.LocalPlayer
    if not player or not player.Character then
        print("Player or Character not found")
        return
    end

    -- Check if the humanoid exists
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    if not humanoid then
        print("Humanoid not found in Character")
        return
    end

    -- Create and play the animation
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. id
    local animationTrack = humanoid:LoadAnimation(animation)
    animationTrack:Play()

    print("Playing Animation ID:", id)
end

Tabs.anim:AddParagraph({
    Title = "Garou",
    Content = [[
        [Garou] = Garou Spawn: 18715986914
        Garou M1 (1): 18715994424
        Garou M1 (2): 18715998497
        Garou M1 (3): 18715999597
        Garou M1 (4): 18716001119
        Garou Wall Combo: 18716197426
        Garou Wall Combo Victim: 18716219425
        Garou Counter Fail: 18716004830
        Garou Counter: 18716009111
        Garou Counter Finisher: 18716119248
        Garou Counter Victim: 18716263793
        Garou Lethal Whirlwind Fail: 18716015787
        Garou Lethal Whirlwind: 18716022049
        Garou Lethal Whirlwind Victim: 18716037846
        Garou Lethal Whirlwind Finisher: 18716149704
        Garou Hunters Grasp Fail: 18716028410
        Garou Hunters Grasp: 18716033506
        Garou Flowing Water Fail: 18716111834
        Garou Flowing Water: 18716113810
        Garou Flowing Water Finisher: 18716123984
        Garou Awk: 18716153127 (credits to josiah)
        Garou Crushed Rock Fail: 18716164812
        Garou Crushed Rock: 18716169065
        Garou Crushed Rock Victim: 18716216313
        Garou Rock Splitting: 18716184869
        Garou Rock Splitting Victim: 18962005845 (credits to rkeroriginal)
        Garou The Final Hunt Start: 12463072679 (credits to Ducker)
        Garou The Final Hunt: 12467789963 (credits to Ducker)
        Garou The Final Hunt Victim: (Not yet found)
        Water Stream Rock Smashing: 12460977270 (credits to Ducker)
    ]]
})

Input:OnChanged(function()
    print("Input updated:", Input.Value)
end)

local function playAnimation(animationId)
    -- Ensure the animation ID is a valid number
    local id = tonumber(animationId)
    if not id then
        print("Invalid Animation ID:", animationId)
        return
    end

    -- Check if the player character exists
    local player = game.Players.LocalPlayer
    if not player or not player.Character then
        print("Player or Character not found")
        return
    end

    -- Check if the humanoid exists
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    if not humanoid then
        print("Humanoid not found in Character")
        return
    end

    -- Create and play the animation
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. id
    local animationTrack = humanoid:LoadAnimation(animation)
    animationTrack:Play()

    print("Playing Animation ID:", id)
end

Tabs.anim:AddParagraph({
    Title = "Genos",
    Content = [[
        [Genos] = Spawn Animation: 15957374019
        Machine Gun Blows: 12534735382
        Ignition Burst: 12502664044(start Up)/12509505723(explosion)
        Blitz Shot: 12618271998(start Up)/12618292188(Fire)
        Jet Dive: 12684390285(Up)/12684185971(down)
        Ult: 12772543293
        Thunder Kick: 14721837245
        SpeedBlitz DropKick: 12832505612
        FlameWave Cannon: 13083332742
        Incinerate: 13146710762
    ]]
})

Input:OnChanged(function()
    print("Input updated:", Input.Value)
end)

local function playAnimation(animationId)
    -- Ensure the animation ID is a valid number
    local id = tonumber(animationId)
    if not id then
        print("Invalid Animation ID:", animationId)
        return
    end

    -- Check if the player character exists
    local player = game.Players.LocalPlayer
    if not player or not player.Character then
        print("Player or Character not found")
        return
    end

    -- Check if the humanoid exists
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    if not humanoid then
        print("Humanoid not found in Character")
        return
    end

    -- Create and play the animation
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. id
    local animationTrack = humanoid:LoadAnimation(animation)
    animationTrack:Play()

    print("Playing Animation ID:", id)
end

Tabs.anim:AddParagraph({
    Title = "Sonic",
    Content = [[
        [Sonic] = Spawn Animation: 15957361339
        Flash strike: 13376869471
        Whirl Wind Kick: 13294790250
        Scatter: 13376962659(start)/13365849295(end)
        Explosive Shuriken: 13501296372
        Ult: 13499771836(start)/13497875049(end)
        Twinblade Rush: 13633468484
        Straight On: 13634395775(Running)/13639700348(slash)
        Carnage: 13723174078
        FourFold Flashstrike: 13881335713(start)/13876406148(end)
    ]]
})

Input:OnChanged(function()
    print("Input updated:", Input.Value)
end)

local function playAnimation(animationId)
    -- Ensure the animation ID is a valid number
    local id = tonumber(animationId)
    if not id then
        print("Invalid Animation ID:", animationId)
        return
    end

    -- Check if the player character exists
    local player = game.Players.LocalPlayer
    if not player or not player.Character then
        print("Player or Character not found")
        return
    end

    -- Check if the humanoid exists
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    if not humanoid then
        print("Humanoid not found in Character")
        return
    end

    -- Create and play the animation
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. id
    local animationTrack = humanoid:LoadAnimation(animation)
    animationTrack:Play()

    print("Playing Animation ID:", id)
end

Tabs.anim:AddParagraph({
    Title = "Brutal Demon",
    Content = [[
        [Brutal Demon] = Metal Bat Animations
        Metal Bat Spawn: 18716634245
        Metal Bat Wall Combo: 18716750744
        Metal Bat Wall Combo Victim: 18716782310
        Metal Bat Block: 18716638776
        Metal Bat M1 (1): 18716641152
        Metal Bat M1 (2): 18716644788
        Metal Bat M1 (3): 18716646083
        Metal Bat M1 (4): 18716647575
        Metal Bat Grand Slam: 18716650993
        Metal Bat Grand Slam Air: 18716655757
        Metal Bat Grand Slam Hit Floor: 18716657427
        Metal Bat Grand Slam Air Finisher: 18716690247
        Metal Bat Grand Slam Air Finisher Victim: 18716777568
        Metal Bat Foul Ball: 18716660379
        Metal Bat Foul Ball Land: 18716683497
        Metal Bat Foul Ball Finisher: 18716684967
        Metal Bat Foul Ball Victim: 18716813950
        Metal Bat Foul Ball Victim Finisher: 18716819019
        Metal Bat Forward Dash: 18716664096
        Metal Bat Homerun: 18716667710
        Metal Bat Homerun Finisher: 18716670225
        Metal Bat Homerun Fail: 18716673362
        Metal Bat Homerun Victim: 18716795505
        Metal Bat Beatdown: 18716698376
        Metal Bat Beatdown Victim: 18716788085
        Metal Bat Beatdown Finisher: 18716701716
        Metal Bat Idle Save Bat: 18716708244
        Metal Bat Awk + Save Bat: 18716713510
        Metal Bat Awk: 18716765679
        Metal Bat Death Blow: 18716734026
        Metal Bat Death Blow Start: 18716737190
        Metal Bat Death Blow Victim Melee: 18716739997
        Metal Bat Death Blow Victim: 18716769631
        Metal Bat Savage Tornado: 14719290328 (credits to Ducker)
        Metal Bat Brutal Beatdown: 14701242661 (credits to Ducker)
        Metal Bat Strength Difference: 14920779925 (credits to Eren)
        Metal Bat Strength Difference Miss: 14900168720 (credits to Ducker)
        Metal Bat Strength Difference Victim: 14901894832 (credits to Eren)
    ]]
})

Tabs.anim:AddParagraph({
    Title = "Atomic Samurai",
    Content = [[
        [Atomic Samurai] = Atomic Spawn: 18716865654
        Atomic Wall Combo: 18716867254
        Atomic Wall Combo Victim: 18716944734
        Atomic Block: 18716869912
        Atomic M1 (1): 15259161390 (credits to Ducker)
        Atomic M1 (2): 15240216931 (credits to Ducker)
        Atomic M1 (3): 15240176873 (credits to Ducker)
        Atomic M1 (4): 15162694192 (credits to Ducker)
        Atomic Pinpoint Cut: 18716871856
        Atomic Pinpoint Cut Victim: 18716974191
        Atomic Pinpoint Cut Finisher: 15436465829 (credits to Ducker)
        Atomic Pinpoint Cut Air Variant Finisher: 15436668469 (credits to Ducker)
        Atomic Quick Slice: 15290930205 (credits to Ducker)
        Atomic Atmos Cleave: 15145462680 (credits to Ducker)
        Atomic Atmos Cleave Finisher: 15279910941 (credits to Ducker)
        Atomic Atmos Cleave Victim: 18716941238
        Atomic Run Sword Hand (only hand): 13379404053 (credits to Ducker)
        Atomic Split Second Counter: 15334974550 (credits to Ducker)
        Atomic Split Second Counter Miss: 15311685628 (credits to Ducker)
        Atomic Split Second Counter Victim: 18716935181
        Atomic Awk: 18716880183
        Atomic Sunrise: 18716884610
        Atomic Sunrise Victim: 18716952942
        Atomic Atomic Slash: 18716893399
        Atomic Atomic Slash Land: 18716897393
        Atomic Atomic Slash Victim: 18716949989
        Atomic Sunset: 15520132233 (credits to Ducker)
        Atomic Sunset Victim: 18716961861
        Atomic Solar Cleave: 15676072469 (credits to Ducker)
    ]]
})

Tabs.anim:AddParagraph({
    Title = "Tatsumaki",
    Content = [[
        [Tatsumaki] = Tatsumaki Spawn: 18717022527
        Tatsumaki Wall Combo: 18717027887
        Tatsumaki Wall Combo Victim: 16310732064 (credits to Ducker)
        Tatsumaki M1 (1): 16515503507 (credits to Ducker)
        Tatsumaki M1 (2): 16515520431 (credits to Ducker)
        Tatsumaki M1 (3): 16515448089 (credits to Ducker)
        Tatsumaki M1 (4): 16552234590 (credits to Ducker)
        Tatsumaki Windstorm: 18717029694
        Tatsumaki Stone Coffin: 18717024196
        Tatsumaki Stone Coffin Finisher: 18717025535
        Tatsumaki Crashing Pull Air: 18717031831
        Tatsumaki Crashing Pull: 16139108718 (credits to Ducker)
        Tatsumaki Crashing Pull Finisher: 18717033246
        Tatsumaki Expulsive Push Fail: 16597322398 (credits to Ducker)
        Tatsumaki Expulsive Push: 16597912086 (credits to Ducker)
        Tatsumaki Expulsive Push Finisher: 16699717165 (credits to Ducker)
        Tatsumaki Expulsive Push Finisher Victim: (Not yet found)
        Tatsumaki Awk: 18717034991
        Tatsumaki Cosmic Strike: 16737255386 (Credits to Ducker)
        Tatsumaki Psychic Ricochet: 17464644182 (Credits to Ducker)
        Tatsumaki Psychic Ricochet Victim: 17466449380 (Credits to Ducker)
        Tatsumaki Terrible Tornado: 17571752869
        Tatsumaki Terrible Tornado Victim: 17534979975
        Terrible Tornado Missed/Use: 17534631905
        Tatsumaki Sky Snatcher Fail: 17860467628 (credits to Ducker)
        Tatsumaki Sky Snatcher: 17889080495 (credits to Ducker)
        Tatsumaki Sky Snatcher Victim: 17889083042 (credits to Eren)
        Removed Move Tatsumaki Seismic Fist (hand anim): 18717089928

    ]]
})

Tabs.anim:AddParagraph({
    Title = "Suiryu",
    Content = [[
        [Suiryu] = Suiryu Wall Combo: 18181159825
        Suiryu Head First Start: 18179181663
        Suiryu Head First Victim Air: 18171728577
        Suiryu Whirlwind Drop: 18716588373
        Suiryu Whirlwind Drop Finisher: 18464362124 (credits to Ducker)
        Suiryu M1 - 1: 18716133404
        Suiryu M1 - 2: 18716143973
        Suiryu M1 - 3: 18169291044
        Suiryu M1 - 4: 18716149223
        Suiryu Awk: 18435535291 (credits to Ducker)
        Suiryu Awk End: 18435383478 (credits to Ducker)
        Suiryu Awk Rising Fist: 18896127525
        Suiryu Awk Rising Fist Victim: 18896121004
        Suiryu Awk Twin Fangs Miss: 18896124320
        Suiryu Awk Twin Fangs: 18896229321 (credits to Ducker)
        Suiryu Awk Twin Fangs Victim: 18896222853
        Suiryu Awk Earth Splitting Strike/end:18897118507 / 18897120868 (credits to Ducker)
        Suiryu Awk Earth Splitting Strike Miss: 18897119503 (credits to Ducker)
        Suiryu Awk Earth Splitting Strike Victim: 18897121931 (credits to Ducker)
    ]]
})

Tabs.anim:AddParagraph({
    Title = "Gojo",
    Content = [[
        [Gojo] = Erase: 13071982935
        Barrage: 13560306510
        Attract: 15121659862
        Wall Combo: 18903642853
        Infinite Void 18459178353
    ]]
})

Tabs.anim:AddParagraph({
    Title = "KJ Duel Lobby Only",
    Content = [[
        [KJ Duel Lobby Only] = M1s (In order):
        17325510002
        17325513870
        17325522388
        17325537719
        Spawn Animation: 17325160621
        Wall Combo: 18447913645
        Wall Combo Victim: 18447915110
        Ravage Startup: 16945573694
        Ravage Full Move: 16945550029
        Ravage Victim: 16945557433
        Swift Sweep: 16944345619
        Collateral Ruin: 17325254223
        Ultimate Activation: 17140902079
        Ultimate Activation 2: 18445236460
        Stoic Bomb: 17141153099
        20-20-20 Dropkick: 17354976067
        20-20-20 Dropkick Hit: 17420452843
        20-20-20 Dropkick Victim: 17363256069
    ]]
})

Tabs.anim:AddParagraph({
    Title = "Extras",
    Content = [[
        [Extras] = Land slash thing : 13497875049
        Sonic Ult Pop : 13499771836
        Machine Gun Blows : 12460977270
        Blitz Shot : 12618271998
        Flamewave : 13083332742
        Flowing water miss : 12272894215
        Lethal whirlwind hit : 12296113986
        Hunters grasp throw : 12309835105
        Preys peril : 13603396939
        Water smash : 12460977270
        Crushed rock : 13630786846
        Sonic dash : 13380255751
        Explosive shuriken throw : 13501296372
        Spin Downslam : 13365849295
        Twinblade Run : 13632347366
        Straight On : 13643152947
        Carnage : 13723174078
        Metal Bat special uppercut : 14001963401
        Red : 13073745835
        Whirlwind kick : 3294790250
        Gojo Wall Combo : 18903642853
        Whirlwind drop finisher thing : 18464372850
        Nice Punch : 11343318134
        Hollow Purple : 13071982935
        Infinite Void : 18459178353
        Gojo Blue 1 : 15121659862
    ]]
})

local activeConnections = {} -- Table to keep track of active connections

local isSpeedEnabled = false  -- Track the state of the toggle
local currentSpeed = 16       -- Default speed

-- Create the toggle
local SpeedToggle = Tabs.Move:AddToggle("SpeedToggle", {
    Title = "Enable Speed Adjustment",
    Description = "Toggle to enable or disable speed adjustment",
    Default = false,
    Callback = function(Value)
        isSpeedEnabled = Value
    end
})

local Button = Tabs.CustomMovesets:AddButton({
    Title = "Duong",
    Description = "One Hand Is All I Need (Custom Character By Oni)",
    Callback = function()

local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("1").Base

local ToolName = baseButton.ToolName


ToolName.Text = "All Out Punch"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("2").Base

local ToolName = baseButton.ToolName


ToolName.Text = "One Handed Barrage"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("3").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Energy Compression"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("4").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Super Stomp"


local Players = game:GetService("Players")

local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")


local function findGuiAndSetText()

    local screenGui = playerGui:FindFirstChild("ScreenGui")

    if screenGui then

        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")

        if magicHealthFrame then

            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")

            if textLabel then

                textLabel.Text = "Sorry Was I Going Too Slow?"

            end

        end

    end

end

playerGui.DescendantAdded:Connect(findGuiAndSetText)
 
findGuiAndSetText()

-- Define the animation IDs
local targetAnimationId = "10468665991" -- All Out Punch
local animationId = "18896127525" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 3 -- Time in seconds
local animationSpeed = 2 -- Speed of the animation

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 1) -- Adjust the animation speed (default is 1 if not provided)

                    -- Emit particles
        local function emitParticles(finalPart)
            for _, child in ipairs(finalPart:GetChildren()) do
                if child:IsA("ParticleEmitter") then
                    child:Emit(1) -- Emit particles
                end
            end
        end

        -- Wait for the specified duration and then stop the animation
        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else

    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "10466974800" -- One Handed Barrage
local animationId = "13073745835" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 3 -- Time in seconds
local animationSpeed = .7 -- Speed of the animation

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 1) -- Adjust the animation speed (default is 1 if not provided)

        -- Wait for the specified duration and then stop the animation
        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else

    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "10471336737" -- Energy Comp
local animationId = "12618271998" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 1.5 -- Time in seconds
local animationSpeed = 2 -- Speed of the animation

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 1) -- Adjust the animation speed (default is 1 if not provided)

        -- Wait for the specified duration and then stop the animation
        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else

    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "12510170988" -- Super Stomp
local animationId1 = "18897119503" -- The ID of the first animation to play
local animationId2 = "" -- The ID of the second animation to play

-- Define settings
local animationDuration = 2 -- Duration in seconds for each animation to play
local animationSpeed = 1.1 -- Speed of the animations
local anchorDuration = 1 -- Duration in seconds to keep the player anchored

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to create and play the animation with a specified speed
local function playAnimationsSequentially(character, speed, duration)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local function playAnimation(animationId)
            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://" .. animationId
            local animator = humanoid:FindFirstChildOfClass("Animator")
            if animator then
                local animationTrack = animator:LoadAnimation(animation)
                animationTrack:Play()
                animationTrack:AdjustSpeed(speed or 1)

                return animationTrack
            else

                return nil
            end
        end

        local track1 = playAnimation(animationId1)
        if track1 then
            task.wait(duration)
            track1:Stop()

            local track2 = playAnimation(animationId2)
            if track2 then
                task.wait(duration)
                track2:Stop()
            end
        end

    else

    end
end

-- Function to anchor the player's character
local function setAnchored(state)
    local character = player.Character
    if character then
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            rootPart.Anchored = state
        end
    end
end


-- Function to stop the target animation and play the new animations
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then


        animationTrack:Stop()

        local character = player.Character
        if character then
            setAnchored(true)
            task.delay(anchorDuration, function()
                setAnchored(false)
            end)
            playAnimationsSequentially(character, animationSpeed, animationDuration)
        else

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define settings for the first animation sequence
local animationDuration = 8 -- Duration in seconds for the first animation to play
local secondAnimationDuration = 8 -- Duration for the second animation in seconds
local animationSpeed = 1 -- Speed of the first animation
local secondAnimationSpeed = .8 -- Speed of the second animation
local anchorDuration = 0 -- Duration in seconds between the two animations

-- Define settings for the second animation sequence
local extraAnimationDuration = 0 -- Duration in seconds for the extra animation to play
local extraSecondAnimationDuration = 0 -- Duration for the second extra animation in seconds
local extraAnimationSpeed = 0 -- Speed of the extra animation
local extraSecondAnimationSpeed = 0 -- Speed of the second extra animation
local extraAnchorDuration = 0 -- Duration in seconds between the two extra animations

-- Define the animation IDs
local targetAnimationId = "12447707844" -- The ID of the animation you want to detect
local animationId1 = "13643152947" -- The ID of the first animation to play
local animationId2 = "13876406148" -- The ID of the second animation to play
local extraAnimationId1 = "" -- The ID of the first extra animation to play
local extraAnimationId2 = "" -- The ID of the second extra animation to play

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

-- Function to create and play the animation with a specified speed

local function playAnimation(animationId, speed)
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animator = humanoid:FindFirstChildOfClass("Animator")
        if animator then
            local animationTrack = animator:LoadAnimation(animation)
            animationTrack:Play()
            animationTrack:AdjustSpeed(speed or 1)

            return animationTrack
        else

            return nil
        end
    else

        return nil
    end
end

-- Function to play two animation sequences with a delay between them

local function playAnimationsSequentially(character, animationId1, animationId2, extraAnimationId1, extraAnimationId2)


local soundId = 1843497734 -- Replace this with the actual sound asset ID

-- Create a new Sound instance
local sound = Instance.new("Sound")
local soundId = 12345678 -- Replace with your actual soundId
sound.Name = "Yuno Skibidi"
sound.SoundId = "rbxassetid://" .. tostring(soundId) -- Convert soundId to a string if necessary
sound.Volume = 0 -- Start with volume at 0 for fade-in
sound.Pitch = 1 -- Pitch set to 1.0
sound.PlaybackSpeed = 1 -- Adjusted playback speed

-- Parent the sound to Workspace
sound.Parent = workspace

-- Play the sound
sound.TimePosition = 124
sound:Play()

-- Fade in the sound over 3 seconds (adjust as needed)
local fadeInTime = 3
local targetVolume = 0.5
local fadeInIncrement = targetVolume / (fadeInTime * 10) -- 10 steps per second

local function fadeIn()
    for i = 1, fadeInTime * 10 do
        task.wait(0.1) -- Wait 0.1 seconds between each increment
        sound.Volume = math.min(sound.Volume + fadeInIncrement, targetVolume) -- Ensure volume doesn't exceed targetVolume
    end
end

task.delay(0, fadeIn) -- Start fade-in immediately

-- Fade out the sound after 18 seconds and stop it
local fadeOutTime = 3
local fadeOutIncrement = targetVolume / (fadeOutTime * 10) -- 10 steps per second

task.delay(18, function()
    -- Fade out the sound over fadeOutTime seconds
    for i = 1, fadeOutTime * 10 do
        task.wait(0.1) -- Wait 0.1 seconds between each decrement
        sound.Volume = math.max(sound.Volume - fadeOutIncrement, 0) -- Ensure volume doesn't go below 0
    end
    sound:Stop() -- Stop the sound after fade-out

    -- Destroy the sound after it stops playing
    sound:Destroy()
end)

    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local track1 = playAnimation(animationId1, animationSpeed)
        if track1 then
            local player = game.Players.LocalPlayer
            
            task.wait(.4)

-- Set rush speed and force
local rushSpeed = 300
local maxForce = Vector3.new(100000, 0, 100000)  -- Adjust max force as needed

-- Ensure 'character' is defined properly
local character = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()

-- Get initial rush direction based on camera's look vector
local camera = game.Workspace.CurrentCamera
local initialLookVector = camera.CFrame.LookVector
local rushDirection = Vector3.new(initialLookVector.X, 0, initialLookVector.Z).unit  -- Ignore Y direction

-- Create BodyVelocity to apply rush force
local bodyVelocity = Instance.new("BodyVelocity")
bodyVelocity.Velocity = rushDirection * rushSpeed
bodyVelocity.MaxForce = maxForce
bodyVelocity.P = 10000  -- Adjust P value for smoother movement
bodyVelocity.Parent = character:WaitForChild("HumanoidRootPart")

-- Function to update rush direction based on camera look vector
local function updateRushDirection()
    local lookVector = camera.CFrame.LookVector
    rushDirection = Vector3.new(lookVector.X, 0, lookVector.Z).unit  -- Ignore Y direction
    bodyVelocity.Velocity = rushDirection * rushSpeed
end

-- Connect to RenderStepped to continuously update rush direction
local connection
connection = game:GetService("RunService").RenderStepped:Connect(function()
    updateRushDirection()
end)

-- Function to stop rush effect and clean up after 4.15 seconds
local function stopRushEffect()
    if connection then
        connection:Disconnect()  -- Properly disconnect RenderStepped connection
    end
    bodyVelocity:Destroy()
end

-- Stop the rush effect after 4.15 seconds
wait(2.5)
stopRushEffect()

            track1:Stop()

            local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("1").Base

local ToolName = baseButton.ToolName


ToolName.Text = "?"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("2").Base

local ToolName = baseButton.ToolName


ToolName.Text = "?"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("3").Base

local ToolName = baseButton.ToolName


ToolName.Text = "One Hand Is All I Need"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("4").Base

local ToolName = baseButton.ToolName


ToolName.Text = "?"


local Players = game:GetService("Players")

local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")


local function findGuiAndSetText()

    local screenGui = playerGui:FindFirstChild("ScreenGui")

    if screenGui then

        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")

        if magicHealthFrame then

            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")

            if textLabel then

                textLabel.Text = "Sorry Was I Going Too Fast?"

            end

        end

    end

end

playerGui.DescendantAdded:Connect(findGuiAndSetText)
 
findGuiAndSetText()

            task.wait(anchorDuration) -- Delay between the first and second animations

            local track2 = playAnimation(animationId2, secondAnimationSpeed)

            local player = game.Players.LocalPlayer


-- Set rush speed and force
local rushSpeed = 300
local maxForce = Vector3.new(100000, 0, 100000)  -- Adjust max force as needed

-- Ensure 'character' is defined properly
local character = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()

-- Get initial rush direction based on camera's look vector
local camera = game.Workspace.CurrentCamera
local initialLookVector = camera.CFrame.LookVector
local rushDirection = Vector3.new(initialLookVector.X, 0, initialLookVector.Z).unit  -- Ignore Y direction

-- Create BodyVelocity to apply rush force
local bodyVelocity = Instance.new("BodyVelocity")
bodyVelocity.Velocity = rushDirection * rushSpeed
bodyVelocity.MaxForce = maxForce
bodyVelocity.P = 10000  -- Adjust P value for smoother movement
bodyVelocity.Parent = character:WaitForChild("HumanoidRootPart")

-- Function to update rush direction based on camera look vector
local function updateRushDirection()
    local lookVector = camera.CFrame.LookVector
    rushDirection = Vector3.new(lookVector.X, 0, lookVector.Z).unit  -- Ignore Y direction
    bodyVelocity.Velocity = rushDirection * rushSpeed
end

-- Connect to RenderStepped to continuously update rush direction
local connection
connection = game:GetService("RunService").RenderStepped:Connect(function()
    updateRushDirection()
end)

-- Function to stop rush effect and clean up after 4.15 seconds
local function stopRushEffect()
    if connection then
        connection:Disconnect()  -- Properly disconnect RenderStepped connection
    end
    bodyVelocity:Destroy()
end

-- Stop the rush effect after 4.15 seconds
wait(.4)
stopRushEffect()

            chatMessage("Sorry Was I Going Too Slow?")

            if track2 then
                task.wait(secondAnimationDuration) -- Play the second animation for its duration

                track2:Stop()

                -- Play the extra animations
                local track3 = playAnimation(extraAnimationId1, extraAnimationSpeed)
                if track3 then
                    task.wait(extraAnimationDuration) -- Play the extra animation for its duration
                    track3:Stop()

                    task.wait(extraAnchorDuration) -- Delay between the extra animations

                    local track4 = playAnimation(extraAnimationId2, extraSecondAnimationSpeed)

                    if track4 then
                        task.wait(extraSecondAnimationDuration) -- Play the second extra animation for its duration
                        track4:Stop()
                    end
                end
            end
        end
    else

    end
end

-- Function to anchor the player's character
local function setAnchored(state)
    local character = player.Character
    if character then
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            rootPart.Anchored = state
        end
    end
end

-- Function to stop the target animation and play the new animations
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then


        animationTrack:Stop()

        local character = player.Character
        if character then
            setAnchored(true)
            task.delay(anchorDuration, function()
                setAnchored(false)
            end)
            playAnimationsSequentially(character, animationId1, animationId2, extraAnimationId1, extraAnimationId2)
        else

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "12983333733" -- The ID of the animation you want to detect
local animationId = "13073745835" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 10 -- Time in seconds
local animationSpeed = 0.1 -- Speed of the animation

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

-- Function to fix the camera
local function fixCamera()
    local camera = game.Workspace.CurrentCamera
    local savedCFrame = camera.CFrame -- Save the camera's CFrame before destroying it
    
    camera:Destroy() -- Destroy the current camera
    
    local char = player.Character
    if char then
        local humanoid = char:FindFirstChildWhichIsA('Humanoid')
        if humanoid then
            local newCamera = Instance.new("Camera")
            newCamera.Parent = game.Workspace
            game.Workspace.CurrentCamera = newCamera
            newCamera.CameraSubject = humanoid
            newCamera.CameraType = Enum.CameraType.Custom
            newCamera.CFrame = savedCFrame -- Restore the saved CFrame
            
            -- Camera settings
            player.CameraMinZoomDistance = 0.5
            player.CameraMaxZoomDistance = 400
            player.CameraMode = Enum.CameraMode.Classic
            
            -- Unanchor the character's head if necessary
            if char:FindFirstChild("Head") then
                char.Head.Anchored = false
            end
        end
    end
end
 
-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("1").Base

local ToolName = baseButton.ToolName


ToolName.Text = "All Out Punch"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("2").Base

local ToolName = baseButton.ToolName


ToolName.Text = "One Handed Barrage"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("3").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Energy Compression"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("4").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Super Stomp"


local Players = game:GetService("Players")

local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")


local function findGuiAndSetText()

    local screenGui = playerGui:FindFirstChild("ScreenGui")

    if screenGui then

        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")

        if magicHealthFrame then

            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")

            if textLabel then

                textLabel.Text = "Sorry Was I Going Too Slow?"

            end

        end

    end

end

playerGui.DescendantAdded:Connect(findGuiAndSetText)
 
findGuiAndSetText()

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 1) -- Adjust the animation speed (default is 1 if not provided)

        task.wait(1)

        local spin1 = game.ReplicatedStorage.Resources.WhirlwindDrop["CharFX"].Spin:Clone()
spin1.Parent = game.Players.LocalPlayer.Character["Torso"]
    for _, child in ipairs(spin1:GetChildren()) do
        if child:IsA("ParticleEmitter") then -- Check if the child is a ParticleEmitter
            child:Emit(1) -- Emit 20 particles
        end
    end
local wow1 = game.ReplicatedStorage.Resources.Dragon["Complete"].Part.Debri:Clone()
wow1.Parent = game.Players.LocalPlayer.Character["Torso"]
    for _, child in ipairs(wow1:GetChildren()) do
        if child:IsA("ParticleEmitter") then -- Check if the child is a ParticleEmitter
            child:Emit(1) -- Emit 20 particles
        end
    end
local wind1 = game.ReplicatedStorage.Resources.Dragon["Stretch"].Part.Attachment:Clone()
wind1.Parent = game.Players.LocalPlayer.Character["Torso"]
    for _, child in ipairs(wind1:GetChildren()) do
        if child:IsA("ParticleEmitter") then -- Check if the child is a ParticleEmitter
            child:Emit(1) -- Emit 20 particles
        end
    end
local trail1 = game.ReplicatedStorage.Resources.WhirlwindDrop["CharFX"].WindTrail:Clone()
trail1.Parent = game.Players.LocalPlayer.Character["Right Arm"]
    for _, child in ipairs(trail1:GetChildren()) do
        if child:IsA("ParticleEmitter") then -- Check if the child is a ParticleEmitter
            child:Emit(1) -- Emit 20 particles
        end
    end
wait(0)
trail1:Destroy()
local explosion1 = game.ReplicatedStorage.Resources.FlyingKicks["LegThing"].Part.Attachment:Clone()
explosion1.Parent = game.Players.LocalPlayer.Character["Right Arm"]
    for _, child in ipairs(explosion1:GetChildren()) do
        if child:IsA("ParticleEmitter") then -- Check if the child is a ParticleEmitter
            child:Emit(1) -- Emit 20 particles
        end
    end
wait(0)
spin1:Destroy()
local explosion1 = game.ReplicatedStorage.Resources.Dragon["Star"].Attachment:Clone()
explosion1.Parent = game.Players.LocalPlayer.Character["Right Arm"]
    for _, child in ipairs(explosion1:GetChildren()) do
        if child:IsA("ParticleEmitter") then -- Check if the child is a ParticleEmitter
            child:Emit(1) -- Emit 20 particles
        end
    end
wait(0)

        -- Chat messages with Japanese translations
        chatMessage("One Hand Is All I Need")

        -- Wait for the specified duration and then stop the animation
        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else

    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then

        animationTrack:Stop() -- Stop the target animation

        -- Fix the camera when the target animation is detected
        fixCamera()
        
        -- Wait for 0.1 seconds before performing the desired action

        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)
        else

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character

local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    else

    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else

end

player.CharacterAdded:Connect(onCharacterAdded)

local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Create the Tool instance
local tool = Instance.new("Tool")

-- Set the tool's properties
tool.Name = "Duong's Special Ability"
tool.RequiresHandle = false  -- Set to true if you have a handle part
tool.CanBeDropped = false     -- Change as needed

-- Add a description or other properties
tool.ToolTip = "skibidi toilet."

-- Function to make stuff happen when activated
local function activateTool()
local p = game.Players.LocalPlayer
local Humanoid = p.Character:WaitForChild("Humanoid")

local AnimAnim = Instance.new("Animation")
AnimAnim.AnimationId = "rbxassetid://17354976067"
local Anim = Humanoid:LoadAnimation(AnimAnim)
AnimAnim.AnimationId = "rbxassetid://0" -- Reset animation ID
Anim:Play()

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local function setWalkSpeedToZero()
    local humanoid = character:WaitForChild("Humanoid")
    humanoid.WalkSpeed = 0
end

if character then
    setWalkSpeedToZero()
end

player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    setWalkSpeedToZero()
end)

spawn(function()
    loadstring(game:HttpGet("https://pastebin.pl/view/raw/93703964"))()
end)

spawn(function()
    loadstring(game:HttpGet("https://pastebin.pl/view/raw/a9d0f7d7"))()
end)

-- Local Script

local soundId = 17429233290 -- Correct sound ID

-- Create a new Sound instance
local sound = Instance.new("Sound")
sound.Name = "Dropkick Miss"
sound.SoundId = "rbxassetid://" .. soundId
sound.Volume = 1
sound.Pitch = 1.0 -- Pitch set to 1.0
sound.PlaybackSpeed = 1.0 -- Adjusted playback speed

-- Parent the sound to Workspace
sound.Parent = workspace

-- Play the sound
sound:Play()

-- Local Script

Wait(1.79)

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

-- Wait for the player to load
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Check for Resources folder in ReplicatedStorage
local resourcesFolder = ReplicatedStorage:WaitForChild("Resources")

-- Check for KJEffects folder inside Resources
local kjEffectsFolder = resourcesFolder:WaitForChild("KJEffects")

-- Check for speedlinesandstuff part inside KJEffects
local speedlinesandstuffPart = kjEffectsFolder:WaitForChild("speedlinesandstuff")

-- Duplicate the speedlinesandstuff part
local speedlinesandstuffClone = speedlinesandstuffPart:Clone()

-- Put the duplicate in Workspace
speedlinesandstuffClone.Parent = Workspace

-- Offset position behind the player
local offset = Vector3.new(0, 0, -9) -- Adjust the offset as needed

-- Function to update the position of the speedlinesandstuff clone to follow the player with offset
local function updateSpeedlinesPosition()
    while true do
        speedlinesandstuffClone.CFrame = rootPart.CFrame * CFrame.new(offset)
        wait(0.1) -- Adjust the wait time as needed
    end
end

-- Get references to ReplicatedStorage and Workspace
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

-- Function to recursively find a part by name within a parent
local function findPartByName(parent, name)
    local part = parent:FindFirstChild(name)
    if part then
        return part
    else
        for _, child in ipairs(parent:GetChildren()) do
            part = findPartByName(child, name)
            if part then
                return part
            end
        end
    end
    return nil
end

-- Wait for ReplicatedStorage.Resources.KJEffects.speedlinesandstuff.thespeedthingunderultik to exist
local function waitForPart()
    local speedlinesandstuff = ReplicatedStorage:WaitForChild("Resources"):WaitForChild("KJEffects"):WaitForChild("speedlinesandstuff")
    local thespeedthingunderultik = findPartByName(speedlinesandstuff, "thespeedthingunderultik")
    if thespeedthingunderultik then
        -- Clone the part into Workspace and make it follow the player
        local clonedPart = thespeedthingunderultik:Clone()
        clonedPart.Parent = Workspace
        
        -- Function to make the cloned part follow the player
        local function followPlayer()
            local player = game.Players.LocalPlayer
            local character = player.Character
            if character then
                local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                if humanoidRootPart and humanoid then
                    local torso = humanoidRootPart:FindFirstChild("LowerTorso")
                    if torso then
                        clonedPart.CFrame = torso.CFrame
                        clonedPart.CFrame = clonedPart.CFrame * CFrame.new(0, -humanoid.HipHeight / 2, 0) -- Offset under the legs
                        clonedPart.CFrame = clonedPart.CFrame * CFrame.Angles(0, math.rad(180), 0) -- Make it look where the character looks
                    end
                end
            end
        end
        
        -- Run the followPlayer function every frame
        game:GetService("RunService").RenderStepped:Connect(followPlayer)
    else
        warn("Part thespeedthingunderultik not found inside speedlinesandstuff.")
    end
end

-- Call the waitForPart function
waitForPart()

-- Run the function in a separate thread
spawn(updateSpeedlinesPosition)

-- Get references to ReplicatedStorage and Workspace
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

-- Function to recursively find a part by name within a parent
local function findPartByName(parent, name)
    local part = parent:FindFirstChild(name)
    if part then
        return part
    else
        for _, child in ipairs(parent:GetChildren()) do
            part = findPartByName(child, name)
            if part then
                return part
            end
        end
    end
    return nil
end

-- Wait for ReplicatedStorage.Resources.KJEffects.speedlinesandstuff.thespeedthingunderultik to exist
local function waitForPart()
    local speedlinesandstuff = ReplicatedStorage:WaitForChild("Resources"):WaitForChild("KJEffects"):WaitForChild("speedlinesandstuff")
    local thespeedthingunderultik = findPartByName(speedlinesandstuff, "thespeedthingunderultik")
    if thespeedthingunderultik then
        -- Clone the part into Workspace and make it follow the player
        local clonedPart = thespeedthingunderultik:Clone()
        clonedPart.Parent = Workspace
        
        -- Function to make the cloned part follow the player
        local function followPlayer()
            local player = game.Players.LocalPlayer
            local character = player.Character
            if character then
                local humanoidRootPart = character:WaitForChild("HumanoidRootPart")
                if humanoidRootPart then
                    clonedPart.CFrame = humanoidRootPart.CFrame
                    clonedPart.CFrame = clonedPart.CFrame * CFrame.new(0, -0.3, -2) -- Offset from character (adjusted)
                    clonedPart.CFrame = clonedPart.CFrame * CFrame.Angles(0, math.rad(180), 0) -- Make it look where the character looks
                end
            end
        end
        
        -- Run the followPlayer function every frame
        game:GetService("RunService").RenderStepped:Connect(followPlayer)
    else
        warn("Part thespeedthingunderultik not found inside speedlinesandstuff.")
    end
end

-- Call the waitForPart function
waitForPart()


local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

-- Wait for the player to load
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Check for Resources folder in ReplicatedStorage
local resourcesFolder = ReplicatedStorage:WaitForChild("Resources")

-- Check for KJEffects folder inside Resources
local kjEffectsFolder = resourcesFolder:WaitForChild("KJEffects")

-- Check for speedlines part inside KJEffects
local speedlinesPart = kjEffectsFolder:WaitForChild("speedlines")

-- Duplicate the speedlines part
local speedlinesClone = speedlinesPart:Clone()

-- Put the duplicate in Workspace
speedlinesClone.Parent = Workspace

-- Function to update the position of the speedlines clone to follow the player
local function updateSpeedlinesPosition()
    while true do
        speedlinesClone.CFrame = rootPart.CFrame
        wait(0.1) -- Adjust the wait time as needed
    end
end

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

-- Wait for the player to load
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Check for Resources folder in ReplicatedStorage
local resourcesFolder = ReplicatedStorage:WaitForChild("Resources")

-- Check for KJEffects folder inside Resources
local kjEffectsFolder = resourcesFolder:WaitForChild("KJEffects")

-- Check for speedlines part inside KJEffects
local speedlinesPart = kjEffectsFolder:WaitForChild("speedlines")

-- Duplicate the speedlines part
local speedlinesClone = speedlinesPart:Clone()

-- Put the duplicate in Workspace
speedlinesClone.Parent = Workspace

-- Function to update the position of the speedlines clone to follow the player
local function updateSpeedlinesPosition()
    while true do
        speedlinesClone.CFrame = rootPart.CFrame
        wait(0.1) -- Adjust the wait time as needed
    end
end

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

-- Wait for the player to load
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Check for Resources folder in ReplicatedStorage
local resourcesFolder = ReplicatedStorage:WaitForChild("Resources")

-- Check for KJEffects folder inside Resources
local kjEffectsFolder = resourcesFolder:WaitForChild("KJEffects")

-- Check for speedlines part inside KJEffects
local speedlinesPart = kjEffectsFolder:WaitForChild("speedlines")

-- Duplicate the speedlines part
local speedlinesClone = speedlinesPart:Clone()

-- Put the duplicate in Workspace
speedlinesClone.Parent = Workspace

-- Function to update the position of the speedlines clone to follow the player
local function updateSpeedlinesPosition()
    while true do
        speedlinesClone.CFrame = rootPart.CFrame
        wait(0.1) -- Adjust the wait time as needed
    end
end

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

-- Wait for the player to load
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Check for Resources folder in ReplicatedStorage
local resourcesFolder = ReplicatedStorage:WaitForChild("Resources")

-- Check for KJEffects folder inside Resources
local kjEffectsFolder = resourcesFolder:WaitForChild("KJEffects")

-- Check for speedlines part inside KJEffects
local speedlinesPart = kjEffectsFolder:WaitForChild("speedlines")

-- Duplicate the speedlines part
local speedlinesClone = speedlinesPart:Clone()

-- Put the duplicate in Workspace
speedlinesClone.Parent = Workspace

-- Function to update the position of the speedlines clone to follow the player
local function updateSpeedlinesPosition()
    while true do
        speedlinesClone.CFrame = rootPart.CFrame
        wait(0.1) -- Adjust the wait time as needed
    end
end

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

-- Wait for the player to load
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Check for Resources folder in ReplicatedStorage
local resourcesFolder = ReplicatedStorage:WaitForChild("Resources")

-- Check for KJEffects folder inside Resources
local kjEffectsFolder = resourcesFolder:WaitForChild("KJEffects")

-- Check for speedlines part inside KJEffects
local speedlinesPart = kjEffectsFolder:WaitForChild("speedlines")

-- Duplicate the speedlines part
local speedlinesClone = speedlinesPart:Clone()

-- Put the duplicate in Workspace
speedlinesClone.Parent = Workspace

-- Function to update the position of the speedlines clone to follow the player
local function updateSpeedlinesPosition()
    while true do
        speedlinesClone.CFrame = rootPart.CFrame
        wait(0.1) -- Adjust the wait time as needed
    end
end

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

-- Wait for the player to load
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Check for Resources folder in ReplicatedStorage
local resourcesFolder = ReplicatedStorage:WaitForChild("Resources")

-- Check for KJEffects folder inside Resources
local kjEffectsFolder = resourcesFolder:WaitForChild("KJEffects")

-- Check for speedlines part inside KJEffects
local speedlinesPart = kjEffectsFolder:WaitForChild("speedlines")

-- Duplicate the speedlines part
local speedlinesClone = speedlinesPart:Clone()

-- Put the duplicate in Workspace
speedlinesClone.Parent = Workspace

-- Function to update the position of the speedlines clone to follow the player
local function updateSpeedlinesPosition()
    while true do
        speedlinesClone.CFrame = rootPart.CFrame
        wait(0.1) -- Adjust the wait time as needed
    end
end

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

-- Wait for the player to load
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Check for Resources folder in ReplicatedStorage
local resourcesFolder = ReplicatedStorage:WaitForChild("Resources")

-- Check for KJEffects folder inside Resources
local kjEffectsFolder = resourcesFolder:WaitForChild("KJEffects")

-- Check for speedlines part inside KJEffects
local speedlinesPart = kjEffectsFolder:WaitForChild("speedlines")

-- Duplicate the speedlines part
local speedlinesClone = speedlinesPart:Clone()

-- Put the duplicate in Workspace
speedlinesClone.Parent = Workspace

-- Function to update the position of the speedlines clone to follow the player
local function updateSpeedlinesPosition()
    while true do
        speedlinesClone.CFrame = rootPart.CFrame
        wait(0.1) -- Adjust the wait time as needed
    end
end

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

-- Wait for the player to load
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Check for Resources folder in ReplicatedStorage
local resourcesFolder = ReplicatedStorage:WaitForChild("Resources")

-- Check for KJEffects folder inside Resources
local kjEffectsFolder = resourcesFolder:WaitForChild("KJEffects")

-- Check for speedlines part inside KJEffects
local speedlinesPart = kjEffectsFolder:WaitForChild("speedlines")

-- Duplicate the speedlines part
local speedlinesClone = speedlinesPart:Clone()

-- Put the duplicate in Workspace
speedlinesClone.Parent = Workspace

-- Function to update the position of the speedlines clone to follow the player
local function updateSpeedlinesPosition()
    while true do
        speedlinesClone.CFrame = rootPart.CFrame
        wait(0.1) -- Adjust the wait time as needed
    end
end

-- Enable particle emitters and set emission properties
local function setupParticles(part)
    for _, descendant in pairs(part:GetDescendants()) do
        if descendant:IsA("ParticleEmitter") then
            descendant.Rate = 100
            descendant.Enabled = true
            descendant:Emit(100)
        end
    end
end

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

-- Wait for the player to load
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Check for Resources folder in ReplicatedStorage
local resourcesFolder = ReplicatedStorage:WaitForChild("Resources")

-- Check for KJEffects folder inside Resources
local kjEffectsFolder = resourcesFolder:WaitForChild("KJEffects")

-- Check for speedlines part inside KJEffects
local speedlinesPart = kjEffectsFolder:WaitForChild("speedlines")

-- Duplicate the speedlines part
local speedlinesClone = speedlinesPart:Clone()

-- Put the duplicate in Workspace
speedlinesClone.Parent = Workspace

-- Function to update the position of the speedlines clone to follow the player
local function updateSpeedlinesPosition()
    while true do
        speedlinesClone.CFrame = rootPart.CFrame
        wait(0.1) -- Adjust the wait time as needed
    end
end
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

-- Wait for the player to load
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Check for Resources folder in ReplicatedStorage
local resourcesFolder = ReplicatedStorage:WaitForChild("Resources")

-- Check for KJEffects folder inside Resources
local kjEffectsFolder = resourcesFolder:WaitForChild("KJEffects")

-- Check for speedlines part inside KJEffects
local speedlinesPart = kjEffectsFolder:WaitForChild("speedlines")

-- Duplicate the speedlines part
local speedlinesClone = speedlinesPart:Clone()

-- Put the duplicate in Workspace
speedlinesClone.Parent = Workspace

-- Function to update the position of the speedlines clone to follow the player
local function updateSpeedlinesPosition()
    while true do
        speedlinesClone.CFrame = rootPart.CFrame
        wait(0.1) -- Adjust the wait time as needed
    end
end

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

-- Wait for the player to load
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Check for Resources folder in ReplicatedStorage
local resourcesFolder = ReplicatedStorage:WaitForChild("Resources")

-- Check for KJEffects folder inside Resources
local kjEffectsFolder = resourcesFolder:WaitForChild("KJEffects")

-- Check for speedlines part inside KJEffects
local speedlinesPart = kjEffectsFolder:WaitForChild("speedlines")

-- Duplicate the speedlines part
local speedlinesClone = speedlinesPart:Clone()

-- Put the duplicate in Workspace
speedlinesClone.Parent = Workspace

-- Function to update the position of the speedlines clone to follow the player
local function updateSpeedlinesPosition()
    while true do
        speedlinesClone.CFrame = rootPart.CFrame
        wait(0.1) -- Adjust the wait time as needed
    end
end


-- Setup particles in the duplicated part
setupParticles(speedlinesClone)

-- Run the function in a separate thread
spawn(updateSpeedlinesPosition)

-- Wait for the player to load
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Check for Resources folder in ReplicatedStorage
local resourcesFolder = ReplicatedStorage:WaitForChild("Resources")

-- Check for KJEffects folder inside Resources
local kjEffectsFolder = resourcesFolder:WaitForChild("KJEffects")

-- Check for speedlines part inside KJEffects
local speedlinesPart = kjEffectsFolder:WaitForChild("speedlines")

-- Duplicate the speedlines part
local speedlinesClone = speedlinesPart:Clone()

-- Put the duplicate in Workspace
speedlinesClone.Parent = Workspace

-- Function to update the position of the speedlines clone to follow the player
local function updateSpeedlinesPosition()
    while true do
        speedlinesClone.CFrame = rootPart.CFrame
        wait(0.1) -- Adjust the wait time as needed
    end
end


-- Setup particles in the duplicated part
setupParticles(speedlinesClone)

-- Run the function in a separate thread
spawn(updateSpeedlinesPosition)

-- Wait for the player to load
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Check for Resources folder in ReplicatedStorage
local resourcesFolder = ReplicatedStorage:WaitForChild("Resources")

-- Check for KJEffects folder inside Resources
local kjEffectsFolder = resourcesFolder:WaitForChild("KJEffects")

-- Check for speedlines part inside KJEffects
local speedlinesPart = kjEffectsFolder:WaitForChild("speedlines")

-- Duplicate the speedlines part
local speedlinesClone = speedlinesPart:Clone()

-- Put the duplicate in Workspace
speedlinesClone.Parent = Workspace

-- Function to update the position of the speedlines clone to follow the player
local function updateSpeedlinesPosition()
    while true do
        speedlinesClone.CFrame = rootPart.CFrame
        wait(0.1) -- Adjust the wait time as needed
    end
end


-- Setup particles in the duplicated part
setupParticles(speedlinesClone)

-- Run the function in a separate thread
spawn(updateSpeedlinesPosition)

-- Wait for the player to load
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Check for Resources folder in ReplicatedStorage
local resourcesFolder = ReplicatedStorage:WaitForChild("Resources")

-- Check for KJEffects folder inside Resources
local kjEffectsFolder = resourcesFolder:WaitForChild("KJEffects")

-- Check for speedlines part inside KJEffects
local speedlinesPart = kjEffectsFolder:WaitForChild("speedlines")

-- Duplicate the speedlines part
local speedlinesClone = speedlinesPart:Clone()

-- Put the duplicate in Workspace
speedlinesClone.Parent = Workspace

-- Function to update the position of the speedlines clone to follow the player
local function updateSpeedlinesPosition()
    while true do
        speedlinesClone.CFrame = rootPart.CFrame
        wait(0.1) -- Adjust the wait time as needed
    end
end


-- Setup particles in the duplicated part
setupParticles(speedlinesClone)

-- Run the function in a separate thread
spawn(updateSpeedlinesPosition)

-- Wait for the player to load
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Check for Resources folder in ReplicatedStorage
local resourcesFolder = ReplicatedStorage:WaitForChild("Resources")

-- Check for KJEffects folder inside Resources
local kjEffectsFolder = resourcesFolder:WaitForChild("KJEffects")

-- Check for speedlines part inside KJEffects
local speedlinesPart = kjEffectsFolder:WaitForChild("speedlines")

-- Duplicate the speedlines part
local speedlinesClone = speedlinesPart:Clone()

-- Put the duplicate in Workspace
speedlinesClone.Parent = Workspace

-- Function to update the position of the speedlines clone to follow the player
local function updateSpeedlinesPosition()
    while true do
        speedlinesClone.CFrame = rootPart.CFrame
        wait(0.1) -- Adjust the wait time as needed
    end
end


-- Setup particles in the duplicated part
setupParticles(speedlinesClone)

-- Run the function in a separate thread
spawn(updateSpeedlinesPosition)



-- Function to initiate rush effect
local function initiateRush()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if not humanoid then
        return
    end

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

-- Wait for the player to load
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Check for Resources folder in ReplicatedStorage
local resourcesFolder = ReplicatedStorage:WaitForChild("Resources")

-- Check for KJEffects folder inside Resources
local kjEffectsFolder = resourcesFolder:WaitForChild("KJEffects")

-- Check for speedlines part inside KJEffects
local speedlinesPart = kjEffectsFolder:WaitForChild("speedlines")

-- Duplicate the speedlines part
local speedlinesClone = speedlinesPart:Clone()

-- Put the duplicate in Workspace
speedlinesClone.Parent = Workspace

-- Function to update the position of the speedlines clone to follow the player
local function updateSpeedlinesPosition()
    while true do
        speedlinesClone.CFrame = rootPart.CFrame
        wait(0.1) -- Adjust the wait time as needed
    end
end

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

-- Wait for the player to load
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Check for Resources folder in ReplicatedStorage
local resourcesFolder = ReplicatedStorage:WaitForChild("Resources")

-- Check for KJEffects folder inside Resources
local kjEffectsFolder = resourcesFolder:WaitForChild("KJEffects")

-- Check for speedlines part inside KJEffects
local speedlinesPart = kjEffectsFolder:WaitForChild("speedlines")

-- Duplicate the speedlines part
local speedlinesClone = speedlinesPart:Clone()

-- Put the duplicate in Workspace
speedlinesClone.Parent = Workspace

-- Function to update the position of the speedlines clone to follow the player
local function updateSpeedlinesPosition()
    while true do
        speedlinesClone.CFrame = rootPart.CFrame
        wait(0.1) -- Adjust the wait time as needed
    end
end

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

-- Wait for the player to load
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Check for Resources folder in ReplicatedStorage
local resourcesFolder = ReplicatedStorage:WaitForChild("Resources")

-- Check for KJEffects folder inside Resources
local kjEffectsFolder = resourcesFolder:WaitForChild("KJEffects")

-- Check for speedlines part inside KJEffects
local speedlinesPart = kjEffectsFolder:WaitForChild("speedlines")

-- Duplicate the speedlines part
local speedlinesClone = speedlinesPart:Clone()

-- Put the duplicate in Workspace
speedlinesClone.Parent = Workspace

-- Function to update the position of the speedlines clone to follow the player
local function updateSpeedlinesPosition()
    while true do
        speedlinesClone.CFrame = rootPart.CFrame
        wait(0.1) -- Adjust the wait time as needed
    end
end

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

-- Wait for the player to load
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Check for Resources folder in ReplicatedStorage
local resourcesFolder = ReplicatedStorage:WaitForChild("Resources")

-- Check for KJEffects folder inside Resources
local kjEffectsFolder = resourcesFolder:WaitForChild("KJEffects")

-- Check for speedlines part inside KJEffects
local speedlinesPart = kjEffectsFolder:WaitForChild("speedlines")

-- Duplicate the speedlines part
local speedlinesClone = speedlinesPart:Clone()

-- Put the duplicate in Workspace
speedlinesClone.Parent = Workspace

-- Function to update the position of the speedlines clone to follow the player
local function updateSpeedlinesPosition()
    while true do
        speedlinesClone.CFrame = rootPart.CFrame
        wait(0.1) -- Adjust the wait time as needed
    end
end
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

-- Wait for the player to load
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Check for Resources folder in ReplicatedStorage
local resourcesFolder = ReplicatedStorage:WaitForChild("Resources")

-- Check for KJEffects folder inside Resources
local kjEffectsFolder = resourcesFolder:WaitForChild("KJEffects")

-- Check for speedlines part inside KJEffects
local speedlinesPart = kjEffectsFolder:WaitForChild("speedlines")

-- Duplicate the speedlines part
local speedlinesClone = speedlinesPart:Clone()

-- Put the duplicate in Workspace
speedlinesClone.Parent = Workspace

-- Function to update the position of the speedlines clone to follow the player
local function updateSpeedlinesPosition()
    while true do
        speedlinesClone.CFrame = rootPart.CFrame
        wait(0.1) -- Adjust the wait time as needed
    end
end

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

-- Wait for the player to load
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local rootPart = character:WaitForChild("HumanoidRootPart")

-- Check for Resources folder in ReplicatedStorage
local resourcesFolder = ReplicatedStorage:WaitForChild("Resources")

-- Check for KJEffects folder inside Resources
local kjEffectsFolder = resourcesFolder:WaitForChild("KJEffects")

-- Check for speedlines part inside KJEffects
local speedlinesPart = kjEffectsFolder:WaitForChild("speedlines")

-- Duplicate the speedlines part
local speedlinesClone = speedlinesPart:Clone()

-- Put the duplicate in Workspace
speedlinesClone.Parent = Workspace

-- Function to update the position of the speedlines clone to follow the player
local function updateSpeedlinesPosition()
    while true do
        speedlinesClone.CFrame = rootPart.CFrame
        wait(0.1) -- Adjust the wait time as needed
    end
end

    -- Set rush speed and force
    local rushSpeed = 300
    local maxForce = Vector3.new(100000, 0, 100000)  -- Adjust max force as needed

    -- Get initial rush direction based on camera's look vector
    local camera = game.Workspace.CurrentCamera
    local initialLookVector = camera.CFrame.LookVector
    local rushDirection = Vector3.new(initialLookVector.X, 0, initialLookVector.Z).unit  -- Ignore Y direction

    -- Create BodyVelocity to apply rush force
    local bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.Velocity = rushDirection * rushSpeed
    bodyVelocity.MaxForce = maxForce
    bodyVelocity.P = 10000  -- Adjust P value for smoother movement
    bodyVelocity.Parent = character:WaitForChild("HumanoidRootPart")

    -- Function to update rush direction based on camera look vector
    local function updateRushDirection()
        rushDirection = camera.CFrame.LookVector
        rushDirection = Vector3.new(rushDirection.X, 0, rushDirection.Z).unit  -- Ignore Y direction
        bodyVelocity.Velocity = rushDirection * rushSpeed
    end

    -- Connect to RenderStepped to continuously update rush direction
    local connection
    connection = game:GetService("RunService").RenderStepped:Connect(function()
        updateRushDirection()
    end)

    -- Function to stop rush effect and clean up after 4.15 seconds
    local function stopRushEffect()
        bodyVelocity:Destroy()
        connection:Disconnect()
    end

    -- Stop the rush effect after 4.15 seconds
    wait(4.21)
    stopRushEffect()

-- Get all children of the workspace
local children = workspace:GetChildren()

-- Iterate through each child
for _, child in ipairs(children) do
    -- Check if the child is a part and its name is "speedlines"
    if child:IsA("Part") and child.Name == "speedlines" then
        -- Delete the part
        child:Destroy()
    end
end

-- Get all children of the workspace
local children = workspace:GetChildren()

-- Iterate through each child
for _, child in ipairs(children) do
    -- Check if the child is a part and its name is "speedlines"
    if child:IsA("Part") and child.Name == "speedlinesandstuff" then
        -- Delete the part
        child:Destroy()
    end
end

-- Get all children of the workspace
local children = workspace:GetChildren()

-- Iterate through each child
for _, child in ipairs(children) do
    -- Check if the child is a part and its name is "speedlines"
    if child:IsA("Part") and child.Name == "thespeedthingunderultik" then
        -- Delete the part
        child:Destroy()
    end
end

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

local function setWalkSpeedToSixTeen()
    local humanoid = character:WaitForChild("Humanoid")
    humanoid.WalkSpeed = 16
end

if character then
    setWalkSpeedToZero()
end

player.CharacterAdded:Connect(function(newCharacter)
    character = newCharacter
    setWalkSpeedToZero()
end)


end

-- Example usage: Call initiateRush() when you want to trigger the rush effect.
initiateRush()
end


-- Add functionality to the tool when activated
tool.Equipped:Connect(function()
    activateTool()
end)

-- Add the tool to the player's backpack
tool.Parent = game.Players.LocalPlayer.Backpack

-- LocalScript placed in StarterCharacterScripts or StarterPlayerScripts

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

-- Function to set left arm transparency
local function setLeftArmTransparency()
    local leftArm = character:FindFirstChild("Left Arm") or character:FindFirstChild("LeftUpperArm")
    if leftArm then
        local descendants = leftArm:GetDescendants()
        for _, part in pairs(descendants) do
            if part:IsA("BasePart") then
                part.Transparency = 1
            end
        end
        leftArm.Transparency = 1
    end
end

-- Keep updating transparency on the left arm
while true do
    setLeftArmTransparency()
    wait(0) -- Run every 0.1 seconds to ensure it's always transparent
end

    end
})

local Button = Tabs.CustomMovesets:AddButton({
    Title = "Yuno",
    Description = "Why is everyone so stupid?--Custom Character By Oni",
   Callback = function()

   local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("1").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Off Me"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("2").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Stop"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("3").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Get Away"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("4").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Why?"


local Players = game:GetService("Players")

local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")


local function findGuiAndSetText()

    local screenGui = playerGui:FindFirstChild("ScreenGui")

    if screenGui then

        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")

        if magicHealthFrame then

            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")

            if textLabel then

                textLabel.Text = "Hatred"

            end

        end

    end

end

playerGui.DescendantAdded:Connect(findGuiAndSetText)
 
findGuiAndSetText()

-- Define the animation IDs
local targetAnimationId = "10468665991" -- Off Me
local animationId = "18903642853" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 1 -- Time in seconds
local animationSpeed = 2.1 -- Speed of the animation

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 1) -- Adjust the animation speed (default is 1 if not provided)

                    -- Emit particles
        local function emitParticles(finalPart)
            for _, child in ipairs(finalPart:GetChildren()) do
                if child:IsA("ParticleEmitter") then
                    child:Emit(1) -- Emit particles
                end
            end
        end

        -- Wait for the specified duration and then stop the animation
        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else

    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "10466974800" -- Stop
local animationId = "12460977270" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 3 -- Time in seconds
local animationSpeed = 1.2 -- Speed of the animation

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 1) -- Adjust the animation speed (default is 1 if not provided)

        -- Wait for the specified duration and then stop the animation
        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else

    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "10471336737" -- Get Away
local animationId = "11343318134" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 1.5 -- Time in seconds
local animationSpeed = 1.5 -- Speed of the animation

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 1) -- Adjust the animation speed (default is 1 if not provided)

        -- Wait for the specified duration and then stop the animation
        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else

    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "12510170988" -- Why?
local animationId1 = "18179181663" -- The ID of the first animation to play
local animationId2 = "" -- The ID of the second animation to play

-- Define settings
local animationDuration = 2 -- Duration in seconds for each animation to play
local animationSpeed = 1.2 -- Speed of the animations
local anchorDuration = 1 -- Duration in seconds to keep the player anchored

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to create and play the animation with a specified speed
local function playAnimationsSequentially(character, speed, duration)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local function playAnimation(animationId)
            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://" .. animationId
            local animator = humanoid:FindFirstChildOfClass("Animator")
            if animator then
                local animationTrack = animator:LoadAnimation(animation)
                animationTrack:Play()
                animationTrack:AdjustSpeed(speed or 1)

                return animationTrack
            else

                return nil
            end
        end

        local track1 = playAnimation(animationId1)
        if track1 then
            task.wait(duration)
            track1:Stop()

            local track2 = playAnimation(animationId2)
            if track2 then
                task.wait(duration)
                track2:Stop()
            end
        end

    else

    end
end

-- Function to anchor the player's character
local function setAnchored(state)
    local character = player.Character
    if character then
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            rootPart.Anchored = state
        end
    end
end


-- Function to stop the target animation and play the new animations
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then


        animationTrack:Stop()

        local character = player.Character
        if character then
            setAnchored(true)
            task.delay(anchorDuration, function()
                setAnchored(false)
            end)
            playAnimationsSequentially(character, animationSpeed, animationDuration)
        else

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

        -- Define settings for the first animation sequence
local animationDuration = 2 -- Duration in seconds for the first animation to play
local secondAnimationDuration = 3 -- Duration for the second animation in seconds
local animationSpeed = 1 -- Speed of the first animation
local secondAnimationSpeed = 1 -- Speed of the second animation
local anchorDuration = 0 -- Duration in seconds between the two animations

-- Define settings for the second animation sequence
local extraAnimationDuration = 0 -- Duration in seconds for the extra animation to play
local extraSecondAnimationDuration = 0 -- Duration for the second extra animation in seconds
local extraAnimationSpeed = 0 -- Speed of the extra animation
local extraSecondAnimationSpeed = 0 -- Speed of the second extra animation
local extraAnchorDuration = 0 -- Duration in seconds between the two extra animations

-- Define the animation IDs
local targetAnimationId = "12447707844" -- The ID of the animation you want to detect
local animationId1 = "15962443652" -- The ID of the first animation to play
local animationId2 = "17120750680" -- The ID of the second animation to play
local extraAnimationId1 = "" -- The ID of the first extra animation to play
local extraAnimationId2 = "" -- The ID of the second extra animation to play

-- Define a list of possible chat messages
local chatMessages = {
    "make it stop please",
    "go away",
    "please go away",
    "i hate all of you",
    "why do you guys even exist?"
}

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage()
    local randomIndex = math.random(1, #chatMessages)
    local message = chatMessages[randomIndex]
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(message)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(message, "All")
    end
end

-- Function to create and play the animation with a specified speed
local function playAnimation(animationId, speed)
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animator = humanoid:FindFirstChildOfClass("Animator")
        if animator then
            local animationTrack = animator:LoadAnimation(animation)
            animationTrack:Play()
            animationTrack:AdjustSpeed(speed or 1)
            return animationTrack
        end
    end
    return nil
end

-- Function to play two animation sequences with a delay between them
local function playAnimationsSequentially(character, animationId1, animationId2, extraAnimationId1, extraAnimationId2)

    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local track1 = playAnimation(animationId1, animationSpeed)
        if track1 then

            -- Make sure the soundId is defined properly
local soundId = 1845805363 -- Replace this with the actual sound asset ID

-- Create a new Sound instance
local sound = Instance.new("Sound")
local soundId = 12345678 -- Replace with your actual soundId
sound.Name = "Yuno Skibidi"
sound.SoundId = "rbxassetid://" .. tostring(soundId) -- Convert soundId to a string if necessary
sound.Volume = 0 -- Start with volume at 0 for fade-in
sound.Pitch = 1 -- Pitch set to 1.0
sound.PlaybackSpeed = 1 -- Adjusted playback speed

-- Parent the sound to Workspace
sound.Parent = workspace

-- Play the sound
sound.TimePosition = 124
sound:Play()

-- Fade in the sound over 3 seconds (adjust as needed)
local fadeInTime = 3
local targetVolume = 0.5
local fadeInIncrement = targetVolume / (fadeInTime * 10) -- 10 steps per second

local function fadeIn()
    for i = 1, fadeInTime * 10 do
        task.wait(0.1) -- Wait 0.1 seconds between each increment
        sound.Volume = math.min(sound.Volume + fadeInIncrement, targetVolume) -- Ensure volume doesn't exceed targetVolume
    end
end

task.delay(0, fadeIn) -- Start fade-in immediately

-- Fade out the sound after 18 seconds and stop it
local fadeOutTime = 3
local fadeOutIncrement = targetVolume / (fadeOutTime * 10) -- 10 steps per second

task.delay(18, function()
    -- Fade out the sound over fadeOutTime seconds
    for i = 1, fadeOutTime * 10 do
        task.wait(0.1) -- Wait 0.1 seconds between each decrement
        sound.Volume = math.max(sound.Volume - fadeOutIncrement, 0) -- Ensure volume doesn't go below 0
    end
    sound:Stop() -- Stop the sound after fade-out

    -- Destroy the sound after it stops playing
    sound:Destroy()
end)

            -- Get the player and their character
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Function to find a descendant recursively by name
local function findDescendant(parent, name)
    local child = parent:FindFirstChild(name)
    if not child then
        for _, descendant in ipairs(parent:GetChildren()) do
            child = findDescendant(descendant, name)
            if child then
                break
            end
        end
    end
    return child
end

-- Function to duplicate a ParticleEmitter
local function duplicateEmitter(originalEmitter)
    local duplicate = originalEmitter:Clone()
    duplicate.Parent = originalEmitter.Parent
    duplicate.Rate = 100  -- Set the rate of the duplicated emitter to 100 initially
    return duplicate
end

-- Look for the tpthing ParticleEmitter
local replicatedStorage = game:GetService("ReplicatedStorage")
local resourcesFolder = replicatedStorage:WaitForChild("Resources", 2) -- Wait for 2 seconds if not immediately found
if resourcesFolder then
    local kjEffectsFolder = resourcesFolder:FindFirstChild("KJEffects")
    if kjEffectsFolder then
        local tpThingEmitter = findDescendant(kjEffectsFolder, "tpthing")
        if tpThingEmitter and tpThingEmitter:IsA("ParticleEmitter") then
            -- Duplicate the emitter
            local duplicatedEmitter = duplicateEmitter(tpThingEmitter)
            
            -- Parent the duplicated emitter to HumanoidRootPart
            duplicatedEmitter.Parent = humanoidRootPart
            print("Successfully parented duplicated tpthing ParticleEmitter to HumanoidRootPart and set Rate to 100.")
            
            -- Set the rate of the duplicated emitter to 0 after 3 seconds using task.delay
            task.delay(2.8, function()
                duplicatedEmitter.Rate = 0
                print("Successfully set Rate of duplicated emitter to 0 after 3 seconds.")
            end)

        else
            warn("Could not find tpthing ParticleEmitter or it is not a ParticleEmitter.")
        end
    else
        warn("Could not find KJEffects folder inside Resources.")
    end
else
    warn("Could not find Resources folder inside ReplicatedStorage.")
end

-- Toggle invisibility section
local invisibilityDuration = 0.05 -- Time between visibility changes (in seconds)
local toggleCount = 25 -- Number of times to toggle visibility
local invisibleTransparency = 1 -- Transparency when invisible (0 is fully visible, 1 is fully invisible)
local visibleTransparency = 0 -- Transparency when visible (0 is fully visible)

-- Parts to exclude from invisibility
local excludedParts = {
    "HumanoidRootPart",
    "Hitbox_RightArm",
    "Hitbox_RightLeg",
    "Hitbox_LeftLeg",
    "Hitbox_LeftArm"
}

-- Function to check if a part should be excluded
local function isExcluded(part)
    for _, name in ipairs(excludedParts) do
        if part.Name == name then
            return true
        end
    end
    return false
end

-- Function to turn the player invisible (if not already invisible)
local function turnInvisible()
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") and not isExcluded(part) then
            part.Transparency = invisibleTransparency
        elseif (part:IsA("Decal") or part:IsA("Texture")) and not isExcluded(part.Parent) then
            part.Transparency = 1 -- Hide textures/decals fully
        end
    end
end

-- Function to turn the player visible again (if not already visible)
local function turnVisible()
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") and not isExcluded(part) then
            part.Transparency = visibleTransparency
        elseif (part:IsA("Decal") or part:IsA("Texture")) and not isExcluded(part.Parent) then
            part.Transparency = 0 -- Show textures/decals again
        end
    end
end

-- Main logic to toggle visibility using task.delay
for i = 1, toggleCount do
    task.delay(invisibilityDuration * (2 * i - 2), turnInvisible)
    task.delay(invisibilityDuration * (2 * i - 1), turnVisible)
end

            -- Variables
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Settings
local leftPositionOffset = Vector3.new(-5, 0, -1) -- Left offset
local rightPositionOffset = Vector3.new(5, 0, -1) -- Right offset
local teleportDelay = 0.05 -- Time delay between teleports
local totalTeleports = 20 -- Total number of teleports

-- Function to teleport the player
local function teleportEffect()
    for i = 1, totalTeleports do

        -- Teleport to the left
        humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(leftPositionOffset)
        wait(teleportDelay)

        -- Teleport to the right
        humanoidRootPart.CFrame = humanoidRootPart.CFrame * CFrame.new(rightPositionOffset)
        wait(teleportDelay)
    end
end

-- Trigger the teleport effect (example: on a button click or other event)
teleportEffect()


            track1:Stop()

            -- Define the player
local player = game.Players.LocalPlayer

-- Wait until the player's character and backpack are loaded
repeat wait() until player and player:FindFirstChild("Backpack")

-- Get the player's backpack
local backpack = player.Backpack

-- Get all tools in the backpack
local tools = backpack:GetChildren()

-- Check if there are at least three tools
if #tools >= 3 then
    -- Loop through the tools
    for i = #tools, 1, -1 do
        -- Delete all tools except the third one
        if i ~= 3 then
            tools[i]:Destroy()
        end
    end
    print("All tools except the third one have been destroyed.")
else
    warn("Fewer than three tools found in the backpack.")
end

            task.wait(anchorDuration) -- Delay between the first and second animations

            local track2 = playAnimation(animationId2, secondAnimationSpeed)

            local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("1").Base

local ToolName = baseButton.ToolName


ToolName.Text = "?"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("2").Base

local ToolName = baseButton.ToolName


ToolName.Text = "?"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("3").Base

local ToolName = baseButton.ToolName


ToolName.Text = "GET AWAY FROM ME"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("4").Base

local ToolName = baseButton.ToolName


ToolName.Text = "?"


local Players = game:GetService("Players")

local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")


local function findGuiAndSetText()

    local screenGui = playerGui:FindFirstChild("ScreenGui")

    if screenGui then

        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")

        if magicHealthFrame then

            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")

            if textLabel then

                textLabel.Text = "Hatred"

            end

        end

    end

end
            chatMessage() -- Send a random chat message

            if track2 then
                task.wait(secondAnimationDuration) -- Play the second animation for its duration
                track2:Stop()
                
                -- Play the extra animations
                local track3 = playAnimation(extraAnimationId1, extraAnimationSpeed)
                if track3 then
                    task.wait(extraAnimationDuration) -- Play the extra animation for its duration
                    track3:Stop()
                    task.wait(extraAnchorDuration) -- Delay between the extra animations

                    local track4 = playAnimation(extraAnimationId2, extraSecondAnimationSpeed)
                    if track4 then
                        task.wait(extraSecondAnimationDuration) -- Play the second extra animation for its duration
                        track4:Stop()
                    end
                end
            end
        end
    end
end

-- Function to anchor the player's character
local function setAnchored(state)
    local character = player.Character
    if character then
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            rootPart.Anchored = state
        end
    end
end

-- Function to stop the target animation and play the new animations
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop()
        local character = player.Character
        if character then
            setAnchored(true)
            task.delay(anchorDuration, function()
                setAnchored(false)
            end)
            playAnimationsSequentially(character, animationId1, animationId2, extraAnimationId1, extraAnimationId2)
        end
    end
end

-- Connect the function to the humanoid's AnimationPlayed event
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "12983333733" -- The ID of the animation you want to detect
local animationId = "13499771836" -- The ID of the animation you want to play

-- Define the duration for which the animation should play
local animationDuration = 10 -- Time in seconds
local animationSpeed = 0.38 -- Speed of the animation

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

-- Function to fix the camera
local function fixCamera()
    local camera = game.Workspace.CurrentCamera
    local savedCFrame = camera.CFrame -- Save the camera's CFrame before destroying it
    
    camera:Destroy() -- Destroy the current camera
    
    local char = player.Character
    if char then
        local humanoid = char:FindFirstChildWhichIsA('Humanoid')
        if humanoid then
            local newCamera = Instance.new("Camera")
            newCamera.Parent = game.Workspace
            game.Workspace.CurrentCamera = newCamera
            newCamera.CameraSubject = humanoid
            newCamera.CameraType = Enum.CameraType.Custom
            newCamera.CFrame = savedCFrame -- Restore the saved CFrame
            
            -- Camera settings
            player.CameraMinZoomDistance = 0.5
            player.CameraMaxZoomDistance = 400
            player.CameraMode = Enum.CameraMode.Classic
            
            -- Unanchor the character's head if necessary
            if char:FindFirstChild("Head") then
                char.Head.Anchored = false
            end
        end
    end
end

-- Function to create and play the animation with a specified speed
local function playAnimation(character, speed, duration)
    -- Create an animation instance
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("1").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Off Me"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("2").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Stop"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("3").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Get Away"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("4").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Why"


local Players = game:GetService("Players")

local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")


local function findGuiAndSetText()

    local screenGui = playerGui:FindFirstChild("ScreenGui")

    if screenGui then

        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")

        if magicHealthFrame then

            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")

            if textLabel then

                textLabel.Text = "Hatred"

            end

        end

    end

end

playerGui.DescendantAdded:Connect(findGuiAndSetText)
 
findGuiAndSetText()

    -- Load the animation onto the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the animation
        animationTrack:AdjustSpeed(speed or 1) -- Adjust the animation speed (default is 1 if not provided)

        -- Chat messages with Japanese translations
        chatMessage("GET AWAY FROM ME")

        -- Wait for the specified duration and then stop the animation
        wait(duration or animationDuration)
        animationTrack:Stop() -- Stop the animation
    else

    end
end

-- Function to stop the target animation and perform the desired action after a delay
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then

        animationTrack:Stop() -- Stop the target animation

        -- Fix the camera when the target animation is detected
        fixCamera()
        
        -- Wait for 0.1 seconds before performing the desired action

        -- Get the character
        local character = player.Character
        if character then
            -- Call the function to play the animation with the desired speed and duration
            playAnimation(character, animationSpeed, animationDuration)
        else

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event for the local player's character

local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    else

    end
end

-- Detect when the local player's character is added to the game
if player.Character then
    onCharacterAdded(player.Character)
else

end

player.CharacterAdded:Connect(onCharacterAdded)

   end,
})

local Button = Tabs.CustomMovesets:AddButton({
    Title = "Ryomen Sukuna",
    Description = "Use Atomic Samurai--Become The Disgraced One",
    Callback = function()
   local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("1").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Dismantle Barrage"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("2").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Chokehold"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("3").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Cleave"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("4").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Filthy Humans"


local Players = game:GetService("Players")

local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")


local function findGuiAndSetText()

    local screenGui = playerGui:FindFirstChild("ScreenGui")

    if screenGui then

        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")

        if magicHealthFrame then

            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")

            if textLabel then

                textLabel.Text = "The Disgraced One"

            end

        end

    end

end

playerGui.DescendantAdded:Connect(findGuiAndSetText)
 
findGuiAndSetText()

local TweenService = game:GetService("TweenService")
local player = game.Players.LocalPlayer
local camera = game.Workspace.CurrentCamera
local playerGui = player:WaitForChild("PlayerGui")

local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Duration of the cutscene and fade
local cutsceneDuration = .5
local fadeDuration = .5

-- Create a ScreenGui and Frame for the fade effect
local screenGui = Instance.new("ScreenGui", playerGui)
local frame = Instance.new("Frame", screenGui)
frame.AnchorPoint = Vector2.new(0.5, 0.5)
frame.Position = UDim2.new(0.5, 0, 0.5, 0)
frame.Size = UDim2.new(900, 0, 900, 0) -- Set the size to be 900 times bigger
frame.BackgroundColor3 = Color3.new(0, 0, 0)
frame.BackgroundTransparency = 1

-- Create a TextLabel for the "Super Saiyan" text in Chinese
local textLabel = Instance.new("TextLabel", screenGui)
textLabel.AnchorPoint = Vector2.new(0.5, 0.5)
textLabel.Position = UDim2.new(0.5, 0, 0.5, 0)
textLabel.Size = UDim2.new(0.2, 0, 0.1, 0)
textLabel.BackgroundTransparency = 1
textLabel.Text = "スクナ"
textLabel.TextColor3 = Color3.new(1, 0, 0) -- Set text color to red
textLabel.TextScaled = true
textLabel.Font = Enum.Font.SourceSansBold
textLabel.TextTransparency = 1

-- TweenInfo for the fade effect
local fadeInInfo = TweenInfo.new(
    fadeDuration, -- Time
    Enum.EasingStyle.Sine, -- EasingStyle
    Enum.EasingDirection.InOut -- EasingDirection
)

local fadeOutInfo = TweenInfo.new(
    fadeDuration, -- Time
    Enum.EasingStyle.Sine, -- EasingStyle
    Enum.EasingDirection.InOut -- EasingDirection
)

-- TweenInfo for the camera movement
local tweenInfo = TweenInfo.new(
    cutsceneDuration, -- Time
    Enum.EasingStyle.Sine, -- EasingStyle
    Enum.EasingDirection.InOut -- EasingDirection
)

-- Initial and final camera CFrame
local initialCFrame = humanoidRootPart.CFrame * CFrame.new(0, -5, 0)
local finalCFrame = humanoidRootPart.CFrame * CFrame.new(0, 2, 2) * CFrame.Angles(0, math.rad(180), 0)

-- Create the Tween for the camera
local cameraTween = TweenService:Create(camera, tweenInfo, {CFrame = finalCFrame})

-- Create Tweens for the fade effect
local fadeInTween = TweenService:Create(frame, fadeInInfo, {BackgroundTransparency = 0})
local fadeOutTween = TweenService:Create(frame, fadeOutInfo, {BackgroundTransparency = 1})

-- Create Tweens for the text transparency
local textFadeInTween = TweenService:Create(textLabel, fadeInInfo, {TextTransparency = 0})
local textFadeOutTween = TweenService:Create(textLabel, fadeOutInfo, {TextTransparency = 1})

-- Function to play the camera cutscene and fade effect
local function playCutscene()
    -- Set initial camera position
    camera.CFrame = initialCFrame
    
    -- Play the fade-in tween for the black screen and text
    fadeInTween:Play()
    textFadeInTween:Play()
    fadeInTween.Completed:Wait()
    
    -- Play the camera tween
    cameraTween:Play()
    cameraTween.Completed:Wait()
    
    -- Play the fade-out tween for the black screen and text
    fadeOutTween:Play()
    textFadeOutTween:Play()
    fadeOutTween.Completed:Wait()
    
    -- Reset the camera to its default behavior
    camera.CameraSubject = character:WaitForChild("Humanoid")
end

-- Start the cutscene
playCutscene()

-- Define the animation IDs
local targetAnimationId = "13380255751" -- Sukuna Dash
local animationId = "17838006839" -- The ID of the animation you want to play
local animationSpeed = 2.35 -- Adjust the speed here (2 means 2x faster, 1 is normal speed)

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to stop all animations
local function stopAllAnimations(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
            track:Stop() -- Stop each playing animation
        end
    end
end

-- Function to create and play the new animation
local function playAnimation(character)
    stopAllAnimations(character) -- Stop all current animations

    -- Create an animation instance for the new animation
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load and play the animation on the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the new animation

        -- Get the player and their character
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

-- Function to find a descendant recursively by name
local function findDescendant(parent, name)
    local child = parent:FindFirstChild(name)
    if not child then
        for _, descendant in ipairs(parent:GetChildren()) do
            child = findDescendant(descendant, name)
            if child then
                break
            end
        end
    end
    return child
end

-- Function to duplicate a ParticleEmitter
local function duplicateEmitter(originalEmitter)
    local duplicate = originalEmitter:Clone()
    duplicate.Parent = originalEmitter.Parent
    duplicate.Rate = 150  -- Set the rate of the duplicated emitter to 150 initially
    return duplicate
end

-- Invisibility settings
local invisibilityDuration = .55 -- Time the player stays invisible (in seconds)
local invisibleTransparency = 1 -- Transparency when invisible (0 is fully visible, 1 is fully invisible)
local visibleTransparency = 0 -- Transparency when visible

-- Parts to exclude from invisibility
local excludedParts = {
"HumanoidRootPart",
                            "Hitbox_RightArm",
                            "Hitbox_RightLeg",
                            "Hitbox_LeftLeg",
                            "Hitbox_LeftArm",
                            "camera",
                            "camerarootpart",
                            "letterboxtop",
                            "letterboxbot",
                            "Cylinder.002",
                            "Cylinder.005",
                            "Cylinder.006",
                            "Main",
                            "Circle.002",
                            "Circle.001",
                            "Circle",
                            "Cylinder",
                            "Cylinder.003",
                            "Cylinder.010",
                            "WeaponHold",
}

-- Function to check if a part should be excluded
local function isExcluded(part)
    for _, name in ipairs(excludedParts) do
        if part.Name == name then
            return true
        end
    end
    return false
end

-- Function to turn the player invisible
local function turnInvisible()
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") and not isExcluded(part) then
            part.Transparency = invisibleTransparency
        elseif (part:IsA("Decal") or part:IsA("Texture")) and not isExcluded(part.Parent) then
            part.Transparency = 1 -- Hide textures/decals fully
        end
    end
end

-- Function to turn the player visible again
local function turnVisible()
    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") and not isExcluded(part) then
            part.Transparency = visibleTransparency
        elseif (part:IsA("Decal") or part:IsA("Texture")) and not isExcluded(part.Parent) then
            part.Transparency = 0 -- Show textures/decals again
        end
    end
end

-- Main logic
local replicatedStorage = game:GetService("ReplicatedStorage")
local resourcesFolder = replicatedStorage:WaitForChild("Resources", 2) -- Wait for 2 seconds if not immediately found
if resourcesFolder then
    local kjEffectsFolder = resourcesFolder:FindFirstChild("KJEffects")
    if kjEffectsFolder then
        local tpThingEmitter = findDescendant(kjEffectsFolder, "tpthing")
        if tpThingEmitter and tpThingEmitter:IsA("ParticleEmitter") then
            -- Duplicate the emitter
            local duplicatedEmitter = duplicateEmitter(tpThingEmitter)

            -- Parent the duplicated emitter to HumanoidRootPart
            duplicatedEmitter.Parent = humanoidRootPart

            -- Make the player invisible
            turnInvisible()
            wait(invisibilityDuration)
            turnVisible()

            -- Set the rate of the duplicated emitter to 0 after invisibility duration
            duplicatedEmitter.Rate = 0
        else
            warn("Could not find tpthing ParticleEmitter or it is not a ParticleEmitter.")
        end
    else
        warn("Could not find KJEffects folder inside Resources.")
    end
else
    warn("Could not find Resources folder inside ReplicatedStorage.")
end

        animationTrack.Speed = animationSpeed -- Set the animation speed
    end
end

-- Function to stop the target animation and play the new one
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Play the new animation
            playAnimation(character)
        end
    end
end

-- Connect to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
        
    end
end

-- Detect when the local player's character is added
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "15259161390" -- The ID of the animation you want to detect 10479335397
local animationId = "17889458563" -- The ID of the animation you want to play

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to stop all animations
local function stopAllAnimations(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
            track:Stop() -- Stop each playing animation
        end
    end
end

-- Function to create and play the new animation
local function playAnimation(character)
    stopAllAnimations(character) -- Stop all current animations

    -- Create an animation instance for the new animation
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load and play the animation on the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the new animation
    end
end

-- Function to stop the target animation and play the new one
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Play the new animation
            playAnimation(character)
        end
    end
end

-- Connect to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "15240216931" -- The ID of the animation you want to detect
local animationId = "17889461810" -- The ID of the animation you want to play

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to stop all animations
local function stopAllAnimations(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
            track:Stop() -- Stop each playing animation
        end
    end
end

-- Function to create and play the new animation
local function playAnimation(character)
    stopAllAnimations(character) -- Stop all current animations

    -- Create an animation instance for the new animation
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load and play the animation on the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the new animation
    end
end

-- Function to stop the target animation and play the new one
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Play the new animation
            playAnimation(character)
        end
    end
end

-- Connect to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "15240176873" -- The ID of the animation you want to detect
local animationId = "17889471098" -- The ID of the animation you want to play

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to stop all animations
local function stopAllAnimations(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
            track:Stop() -- Stop each playing animation
        end
    end
end

-- Function to create and play the new animation
local function playAnimation(character)
    stopAllAnimations(character) -- Stop all current animations

    -- Create an animation instance for the new animation
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load and play the animation on the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the new animation
    end
end

-- Function to stop the target animation and play the new one
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Play the new animation
            playAnimation(character)
        end
    end
end

-- Connect to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "15162694192" -- The ID of the animation you want to detect
local animationId = "17889290569" -- The ID of the animation you want to play

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to stop all animations
local function stopAllAnimations(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
            track:Stop() -- Stop each playing animation
        end
    end
end

-- Function to create and play the new animation
local function playAnimation(character)
    stopAllAnimations(character) -- Stop all current animations

    -- Create an animation instance for the new animation
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load and play the animation on the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the new animation
    end
end

-- Function to stop the target animation and play the new one
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Play the new animation
            playAnimation(character)
        end
    end
end

-- Connect to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "15436465829" -- The ID of the animation you want to detect
local animationId = "13073745835" -- The ID of the animation you want to play

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

-- Function to stop all animations
local function stopAllAnimations(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
            track:Stop() -- Stop each playing animation
        end
    end
end

-- Function to create and play the new animation
local function playAnimation(character)
    stopAllAnimations(character) -- Stop all current animations

    -- Create an animation instance for the new animation
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load and play the animation on the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the new animation
        chatMessage("Die Fool || 馬鹿死ね")
    end
end

-- Function to stop the target animation and play the new one
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Play the new animation
            playAnimation(character)
        end
    end
end

-- Connect to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "15279910941" -- The ID of the animation you want to detect
local animationId = "" -- The ID of the animation you want to play

-- Get the local player
local player = game.Players.LocalPlayer

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

-- Function to stop all animations
local function stopAllAnimations(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
            track:Stop() -- Stop each playing animation
        end
    end
end

-- Function to create and play the new animation
local function playAnimation(character)
    stopAllAnimations(character) -- Stop all current animations

    -- Create an animation instance for the new animation
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load and play the animation on the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the new animation
        chatMessage("Too Late || 遅すぎる")
    end
end

-- Function to stop the target animation and play the new one
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Play the new animation
            playAnimation(character)
        end
    end
end

-- Connect to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "15391323441" -- Stand Proud
local animationId = "15507137974" -- The ID of the animation you want to play

-- Get the local player
local player = game.Players.LocalPlayer
local players = game:GetService("Players")
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

-- Function to stop all animations
local function stopAllAnimations(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        for _, track in pairs(humanoid:GetPlayingAnimationTracks()) do
            track:Stop() -- Stop each playing animation
        end
    end
end

-- Function to find the closest player to the local player
local function getClosestPlayer()
    local closestPlayer = nil
    local shortestDistance = math.huge -- Start with the largest possible number

    for _, otherPlayer in pairs(players:GetPlayers()) do
        if otherPlayer ~= player and otherPlayer.Character and otherPlayer.Character:FindFirstChild("HumanoidRootPart") then
            local distance = (player.Character.HumanoidRootPart.Position - otherPlayer.Character.HumanoidRootPart.Position).Magnitude
            if distance < shortestDistance then
                shortestDistance = distance
                closestPlayer = otherPlayer
            end
        end
    end

    return closestPlayer
end

-- Function to create and play the new animation
local function playAnimation(character)
    stopAllAnimations(character) -- Stop all current animations

    -- Create an animation instance for the new animation
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId

    -- Load and play the animation on the humanoid
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animationTrack = humanoid:LoadAnimation(animation)
        animationTrack:Play() -- Play the new animation
        
        -- Get the closest player's username
        local closestPlayer = getClosestPlayer()
        if closestPlayer then
            chatMessage("Stand proud, " .. closestPlayer.Name)

            local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to fix the camera
local function fixCamera()
    local camera = game.Workspace.CurrentCamera
    local savedCFrame = camera.CFrame -- Save the camera's CFrame before destroying it
    
    camera:Destroy() -- Destroy the current camera
    
    local char = player.Character
    if char then
        local humanoid = char:FindFirstChildWhichIsA('Humanoid')
        if humanoid then
            local newCamera = Instance.new("Camera")
            newCamera.Parent = game.Workspace
            game.Workspace.CurrentCamera = newCamera
            newCamera.CameraSubject = humanoid
            newCamera.CameraType = Enum.CameraType.Custom
            newCamera.CFrame = savedCFrame -- Restore the saved CFrame
            
            -- Camera settings
            player.CameraMinZoomDistance = 0.5
            player.CameraMaxZoomDistance = 400
            player.CameraMode = Enum.CameraMode.Classic
            
            -- Unanchor the character's head if necessary
            if char:FindFirstChild("Head") then
                char.Head.Anchored = false
            end
        end
    end
end

fixCamera()

task.wait(6.5)

                        local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("1").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Fire Cleave Barrage"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("2").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Open"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("3").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Flame Combo"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("4").Base

local ToolName = baseButton.ToolName


ToolName.Text = "World Cutting Slash"


local Players = game:GetService("Players")

local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")


local function findGuiAndSetText()

    local screenGui = playerGui:FindFirstChild("ScreenGui")

    if screenGui then

        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")

        if magicHealthFrame then

            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")

            if textLabel then

                textLabel.Text = "The Disgraced One"

            end

        end

    end

end

playerGui.DescendantAdded:Connect(findGuiAndSetText)
 
findGuiAndSetText()

        else
            chatMessage("Come On Try Harder! || さあ、もっと頑張ってください！") -- Fallback if no player is found

            task.wait(6.5)

                        local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("1").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Fire Cleave Barrage"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("2").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Open"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("3").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Flame Combo"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("4").Base

local ToolName = baseButton.ToolName


ToolName.Text = "World Cutting Slash"


local Players = game:GetService("Players")

local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")


local function findGuiAndSetText()

    local screenGui = playerGui:FindFirstChild("ScreenGui")

    if screenGui then

        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")

        if magicHealthFrame then

            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")

            if textLabel then

                textLabel.Text = "The Disgraced One"

            end

        end

    end

end

playerGui.DescendantAdded:Connect(findGuiAndSetText)
 
findGuiAndSetText()

        end
    end
end

-- Function to stop the target animation and play the new one
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop() -- Stop the target animation
        
        -- Get the character
        local character = player.Character
        if character then
            -- Play the new animation
            playAnimation(character)
        end
    end
end

-- Connect to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation ID to detect
local targetAnimationId = "16082123712" -- The ID of the animation you want to detect

-- Get the local player
local player = game.Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TextChatService = game:GetService("TextChatService")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

-- Function to detect the target animation
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        -- Send a chat message when the target animation is detected
        chatMessage("Scale Of The Dragon")
        wait(1)
        chatMessage("Recoil")
        wait(1)
        chatMessage("Twin Meteors")
        wait(6.5)
        chatMessage("World Cutting Slash")
    end
end

-- Connect to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation ID to detect
local targetAnimationId = "15676072469" -- The ID of the animation you want to detect

-- Get the local player
local player = game.Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TextChatService = game:GetService("TextChatService")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

-- Function to detect the target animation
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        -- Send a chat message when the target animation is detected
        chatMessage("Open")
    end
end

-- Connect to the humanoid's AnimationPlayed event for the local player's character
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

-- Detect when the local player's character is added
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)


-- Define the animation IDs
local targetAnimationId = "15290930205" -- Dismantle
local animationId1 = "12534735382" -- The ID of the first animation to play
local animationId2 = "" -- The ID of the second animation to play

-- Define settings
local animationDuration = 3 -- Duration in seconds for each animation to play
local animationSpeed = 1.4 -- Speed of the animations
local anchorDuration = .4 -- Duration in seconds to keep the player anchored
local waitBeforePlay = .5 -- Small wait before the animations play (in seconds)

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

-- Function to create and play the animation with a specified speed
local function playAnimationsSequentially(character, speed, duration)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local function playAnimation(animationId)
            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://" .. animationId
            local animator = humanoid:FindFirstChildOfClass("Animator")
            if animator then
                local animationTrack = animator:LoadAnimation(animation)
                
                animationTrack:Play()
                animationTrack:AdjustSpeed(speed or 1)

                local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("1").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Dismantle Barrage"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("2").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Chokehold"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("3").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Cleave"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("4").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Filthy Humans"


local Players = game:GetService("Players")

local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")


local function findGuiAndSetText()

    local screenGui = playerGui:FindFirstChild("ScreenGui")

    if screenGui then

        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")

        if magicHealthFrame then

            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")

            if textLabel then

                textLabel.Text = "The Disgraced One"

            end

        end

    end

end

playerGui.DescendantAdded:Connect(findGuiAndSetText)
 
findGuiAndSetText()

                return animationTrack
            else
                return nil
            end
        end

        local track1 = playAnimation(animationId1)
        if track1 then
            task.wait(duration)
            track1:Stop()

            local track2 = playAnimation(animationId2)
            if track2 then
                task.wait(duration)
                track2:Stop()
            end
        end
    end
end

-- Function to anchor the player's character
local function setAnchored(state)
    local character = player.Character
    if character then
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            rootPart.Anchored = state
        end
    end
end

-- Function to stop the target animation and play the new animations
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop()

        local character = player.Character
        if character then
            setAnchored(true)
            task.delay(anchorDuration, function()
                setAnchored(false)
            end)

            -- Add a small wait before starting the new animations
            task.wait(waitBeforePlay)
            playAnimationsSequentially(character, animationSpeed, animationDuration)
        end
    end
end

-- Connect the function to the humanoid's AnimationPlayed event
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

if player.Character then
    onCharacterAdded(player.Character)
end

player.CharacterAdded:Connect(onCharacterAdded)

-- Detect when the local player's character is added
if player.Character then
    onCharacterAdded(player.Character)
end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "15145462680" -- Chokehold
local animationId1 = "13073745835" -- The ID of the first animation to play
local animationId2 = "12467789963" -- The ID of the second animation to play

-- Define settings
local animationDuration1 = 1.8 -- Duration in seconds for the first animation
local animationDuration2 = 3 -- Duration in seconds for the second animation
local animationSpeed1 = 0.5 -- Speed of the first animation
local animationSpeed2 = 1.7 -- Speed of the second animation
local anchorDuration = 0.4 -- Duration in seconds to keep the player anchored
local waitBeforePlay = 0 -- Small wait before the animations play (in seconds)
local timeOffset = 0 -- The amount of time to start the animation earlier

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

-- Function to create and play the animation with a specified speed and offset time
local function playAnimationsSequentially(character, speed1, speed2, duration1, duration2, timeOffset)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local function playAnimation(animationId, startAt, speed)
            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://" .. animationId
            local animator = humanoid:FindFirstChildOfClass("Animator")
            if animator then
                local animationTrack = animator:LoadAnimation(animation)
                animationTrack:Play()
                animationTrack:AdjustSpeed(speed or 1)

                -- Set the TimePosition to start the animation at the desired time
                if startAt and startAt > 0 then
                    animationTrack.TimePosition = startAt
                end

                return animationTrack
            else
                return nil
            end
        end

        local track1 = playAnimation(animationId1, timeOffset, speed1)
        if track1 then
            task.wait(duration1)
            track1:Stop()

            local track2 = playAnimation(animationId2, timeOffset, speed2)
            if track2 then
                task.wait(duration2)
                track2:Stop()
            end
        end
    end
end

-- Function to anchor the player's character
local function setAnchored(state)
    local character = player.Character
    if character then
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            rootPart.Anchored = state
        end
    end
end

-- Function to stop the target animation and play the new animations
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop()

        local character = player.Character
        if character then
            setAnchored(true)
            task.delay(anchorDuration, function()
                setAnchored(false)
            end)

            -- Add a small wait before starting the new animations
            task.wait(waitBeforePlay)
            playAnimationsSequentially(character, animationSpeed1, animationSpeed2, animationDuration1, animationDuration2, timeOffset)
        end
    end
end

-- Connect the function to the humanoid's AnimationPlayed event
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

if player.Character then
    onCharacterAdded(player.Character)
end

player.CharacterAdded:Connect(onCharacterAdded)

-- Define settings for the first animation sequence
local animationDuration = 1 -- Cleave
local secondAnimationDuration = 3 -- Duration for the second animation in seconds
local animationSpeed = 2.7 -- Speed of the first animation
local secondAnimationSpeed = 1 -- Speed of the second animation
local anchorDuration = 0 -- Duration in seconds between the two animations

-- Define settings for the second animation sequence
local extraAnimationDuration = 0 -- Duration in seconds for the extra animation to play
local extraSecondAnimationDuration = 0 -- Duration for the second extra animation in seconds
local extraAnimationSpeed = 0 -- Speed of the extra animation
local extraSecondAnimationSpeed = 0 -- Speed of the second extra animation
local extraAnchorDuration = 0 -- Duration in seconds between the two extra animations

-- Define the animation IDs
local targetAnimationId = "15295895753" -- The ID of the animation you want to detect
local animationId1 = "14900168720" -- The ID of the first animation to play
local animationId2 = "16515448089" -- The ID of the second animation to play
local extraAnimationId1 = "" -- The ID of the first extra animation to play
local extraAnimationId2 = "" -- The ID of the second extra animation to play

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

-- Function to create and play the animation with a specified speed
local function playAnimation(animationId, speed)
    local animation = Instance.new("Animation")
    animation.AnimationId = "rbxassetid://" .. animationId
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local animator = humanoid:FindFirstChildOfClass("Animator")
        if animator then
            local animationTrack = animator:LoadAnimation(animation)
            animationTrack:Play()
            animationTrack:AdjustSpeed(speed or 1)

            local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("1").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Dismantle Barrage"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("2").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Chokehold"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("3").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Cleave"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("4").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Filthy Humans"


local Players = game:GetService("Players")

local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")


local function findGuiAndSetText()

    local screenGui = playerGui:FindFirstChild("ScreenGui")

    if screenGui then

        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")

        if magicHealthFrame then

            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")

            if textLabel then

                textLabel.Text = "The Disgraced One"

            end

        end

    end

end

playerGui.DescendantAdded:Connect(findGuiAndSetText)
 
findGuiAndSetText()

            return animationTrack
        else

            return nil
        end
    else

        return nil
    end
end

-- Function to play two animation sequences with a delay between them
local function playAnimationsSequentially(character, animationId1, animationId2, extraAnimationId1, extraAnimationId2)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local track1 = playAnimation(animationId1, animationSpeed)
        if track1 then
            task.wait(animationDuration) -- Play the first animation for the duration specified
            track1:Stop()

            task.wait(anchorDuration) -- Delay between the first and second animations

            local track2 = playAnimation(animationId2, secondAnimationSpeed)
            chatMessage("")

            if track2 then
                task.wait(secondAnimationDuration) -- Play the second animation for its duration
                track2:Stop()
                
                -- Play the extra animations
                local track3 = playAnimation(extraAnimationId1, extraAnimationSpeed)
                if track3 then
                    task.wait(extraAnimationDuration) -- Play the extra animation for its duration
                    track3:Stop()

                    task.wait(extraAnchorDuration) -- Delay between the extra animations

                    local track4 = playAnimation(extraAnimationId2, extraSecondAnimationSpeed)

                    if track4 then
                        task.wait(extraSecondAnimationDuration) -- Play the second extra animation for its duration
                        track4:Stop()
                    end
                end
            end
        end
    else

    end
end

-- Function to anchor the player's character
local function setAnchored(state)
    local character = player.Character
    if character then
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            rootPart.Anchored = state
        end
    end
end

-- Function to stop the target animation and play the new animations
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then


        animationTrack:Stop()

        local character = player.Character
        if character then
            setAnchored(true)
            task.delay(anchorDuration, function()
                setAnchored(false)
            end)
            playAnimationsSequentially(character, animationId1, animationId2, extraAnimationId1, extraAnimationId2)
        else

        end
    else

    end
end

-- Connect the function to the humanoid's AnimationPlayed event
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)

    else

    end
end

if player.Character then
    onCharacterAdded(player.Character)
else

end
player.CharacterAdded:Connect(onCharacterAdded)

-- Define the animation IDs
local targetAnimationId = "15311685628" -- Filthy Humans Miss
local animationId1 = "17861844708 " -- The ID of the first animation to play
local animationId2 = "" -- The ID of the second animation to play

-- Define settings
local animationDuration = 3 -- Duration in seconds for each animation to play
local animationSpeed = 1 -- Speed of the animations
local anchorDuration = .4 -- Duration in seconds to keep the player anchored
local waitBeforePlay = 0 -- Small wait before the animations play (in seconds)
local timeOffset = 1.5 -- The amount of time to start the animation earlier

-- Get the local player and services
local player = game.Players.LocalPlayer
local TextChatService = game:GetService("TextChatService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Function to send a chat message
local function chatMessage(str)
    str = tostring(str)
    if TextChatService.ChatVersion == Enum.ChatVersion.TextChatService then
        TextChatService.TextChannels.RBXGeneral:SendAsync(str)
    else
        ReplicatedStorage.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(str, "All")
    end
end

-- Function to create and play the animation with a specified speed and offset time
local function playAnimationsSequentially(character, speed, duration, timeOffset)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        local function playAnimation(animationId, startAt)
            local animation = Instance.new("Animation")
            animation.AnimationId = "rbxassetid://" .. animationId
            local animator = humanoid:FindFirstChildOfClass("Animator")
            if animator then
                local animationTrack = animator:LoadAnimation(animation)
                animationTrack:Play()
                animationTrack:AdjustSpeed(speed or 1)

                local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("1").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Dismantle Barrage"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("2").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Chokehold"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("3").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Cleave"


local player = game.Players.LocalPlayer

local playerGui = player.PlayerGui

local hotbar = playerGui:FindFirstChild("Hotbar")

local backpack = hotbar:FindFirstChild("Backpack")

local hotbarFrame = backpack:FindFirstChild("Hotbar")

local baseButton = hotbarFrame:FindFirstChild("4").Base

local ToolName = baseButton.ToolName


ToolName.Text = "Filthy Humans"


local Players = game:GetService("Players")

local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")


local function findGuiAndSetText()

    local screenGui = playerGui:FindFirstChild("ScreenGui")

    if screenGui then

        local magicHealthFrame = screenGui:FindFirstChild("MagicHealth")

        if magicHealthFrame then

            local textLabel = magicHealthFrame:FindFirstChild("TextLabel")

            if textLabel then

                textLabel.Text = "The Disgraced One"

            end

        end

    end

end

playerGui.DescendantAdded:Connect(findGuiAndSetText)
 
findGuiAndSetText()

                
                -- Set the TimePosition to start the animation at the desired time
                if startAt and startAt > 0 then
                    animationTrack.TimePosition = startAt
                end

                return animationTrack
            else
                return nil
            end
        end

        local track1 = playAnimation(animationId1, timeOffset)
        if track1 then
            task.wait(duration)
            track1:Stop()

            local track2 = playAnimation(animationId2, timeOffset)
            if track2 then
                task.wait(duration)
                track2:Stop()
            end
        end
    end
end

-- Function to anchor the player's character
local function setAnchored(state)
    local character = player.Character
    if character then
        local rootPart = character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            rootPart.Anchored = state
        end
    end
end

-- Function to stop the target animation and play the new animations
local function onAnimationPlayed(animationTrack)
    if animationTrack and animationTrack.Animation and animationTrack.Animation.AnimationId == "rbxassetid://" .. targetAnimationId then
        animationTrack:Stop()

        local character = player.Character
        if character then
            setAnchored(true)
            task.delay(anchorDuration, function()
                setAnchored(false)
            end)

            -- Add a small wait before starting the new animations
            task.wait(waitBeforePlay)
            playAnimationsSequentially(character, animationSpeed, animationDuration, timeOffset)
        end
    end
end

-- Connect the function to the humanoid's AnimationPlayed event
local function onCharacterAdded(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.AnimationPlayed:Connect(onAnimationPlayed)
    end
end

if player.Character then
    onCharacterAdded(player.Character)
end

player.CharacterAdded:Connect(onCharacterAdded)

local RunService = game:GetService("RunService")
local invisibleTransparency = 1 -- Transparency when invisible (1 is fully invisible)

-- Function to set transparency of all BaseParts inside groups (Model instances) to 1
local function setTransparencyToOne(character)
    for _, model in pairs(character:GetChildren()) do
        if model:IsA("Model") then
            -- Set transparency for all BaseParts inside the Model to 1
            for _, part in pairs(model:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.Transparency = invisibleTransparency -- Set parts inside Model to invisible
                end
            end
        end
    end
end

-- Sample usage
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()

-- Continuously set transparency every frame
RunService.RenderStepped:Connect(function()
    setTransparencyToOne(character)
end)


   end,
})

local Players = game:GetService("Players")
local localPlayer = Players.LocalPlayer

local resurrectionToggled = false
local teleportedPlayers = {} -- Track which players have triggered the teleportation

local LockOnToggle = Tabs.Anti:AddToggle("Anti Death Blow", {
    Title = "Anti Omnidirectional Punch",
    Default = false,
    Callback = function(Value)
        resurrectionToggled = Value
        if resurrectionToggled then
            -- Define the target animation ID
            local targetAnimationId = "13927612951"

            -- Function to teleport the local player behind the target player
            local function teleportBehindTarget(target)
                local targetCharacter = target.Character
                local targetHumanoidRootPart = targetCharacter and targetCharacter:FindFirstChild("HumanoidRootPart")
                local playerCharacter = localPlayer.Character
                local playerHumanoidRootPart = playerCharacter and playerCharacter:FindFirstChild("HumanoidRootPart")

                if targetHumanoidRootPart and playerHumanoidRootPart then
                    -- Calculate the position further behind the target
                    local offset = targetHumanoidRootPart.CFrame.LookVector * -5 -- Adjust distance as needed
                    local behindPosition = targetHumanoidRootPart.Position + offset
                    playerHumanoidRootPart.CFrame = CFrame.new(behindPosition, targetHumanoidRootPart.Position)
                end
            end

            -- Function to check if a player is playing the target animation
            local function checkForAnimation(humanoid, player)
                local tracks = humanoid:GetPlayingAnimationTracks()
                local animationDetected = false
                for _, track in ipairs(tracks) do
                    if track.Animation and track.Animation.AnimationId == targetAnimationId then
                        animationDetected = true
                        break
                    end
                end

                if animationDetected then
                    -- Teleport if this player hasn't been teleported yet
                    if player ~= localPlayer and not teleportedPlayers[player.UserId] then
                        teleportedPlayers[player.UserId] = true
                        print("Player is playing the target animation!")
                        teleportBehindTarget(player)
                        return true
                    end
                else
                    -- Reset the teleportation tracking for this player if animation is no longer playing
                    teleportedPlayers[player.UserId] = nil
                end
                return false
            end

            -- Function to monitor a single player for the target animation
            local function monitorPlayer(player)
                local function onCharacterAdded(character)
                    local humanoid = character:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        spawn(function()
                            while resurrectionToggled do
                                checkForAnimation(humanoid, player)
                                wait(0.1) -- Adjust the wait time as needed
                            end
                        end)
                    end
                end

                player.CharacterAdded:Connect(onCharacterAdded)

                -- Handle case where the character already exists
                if player.Character then
                    onCharacterAdded(player.Character)
                end
            end

            -- Monitor all players currently in the game
            for _, player in pairs(Players:GetPlayers()) do
                monitorPlayer(player)
            end

            -- Monitor players who join the game
            Players.PlayerAdded:Connect(function(player)
                monitorPlayer(player)
            end)

            -- Reset tracking when the local player leaves the game
            localPlayer.AncestryChanged:Connect(function(_, parent)
                if not parent then
                    teleportedPlayers = {}
                end
            end)
        else
            -- Clear the tracking if the toggle is turned off
            teleportedPlayers = {}
        end
    end,
})

-- Create the slider
local SpeedSlider = Tabs.Move:AddSlider("SpeedSlider", {
    Title = "Speed Slider",
    Description = "Adjusts the player's walk speed",
    Default = 16,
    Min = 0,
    Max = 250,
    Rounding = 1,
    Callback = function(Value)
        currentSpeed = Value
    end
})

-- Function to continuously update the speed
local function updateSpeed()
    while true do
        if isSpeedEnabled then
            local character = game.Players.LocalPlayer.Character
            if character then
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    humanoid.WalkSpeed = currentSpeed
                end
            end
        end
        task.wait(0.1)  -- Update interval, adjust as needed
    end
end

-- Start the update loop
updateSpeed()


    Input:OnChanged(function()
        print("Input updated:", Input.Value)
    end)
end


SaveManager:SetLibrary(Fluent)
InterfaceManager:SetLibrary(Fluent)
SaveManager:IgnoreThemeSettings()
SaveManager:SetIgnoreIndexes({})
InterfaceManager:SetFolder("FluentScriptHub")
SaveManager:SetFolder("FluentScriptHub/specific-game")
InterfaceManager:BuildInterfaceSection(Tabs.Settings)
SaveManager:BuildConfigSection(Tabs.Settings)

Window:SelectTab(1)

Fluent:Notify({
    Title = "Fluent",
    Content = "The script has been loaded.",
    Duration = 8
})
